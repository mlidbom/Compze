AccountQuerymodel is an example of an eventstore generated query model.
Such query models implement the ability to create query models ad hoc by using the events from the event store. 

Advantages:
* You don't need to spend time populating/Repopulating the query models.
* * Meaning you can freely refactor the querymodels without worrying about having to repopulate.
* Since events are agressively cached(1) this should be faster than fetching a query model from a document db.

Disadvantages: 
* Increases the risk of locking issues under high multi threaded load. (FIXED: Compz now requires the database to use read committed snapshot as the default isolation level and that does not have this problem.)
* Requires the clients to reference the events and the event store. (FIXED: Since you now expose only your Hypermedia API only the SOA contract types are exposed.)

Recommendations:
We recommend starting out with simple getting a readonly copy of the aggregate to populate data in the UI. If you start feeling the need to put UI responsibilities into the Aggregates due to this fall through to the next option.
If the UI representation of an aggregate is greatly different from the domain: Use eventstore generated query models.


If your query model's identity does not match the identity of an aggregate you may need to use a persistent query model. See: EmailToAccountMapper.
If your query model needs data from the history of many aggregates and this causes you to run into performance issues: Preaggregate the data into a persisted query model. See: AccountStatistics


1) Caching events is safe because events never change once created. Compz enforces that event types have no public mutable data. Running into problems requires willful breaking of this rule by applying attributes that allow mutable data. 
{
  "about/core-beliefs.html": {
    "href": "about/core-beliefs.html",
    "title": "| Compze",
    "keywords": "Core beliefs We believe that if you are considering using our tools you really should read all of this page to determine if it is likely to be a good fit for you and your organization. You may have trouble seeing the relevance at first, but it should all fit together as a whole in the end. We believe that people should always be a vital consideration:: We believe that our level of success of failure in collaborative endeavors hinges more on the humans, relationships and cultures involved than on any other factor. On how well we collaborate, communicate, motivate etc. We believe that this in turn hinges on our understanding of ourselves, on our understanding of human nature, on our understanding of the human mind and its properties, strengths and weaknesses. We believe that this understanding must include our drives, instincts, emotions and feelings. We believe that whenever we lose sight of this as a vital consideration when making choices we are likely to make choices with poor outcomes. This includes software design choices. We believe in the necessity of accepting complexity and letting go of certainty:: We believe we all instinctively prefer simplicity, certainty and absolutes. That this is a trait that was likely adaptive when we lived as hunter gatherers. We believe that this is no longer a primarily adaptive trait. We believe that succumbing to this trait cripples our ability to see the true complexity of the reality we have before us. Rather than clear cut wrong and right ways to do things we believe that we face great complexity and a great amount of possible choices in every situation. We believe that we must accept the weight of the uncertainty of this reality in order to make good choices. We believe in the superiority of motivated belief over dichotomies and absolutes:: We believe that succumbing to the desire to think and debate in terms of simple good versus bad dichotomies or absolutes such as \"best way\" is crippling. That it cripples not only our own understanding, but even more so our ability to collaborate in teams and larger communities. We believe that it is far better to say: \"We believe\" and then motivate that belief, than to state something as a fact without motivation. We believe that we must resist the temptation to talk about good versus bad and wrong versus right. We believe that there is no such thing as a \"best\" way to do anything, rather every option has a complex set of consequences in any specific set of circumstances which we never fully understand. We believe that we should abandon the false simplicity of right versus wrong dichotomies and absolutes such as \"best\". We believe that development should focus on shared mental models designed for humans:: We believe that developing software is first and foremost a process of collaboratively designing and communicating shared mental models. We believe that our focus must be on the quality and clarity of our mental models and the clarity and expressiveness of the code that we use to communicate these mental models to each other and our future selves. That the quality of a design is determined by how easily the totality of the mental models that it contains can be learned, communicated, and modified by human beings. We believe that the primary limiting factor is the mental burden imposed by the totality of our shared mental models:: We believe that in the majority of software development situations a lack of focus on the quality of the mental models is ultimately the primary factor limiting progress. That progress slows and ultimately stalls when the totality of our mental models fall into a state where the humans developing them can no longer effectively learn, understand, modify and communicate them. We believe that if we continually refactor our mental models to fit the human mind it is possible to maintain progress indefinitely without stalling and with limited slowdown even when facing immensely complicated software. We believe that this is the implicit principle underpinning approaches such as Domain Driven Design and principles such as SOLID."
  },
  "about/design-principles.html": {
    "href": "about/design-principles.html",
    "title": "| Compze",
    "keywords": "Design Principles Strive to minimize total mental burden Over minimizing initial learning effort Over minimizing local complexity Over minimizing lines of code Over minimizing component complexity Over maximizing performance Over maximizing scalability"
  },
  "about/faq.html": {
    "href": "about/faq.html",
    "title": "| Compze",
    "keywords": "Where's the rest of the website!? 2024-12-09: Sorry. More will come soon. Until then, find us and the code on github (Don't you just hate it when there's a message like that and no date?)"
  },
  "about/faq_old.html": {
    "href": "about/faq_old.html",
    "title": "| Compze",
    "keywords": "How stable is Compze? The event store and the document database have been proven in production for a number of years. The current code has only minor changes. The service bus is new, under development, and untried in production. Of course all the components have test suites. No component has known bugs. We normally prioritize bug fixes over all feature development. What type of infrastructure does Compze require? Compze uses a relational database for all storage. Currently, supported databases are Sql Server, PostgreSql and MySql. Other than a Sql instance composable components have no special requirements. Performance & scalability How well does Compze components perform? Very well and it will only get better. We have spent a ton of effort making sure that both performance and scalability is as high as possible without sacrificing reliability, productivity and maintainability. We have automated performance degradation tests that run continuously as we develop. We continuously look for ways to make things even faster and as we do we adjust the tests to require the new level of performance that we have achieved. What if we need extreme querying scalability? Given this requirement we assume that you are willing to sacrifice some level of consistency in query results. These are then possible options: Maintain query models in any storage with sufficient scalablility. Add a layer on top of your querying API that makes use of a distributed cache. What if we need extreme write side scalability? If only a small subset of your data requires this level of write scalability, consider implementing only that part using other tools. If most of your data requires that level of scalability we would not recommend using our tools. Reliability Why do you enforce transactions for all updates? Because it is our opinion that without transactions you have to sacrifice either reliability or simplicity/maintainability and we prioritize those over scalability and performance. Why do you enforce exactly once delivery for domain events? Because it is our opinion that without exactly once delivery you have to sacrifice either reliability or simplicity/maintainability and we prioritize those over scalability and performance. I've heard that exactly once delivery is impossible... All arguments to that effect that we have encountered reason by disallowing transactions and/or message deduplication. Only through imposing this artificial constraint does exactly once delivery become \"impossible\". Exactly once == at least once + deduplication + transactions."
  },
  "about/index.html": {
    "href": "about/index.html",
    "title": "| Compze",
    "keywords": "= About :page-permalink: /about/ :page-toc: :doctype: book :imagesdir: images :source-highlighter: highlightjs :highlightjs-theme: agate include::core-beliefs.adoc[] include::design-principles.adoc[] include::primary-architectural-choices.adoc[]"
  },
  "about/primary-architectural-choices.html": {
    "href": "about/primary-architectural-choices.html",
    "title": "| Compze",
    "keywords": "Primary architectural choices We require you to learn a \"new\" modelling paradigm, semantic events:: We do not believe that we would be able to build highly complicated software using a language that did not support a flexible modelling paradigm, such as object oriented programming, without great loss of productivity, simplicity and safety. We believe that such standardized modelling paradigms enable us to successfully manage far greater levels of complexity than we could without them. This is what we aim to achieve by ubiquitously leveraging the semantic event modeling paradigm throughout our tools. Using the existing interface support in C# we enable you to model a highly complicated domain in terms of which events can occur and how the meanings of these events relate to each other, the aggregate root to which they belong, and to other abstractions in the domain. The same modelling paradigm is utilized at all levels of design. From the smallest component or entity nested in an aggregate to designing and implementing the highest level integrations in an ecosystem of integrated systems. Our experience is that this new modelling paradigm, this new view of your domain and ecosystem of domains, is highly beneficial to managing and scaling complexity of the domains and integrations between them. We also find it highly beneficial in communicating with with domain experts. It has given us an expressive way of viewing a system in terms of what can happen, without getting bogged down in the details of how. On the technical side it enables us to dramatically cut down on manual code and manual configuration. It enables us to build complicated aggregates, read models, and message based integrations with simple, SOLID, expressive code. All with zero manual routing code or configuration to take into consideration. You can use the same powerful mental model to understand how everything will work at all levels instead of having to design and remember countless custom routes within aggregates and within the bus. Our experience is that this as a whole dramatically reduces the total mental burden of understanding a large system or ecosystem of systems. Our experience is that it allows us to scale to far greater complexity of a domain and exposed features without development slowing or virtually stalling due to the runaway mental burden of an implementation that does not leverage a powerful modelling paradigm. We enforce the use of transactions for all domain data updates:: We enforce the use of exactly once delivery for domain events and commands::"
  },
  "api/Compze.CompzeApi.html": {
    "href": "api/Compze.CompzeApi.html",
    "title": "Class CompzeApi | Compze",
    "keywords": "Class CompzeApi Namespace Compze Assembly Compze.Messaging.dll public class CompzeApi Inheritance object CompzeApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties DocumentDb public DocumentDbApi DocumentDb { get; } Property Value DocumentDbApi EventStore public EventStoreApi EventStore { get; } Property Value EventStoreApi"
  },
  "api/Compze.Contracts.Assert.AssertionException.html": {
    "href": "api/Compze.Contracts.Assert.AssertionException.html",
    "title": "Class Assert.AssertionException | Compze",
    "keywords": "Class Assert.AssertionException Namespace Compze.Contracts Assembly Compze.CQRS.dll public class Assert.AssertionException : Exception, ISerializable Inheritance object Exception Assert.AssertionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AssertionException(InspectionType, int) public AssertionException(InspectionType inspectionType, int index) Parameters inspectionType InspectionType index int"
  },
  "api/Compze.Contracts.Assert.BaseAssertion.html": {
    "href": "api/Compze.Contracts.Assert.BaseAssertion.html",
    "title": "Struct Assert.BaseAssertion | Compze",
    "keywords": "Struct Assert.BaseAssertion Namespace Compze.Contracts Assembly Compze.CQRS.dll public readonly struct Assert.BaseAssertion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) ObjectCE.ToStringNotNull(object) Methods Assert(bool) [ContractAnnotation(\"c1:false => halt\")] public Assert.ChainedAssertion Assert(bool c1) Parameters c1 bool Returns Assert.ChainedAssertion Assert(bool, bool) [ContractAnnotation(\"c1:false => halt; c2:false => halt\")] public Assert.ChainedAssertion Assert(bool c1, bool c2) Parameters c1 bool c2 bool Returns Assert.ChainedAssertion Assert(bool, bool, bool) [ContractAnnotation(\"c1:false => halt; c2:false => halt; c3:false => halt\")] public Assert.ChainedAssertion Assert(bool c1, bool c2, bool c3) Parameters c1 bool c2 bool c3 bool Returns Assert.ChainedAssertion Assert(bool, bool, bool, bool) [ContractAnnotation(\"c1:false => halt; c2:false => halt; c3:false => halt; c4:false => halt\")] public Assert.ChainedAssertion Assert(bool c1, bool c2, bool c3, bool c4) Parameters c1 bool c2 bool c3 bool c4 bool Returns Assert.ChainedAssertion NotNull(object?, object?) [ContractAnnotation(\"c1:null => halt; c2:null => halt\")] public Assert.ChainedAssertion NotNull(object? c1, object? c2) Parameters c1 object c2 object Returns Assert.ChainedAssertion NotNull(object?, object?, object?) [ContractAnnotation(\"c1:null => halt; c2:null => halt; c3:null => halt\")] public Assert.ChainedAssertion NotNull(object? c1, object? c2, object? c3) Parameters c1 object c2 object c3 object Returns Assert.ChainedAssertion NotNull(object?, object?, object?, object?) [ContractAnnotation(\"c1:null => halt; c2:null => halt; c3:null => halt; c4:null => halt\")] public Assert.ChainedAssertion NotNull(object? c1, object? c2, object? c3, object? c4) Parameters c1 object c2 object c3 object c4 object Returns Assert.ChainedAssertion NotNullOrDefault<TValue>(TValue?) [ContractAnnotation(\"obj:null => halt\")] public TValue NotNullOrDefault<TValue>(TValue? obj) Parameters obj TValue Returns TValue Type Parameters TValue NotNull<TValue>(TValue) [ContractAnnotation(\"obj:null => halt\")] public TValue NotNull<TValue>(TValue obj) Parameters obj TValue Returns TValue Type Parameters TValue"
  },
  "api/Compze.Contracts.Assert.ChainedAssertion.html": {
    "href": "api/Compze.Contracts.Assert.ChainedAssertion.html",
    "title": "Struct Assert.ChainedAssertion | Compze",
    "keywords": "Struct Assert.ChainedAssertion Namespace Compze.Contracts Assembly Compze.CQRS.dll public readonly struct Assert.ChainedAssertion Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) ObjectCE.ToStringNotNull(object) Methods And(bool) [ContractAnnotation(\"c1:false => halt\")] public Assert.ChainedAssertion And(bool c1) Parameters c1 bool Returns Assert.ChainedAssertion And(bool, bool) [ContractAnnotation(\"c1:false => halt; c2:false => halt\")] public Assert.ChainedAssertion And(bool c1, bool c2) Parameters c1 bool c2 bool Returns Assert.ChainedAssertion And(bool, bool, bool) [ContractAnnotation(\"c1:false => halt; c2:false => halt; c3:false => halt\")] public Assert.ChainedAssertion And(bool c1, bool c2, bool c3) Parameters c1 bool c2 bool c3 bool Returns Assert.ChainedAssertion And(bool, bool, bool, bool) [ContractAnnotation(\"c1:false => halt; c2:false => halt; c3:false => halt; c4:false => halt\")] public Assert.ChainedAssertion And(bool c1, bool c2, bool c3, bool c4) Parameters c1 bool c2 bool c3 bool c4 bool Returns Assert.ChainedAssertion NotNull(object) [ContractAnnotation(\"c1:null => halt\")] public Assert.ChainedAssertion NotNull(object c1) Parameters c1 object Returns Assert.ChainedAssertion NotNull(object, object) [ContractAnnotation(\"c1:null => halt; c2:null => halt\")] public Assert.ChainedAssertion NotNull(object c1, object c2) Parameters c1 object c2 object Returns Assert.ChainedAssertion NotNull(object, object, object) [ContractAnnotation(\"c1:null => halt; c2:null => halt; c3:null => halt\")] public Assert.ChainedAssertion NotNull(object c1, object c2, object c3) Parameters c1 object c2 object c3 object Returns Assert.ChainedAssertion NotNull(object, object, object, object) [ContractAnnotation(\"c1:null => halt; c2:null => halt; c3:null => halt; c4:null => halt\")] public Assert.ChainedAssertion NotNull(object c1, object c2, object c3, object c4) Parameters c1 object c2 object c3 object c4 object Returns Assert.ChainedAssertion"
  },
  "api/Compze.Contracts.Assert.html": {
    "href": "api/Compze.Contracts.Assert.html",
    "title": "Class Assert | Compze",
    "keywords": "Class Assert Namespace Compze.Contracts Assembly Compze.CQRS.dll public static class Assert Inheritance object Assert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Argument Assert conditions on arguments to current method. public static Assert.BaseAssertion Argument { get; } Property Value Assert.BaseAssertion Invariant Assert something that must always be true for \"this\". public static Assert.BaseAssertion Invariant { get; } Property Value Assert.BaseAssertion Result Assert conditions on the result of makeing a method call. public static Assert.BaseAssertion Result { get; } Property Value Assert.BaseAssertion State Assert conditions about current state of \"this\". Failures would mean that someone made a call that is illegal given state of \"this\". public static Assert.BaseAssertion State { get; } Property Value Assert.BaseAssertion"
  },
  "api/Compze.Contracts.AssertAndRun.html": {
    "href": "api/Compze.Contracts.AssertAndRun.html",
    "title": "Class AssertAndRun | Compze",
    "keywords": "Class AssertAndRun Namespace Compze.Contracts Assembly Compze.CQRS.dll public class AssertAndRun Inheritance object AssertAndRun Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AssertAndRun(Action) public AssertAndRun(Action assertion) Parameters assertion Action"
  },
  "api/Compze.Contracts.AssertionException.html": {
    "href": "api/Compze.Contracts.AssertionException.html",
    "title": "Class AssertionException | Compze",
    "keywords": "Class AssertionException Namespace Compze.Contracts Assembly Compze.CQRS.dll public class AssertionException : Exception, ISerializable Inheritance object Exception AssertionException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AssertionException(InspectionType, string) public AssertionException(InspectionType inspectionType, string failureMessage) Parameters inspectionType InspectionType failureMessage string"
  },
  "api/Compze.Contracts.Contract.html": {
    "href": "api/Compze.Contracts.Contract.html",
    "title": "Class Contract | Compze",
    "keywords": "Class Contract Namespace Compze.Contracts Assembly Compze.CQRS.dll Ensures that a class's contract is followed. public static class Contract Inheritance object Contract Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Argument(params Expression<Func<object>>[]) Start inspecting one or more arguments for contract compliance. Using an expression removes the need for an extra string to specify the name and ensures that the name is always correct in exceptions. The returned type : Compze.Contracts.Inspected<TValue> can be easily extended with extension methods to support generic inspections. public static Inspected<Guid> NotEmpty(this Inspected<Guid> me) { return me.Inspect(inspected => inspected != Guid.Empty, badValue => new GuidIsEmptyContractViolationException(badValue)); } public static IInspected<object> Argument(params Expression<Func<object>>[] arguments) Parameters arguments Expression<Func<object>>[] Returns IInspected<object> Argument(object?, string) public static IInspected<object> Argument(object? p1, string n1) Parameters p1 object n1 string Returns IInspected<object> Argument(object?, string, object?, string) public static IInspected<object> Argument(object? p1, string n1, object? p2, string n2) Parameters p1 object n1 string p2 object n2 string Returns IInspected<object> Argument(object?, string, object?, string, object?, string) public static IInspected<object> Argument(object? p1, string n1, object? p2, string n2, object? p3, string n3) Parameters p1 object n1 string p2 object n2 string p3 object n3 string Returns IInspected<object> ArgumentNotNull(object?, string) public static void ArgumentNotNull(object? p1, string n1) Parameters p1 object n1 string ArgumentNotNull(object?, string, object?, string) public static void ArgumentNotNull(object? p1, string n1, object? p2, string n2) Parameters p1 object n1 string p2 object n2 string ArgumentNotNull(object?, string, object?, string, object?, string) public static void ArgumentNotNull(object? p1, string n1, object? p2, string n2, object? p3, string n3) Parameters p1 object n1 string p2 object n2 string p3 object n3 string ArgumentNotNull(object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNull(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string ArgumentNotNull(object?, string, object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNull(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4, object? p5, string n5) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string p5 object n5 string ArgumentNotNull(object?, string, object?, string, object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNull(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4, object? p5, string n5, object? p6, string n6) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string p5 object n5 string p6 object n6 string ArgumentNotNull(object?, string, object?, string, object?, string, object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNull(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4, object? p5, string n5, object? p6, string n6, object? p7, string n7) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string p5 object n5 string p6 object n6 string p7 object n7 string ArgumentNotNullEmptyOrWhitespace(string?, string) public static void ArgumentNotNullEmptyOrWhitespace(string? p1, string n1) Parameters p1 string n1 string ArgumentNotNullEmptyOrWhitespace(string?, string, string?, string) public static void ArgumentNotNullEmptyOrWhitespace(string? p1, string n1, string? p2, string n2) Parameters p1 string n1 string p2 string n2 string ArgumentNotNullOrDefault(object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1) Parameters p1 object n1 string ArgumentNotNullOrDefault(object?, string, object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1, object? p2, string n2) Parameters p1 object n1 string p2 object n2 string ArgumentNotNullOrDefault(object?, string, object?, string, object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1, object? p2, string n2, object? p3, string n3) Parameters p1 object n1 string p2 object n2 string p3 object n3 string ArgumentNotNullOrDefault(object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string ArgumentNotNullOrDefault(object?, string, object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4, object? p5, string n5) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string p5 object n5 string ArgumentNotNullOrDefault(object?, string, object?, string, object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4, object? p5, string n5, object? p6, string n6) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string p5 object n5 string p6 object n6 string ArgumentNotNullOrDefault(object?, string, object?, string, object?, string, object?, string, object?, string, object?, string, object?, string) public static void ArgumentNotNullOrDefault(object? p1, string n1, object? p2, string n2, object? p3, string n3, object? p4, string n4, object? p5, string n5, object? p6, string n6, object? p7, string n7) Parameters p1 object n1 string p2 object n2 string p3 object n3 string p4 object n4 string p5 object n5 string p6 object n6 string p7 object n7 string ArgumentNotNullOrEmpty(string?, string) public static void ArgumentNotNullOrEmpty(string? p1, string n1) Parameters p1 string n1 string ArgumentNotNullOrEmpty(string?, string, string?, string) public static void ArgumentNotNullOrEmpty(string? p1, string n1, string? p2, string n2) Parameters p1 string n1 string p2 string n2 string Argument<TParameter>(params Expression<Func<TParameter>>[]) Start inspecting one or more arguments for contract compliance. Using an expression removes the need for an extra string to specify the name and ensures that the name is always correct in exceptions. public static IInspected<TParameter> Argument<TParameter>(params Expression<Func<TParameter>>[] arguments) Parameters arguments Expression<Func<TParameter>>[] Returns IInspected<TParameter> Type Parameters TParameter Argument<TParameter>(params (TParameter Value, string Name)[]) Start inspecting one or more arguments for contract compliance. public static IInspected<TParameter> Argument<TParameter>(params (TParameter Value, string Name)[] arguments) Parameters arguments (TParameter Value, string Name)[] Returns IInspected<TParameter> Type Parameters TParameter Argument<TInspected>(TInspected?, string) public static IInspected<TInspected> Argument<TInspected>(TInspected? p1, string n1) Parameters p1 TInspected n1 string Returns IInspected<TInspected> Type Parameters TInspected Argument<TInspected>(TInspected?, string, TInspected?, string) public static IInspected<TInspected> Argument<TInspected>(TInspected? p1, string n1, TInspected? p2, string n2) Parameters p1 TInspected n1 string p2 TInspected n2 string Returns IInspected<TInspected> Type Parameters TInspected Argument<TInspected>(TInspected?, string, TInspected?, string, TInspected?, string) public static IInspected<TInspected> Argument<TInspected>(TInspected? p1, string n1, TInspected? p2, string n2, TInspected? p3, string n3) Parameters p1 TInspected n1 string p2 TInspected n2 string p3 TInspected n3 string Returns IInspected<TInspected> Type Parameters TInspected Invariant(params Expression<Func<object>>[]) Start inspecting one or more members for contract compliance. An invariant is something that must always be true for an object. Like email and password never being missing for an account. Using an expression removes the need for an extra string to specify the name and ensures that the name is always correct in exceptions. The returned type : Compze.Contracts.Inspected<TValue> can be easily extended with extension methods to support generic inspections. public static Inspected<Guid> NotEmpty(this Inspected<Guid> me) { return me.Inspect(inspected => inspected != Guid.Empty, badValue => new GuidIsEmptyContractViolationException(badValue)); } public static IInspected<object> Invariant(params Expression<Func<object>>[] arguments) Parameters arguments Expression<Func<object>>[] Returns IInspected<object> Invariant(object?, string) public static IInspected<object> Invariant(object? p1, string n1) Parameters p1 object n1 string Returns IInspected<object> Invariant(object?, string, object?, string) public static IInspected<object> Invariant(object? p1, string n1, object? p2, string n2) Parameters p1 object n1 string p2 object n2 string Returns IInspected<object> Invariant(object?, string, object?, string, object?, string) public static IInspected<object> Invariant(object? p1, string n1, object? p2, string n2, object? p3, string n3) Parameters p1 object n1 string p2 object n2 string p3 object n3 string Returns IInspected<object> Invariant<TInspected>(TInspected?, string) public static IInspected<TInspected> Invariant<TInspected>(TInspected? p1, string n1) Parameters p1 TInspected n1 string Returns IInspected<TInspected> Type Parameters TInspected Invariant<TInspected>(TInspected?, string, TInspected?, string) public static IInspected<TInspected> Invariant<TInspected>(TInspected? p1, string n1, TInspected? p2, string n2) Parameters p1 TInspected n1 string p2 TInspected n2 string Returns IInspected<TInspected> Type Parameters TInspected Invariant<TInspected>(TInspected?, string, TInspected?, string, TInspected?, string) public static IInspected<TInspected> Invariant<TInspected>(TInspected? p1, string n1, TInspected? p2, string n2, TInspected? p3, string n3) Parameters p1 TInspected n1 string p2 TInspected n2 string p3 TInspected n3 string Returns IInspected<TInspected> Type Parameters TInspected Return<TReturnValue>(TReturnValue, Action<IInspected<TReturnValue>>) Inspect a return value by passing in a Lambda that performs the inspections the same way you would for an argument. public static TReturnValue Return<TReturnValue>(TReturnValue returnValue, Action<IInspected<TReturnValue>> assert) Parameters returnValue TReturnValue assert Action<IInspected<TReturnValue>> Returns TReturnValue Type Parameters TReturnValue"
  },
  "api/Compze.Contracts.ContractAssertThatException.html": {
    "href": "api/Compze.Contracts.ContractAssertThatException.html",
    "title": "Class ContractAssertThatException | Compze",
    "keywords": "Class ContractAssertThatException Namespace Compze.Contracts Assembly Compze.CQRS.dll public class ContractAssertThatException : Exception, ISerializable Inheritance object Exception ContractAssertThatException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors ContractAssertThatException(int) public ContractAssertThatException(int condition) Parameters condition int"
  },
  "api/Compze.Contracts.ContractViolationException.html": {
    "href": "api/Compze.Contracts.ContractViolationException.html",
    "title": "Class ContractViolationException | Compze",
    "keywords": "Class ContractViolationException Namespace Compze.Contracts Assembly Compze.CQRS.dll Exceptions raise by the inspectors should inherit this exception type. public class ContractViolationException : Exception, ISerializable Inheritance object Exception ContractViolationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors ContractViolationException(IInspectedValue) Standard constructor that will construct a queuedMessageInformation based on the name and value of the failing member. public ContractViolationException(IInspectedValue badValue) Parameters badValue IInspectedValue Properties BadValue The value that failed inspection. public IInspectedValue BadValue { get; } Property Value IInspectedValue Message Tells which field/property/argument failed inspection and what value it had. public override string Message { get; } Property Value string"
  },
  "api/Compze.Contracts.IInspected-1.html": {
    "href": "api/Compze.Contracts.IInspected-1.html",
    "title": "Interface IInspected<TValue> | Compze",
    "keywords": "Interface IInspected<TValue> Namespace Compze.Contracts Assembly Compze.CQRS.dll public interface IInspected<TValue> Type Parameters TValue Extension Methods ObjectInspector.NotNullOrDefault<TValue>(IInspected<TValue>) Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods Inspect(Func<TValue, bool>, Func<IInspectedValue<TValue>, Exception>?) Performs the supplied inspection against each Compze.Contracts.InspectedValue in the instance. IInspected<TValue> Inspect(Func<TValue, bool> isValueValid, Func<IInspectedValue<TValue>, Exception>? buildException = null) Parameters isValueValid Func<TValue, bool> Expression that should return true if the Compze.Contracts.InspectedValue<TValue> is valid. buildException Func<IInspectedValue<TValue>, Exception> Expression that should return an appropriate exception if the inspection fails. If not supplied a default ContractViolationException will be created. Returns IInspected<TValue> The same instance (this) in order to enable fluent chaining style code. Exceptions Exception The exception created by the buildException argument will be thrown if an Compze.Contracts.InspectedValue<TValue> fails inspection."
  },
  "api/Compze.Contracts.IInspectedValue-1.html": {
    "href": "api/Compze.Contracts.IInspectedValue-1.html",
    "title": "Interface IInspectedValue<TValue> | Compze",
    "keywords": "Interface IInspectedValue<TValue> Namespace Compze.Contracts Assembly Compze.CQRS.dll public interface IInspectedValue<out TValue> : IInspectedValue Type Parameters TValue Inherited Members IInspectedValue.Type IInspectedValue.Name Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Properties Value TValue Value { get; } Property Value TValue"
  },
  "api/Compze.Contracts.IInspectedValue.html": {
    "href": "api/Compze.Contracts.IInspectedValue.html",
    "title": "Interface IInspectedValue | Compze",
    "keywords": "Interface IInspectedValue Namespace Compze.Contracts Assembly Compze.CQRS.dll public interface IInspectedValue Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Properties Name The name of an argument, a field, or a property. \"ReturnValue\" for return value inspections. string Name { get; } Property Value string Type The InspectionType of the inspection: Argument, Invariant or ReturnValue InspectionType Type { get; } Property Value InspectionType"
  },
  "api/Compze.Contracts.InspectionType.html": {
    "href": "api/Compze.Contracts.InspectionType.html",
    "title": "Enum InspectionType | Compze",
    "keywords": "Enum InspectionType Namespace Compze.Contracts Assembly Compze.CQRS.dll Argument, Invariant or ReturnValue public enum InspectionType Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) ObjectCE.ToStringNotNull(object) Fields Argument = 0 The inspected value is an argument to a method Assertion = 3 Invariant = 1 The inspected value is an invariant of the class Result = 5 The inspected value is the return value of something the calling code called. ReturnValue = 2 The inspected value is a return value State = 4 The inspected value is part of the current state of the calling code."
  },
  "api/Compze.Contracts.InvalidAccessorLambdaException.html": {
    "href": "api/Compze.Contracts.InvalidAccessorLambdaException.html",
    "title": "Class InvalidAccessorLambdaException | Compze",
    "keywords": "Class InvalidAccessorLambdaException Namespace Compze.Contracts Assembly Compze.CQRS.dll Exception thrown when an unsupported lambda expression is used. public class InvalidAccessorLambdaException : Exception, ISerializable Inheritance object Exception InvalidAccessorLambdaException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors InvalidAccessorLambdaException() Standard constructor public InvalidAccessorLambdaException()"
  },
  "api/Compze.Contracts.ObjectInspector.html": {
    "href": "api/Compze.Contracts.ObjectInspector.html",
    "title": "Class ObjectInspector | Compze",
    "keywords": "Class ObjectInspector Namespace Compze.Contracts Assembly Compze.CQRS.dll Performs inspections on objects public static class ObjectInspector Inheritance object ObjectInspector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NotNullOrDefault<TValue>(IInspected<TValue>) Throws Compze.Contracts.ObjectIsNullContractViolationException if any inspected value is null Throws Compze.Contracts.ObjectIsDefaultContractViolationException if any inspected value is default(TValue). Such as 0 for integer, Guid.Empty for Guid, new SomeStruct(). public static IInspected<TValue> NotNullOrDefault<TValue>(this IInspected<TValue> me) Parameters me IInspected<TValue> Returns IInspected<TValue> Type Parameters TValue NotNull<TValue>(IInspected<TValue>) Throws Compze.Contracts.ObjectIsNullContractViolationException if any inspected value is null Consider using NotNullOrDefault<TValue>(IInspected<TValue>) instead as it works for value types as well and is only marginally slower. public static IInspected<TValue> NotNull<TValue>(this IInspected<TValue> me) where TValue : class Parameters me IInspected<TValue> Returns IInspected<TValue> Type Parameters TValue"
  },
  "api/Compze.Contracts.StringInspector.html": {
    "href": "api/Compze.Contracts.StringInspector.html",
    "title": "Class StringInspector | Compze",
    "keywords": "Class StringInspector Namespace Compze.Contracts Assembly Compze.CQRS.dll Performs inspections on string instances public static class StringInspector Inheritance object StringInspector Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NotNullEmptyOrWhiteSpace(IInspected<string>) Throws Compze.Contracts.ObjectIsNullContractViolationException if any expected value is null. Throws Compze.Contracts.StringIsEmptyContractViolationException if any inspected value is an empty string. Throws Compze.Contracts.StringIsWhitespaceContractViolationException if any inspected value is a string containing only whitespace. public static IInspected<string> NotNullEmptyOrWhiteSpace(this IInspected<string> me) Parameters me IInspected<string> Returns IInspected<string>"
  },
  "api/Compze.Contracts.html": {
    "href": "api/Compze.Contracts.html",
    "title": "Namespace Compze.Contracts | Compze",
    "keywords": "Namespace Compze.Contracts Classes Assert Assert.AssertionException AssertAndRun AssertionException Contract Ensures that a class's contract is followed. ContractAssertThatException ContractViolationException Exceptions raise by the inspectors should inherit this exception type. InvalidAccessorLambdaException Exception thrown when an unsupported lambda expression is used. ObjectInspector Performs inspections on objects StringInspector Performs inspections on string instances Structs Assert.BaseAssertion Assert.ChainedAssertion Interfaces IInspectedValue IInspectedValue<TValue> IInspected<TValue> Enums InspectionType Argument, Invariant or ReturnValue"
  },
  "api/Compze.DDD.Entity-1.html": {
    "href": "api/Compze.DDD.Entity-1.html",
    "title": "Class Entity<TEntity> | Compze",
    "keywords": "Class Entity<TEntity> Namespace Compze.DDD Assembly Compze.dll Simple base class for Entities that ensures a correct identity based Equals(object), GetHashCode(), and IEquatable<T>. This class uses Guids as Ids because it is the only built-in .Net type the developers are aware of which can, in practice, guarantee for a system that an PersistentEntity will have a globally unique immutable identity from the moment of instantiation and through any number of persisting-loading cycles. That in turn is an absolute requirement for a correct implementation of Equals(object), GetHashCode(), and IEquatable<T>. public class Entity<TEntity> : Entity<TEntity, Guid>, IPersistentEntity<Guid>, IHasPersistentIdentity<Guid>, IEquatable<TEntity> where TEntity : Entity<TEntity> Type Parameters TEntity Inheritance object Entity<TEntity, Guid> Entity<TEntity> Implements IPersistentEntity<Guid> IHasPersistentIdentity<Guid> IEquatable<TEntity> Derived VersionedEntity<T> Inherited Members Entity<TEntity, Guid>.Id Entity<TEntity, Guid>.SetIdBeVerySureYouKnowWhatYouAreDoing(Guid) Entity<TEntity, Guid>.GetIdBypassContractValidation() Entity<TEntity, Guid>.Equals(TEntity) Entity<TEntity, Guid>.Equals(object) Entity<TEntity, Guid>.GetHashCode() Entity<TEntity, Guid>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Entity() Creates a new instance with an automatically generated Id protected Entity() Entity(Guid) Creates an instance using the supplied id as the Id. protected Entity(Guid id) Parameters id Guid Methods Equals(object?) Implements equals using persistent reference semantics. If two instances have the same Id, Equals will return true. public override bool Equals(object? obj) Parameters obj object Returns bool Equals(TEntity?) Indicates whether the current object is equal to another object of the same type. public bool Equals(TEntity? other) Parameters other TEntity An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. Operators operator ==(Entity<TEntity>?, Entity<TEntity>?) True if both instances have the same ID public static bool operator ==(Entity<TEntity>? lhs, Entity<TEntity>? rhs) Parameters lhs Entity<TEntity> rhs Entity<TEntity> Returns bool operator !=(Entity<TEntity>, Entity<TEntity>) True if both instances do not have the same ID public static bool operator !=(Entity<TEntity> lhs, Entity<TEntity> rhs) Parameters lhs Entity<TEntity> rhs Entity<TEntity> Returns bool"
  },
  "api/Compze.DDD.Entity-2.html": {
    "href": "api/Compze.DDD.Entity-2.html",
    "title": "Class Entity<TEntity, TKey> | Compze",
    "keywords": "Class Entity<TEntity, TKey> Namespace Compze.DDD Assembly Compze.dll Base class for any class that considers equality to be that the Ids for two instances are the same. It provides implementations of Equals(object), GetHashCode(), and IEquatable<T>. Equals is implemented as: return !ReferenceEquals(null, other) && other.Id.Equals(Id) the operators simply uses Equals. public class Entity<TEntity, TKey> : IEquatable<TEntity>, IHasPersistentIdentity<TKey> where TEntity : Entity<TEntity, TKey> where TKey : struct Type Parameters TEntity TKey Inheritance object Entity<TEntity, TKey> Implements IEquatable<TEntity> IHasPersistentIdentity<TKey> Derived Entity<TEntity> Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?) Constructors Entity(TKey) Construct an instance with as the Id. protected Entity(TKey id) Parameters id TKey Properties Id The unique identifier for this instance. public virtual TKey Id { get; } Property Value TKey Methods Equals(object?) Implements equals using persistent reference semantics. If two instances have the same Id, Equals will return true. public override bool Equals(object? obj) Parameters obj object Returns bool Equals(TEntity?) Implements equals using persistent reference semantics. If two instances have the same Id, Equals will return true. public virtual bool Equals(TEntity? other) Parameters other TEntity Returns bool GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. GetIdBypassContractValidation() Gets the id of the instance bypassing contract validation. Should probably never be used except by infrastructure code. [Obsolete(\"Should probably never be used except by infrastructure code.\")] protected TKey GetIdBypassContractValidation() Returns TKey SetIdBeVerySureYouKnowWhatYouAreDoing(TKey) Sets the id of the instance. Should probably never be used except by infrastructure code. [Obsolete(\"Should probably never be used except by infrastructure code.\")] protected void SetIdBeVerySureYouKnowWhatYouAreDoing(TKey id) Parameters id TKey ToString() Returns a string similar to: MyType:MyId public override string ToString() Returns string Operators operator ==(Entity<TEntity, TKey>?, Entity<TEntity, TKey>?) True if both instances have the same ID public static bool operator ==(Entity<TEntity, TKey>? lhs, Entity<TEntity, TKey>? rhs) Parameters lhs Entity<TEntity, TKey> rhs Entity<TEntity, TKey> Returns bool operator !=(Entity<TEntity, TKey>, Entity<TEntity, TKey>) True if both instances do not have the same ID public static bool operator !=(Entity<TEntity, TKey> lhs, Entity<TEntity, TKey> rhs) Parameters lhs Entity<TEntity, TKey> rhs Entity<TEntity, TKey> Returns bool"
  },
  "api/Compze.DDD.IHasPersistentIdentity-1.html": {
    "href": "api/Compze.DDD.IHasPersistentIdentity-1.html",
    "title": "Interface IHasPersistentIdentity<TKeyType> | Compze",
    "keywords": "Interface IHasPersistentIdentity<TKeyType> Namespace Compze.DDD Assembly Compze.dll Anything that can be uniquely identified using its id over any number of persist/load cycles. public interface IHasPersistentIdentity<out TKeyType> Type Parameters TKeyType Extension Methods NullableCE.NotNull<T>(T?) Properties Id The unique identifier for this instance. TKeyType Id { get; } Property Value TKeyType"
  },
  "api/Compze.DDD.IPersistentEntity-1.html": {
    "href": "api/Compze.DDD.IPersistentEntity-1.html",
    "title": "Interface IPersistentEntity<TKeyType> | Compze",
    "keywords": "Interface IPersistentEntity<TKeyType> Namespace Compze.DDD Assembly Compze.dll Should be implemented by persistent* classes that represents entities in the Domain Driven Design sense of the word. The vital distinction about Persistent Entities is that equality is defined by Identity, and as such they must guarantee that they have a non-default identity at all times. Classes that have a lifecycle longer than an application run. Often persisted in databases. public interface IPersistentEntity<out TKeyType> : IHasPersistentIdentity<TKeyType> Type Parameters TKeyType Inherited Members IHasPersistentIdentity<TKeyType>.Id Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.DDD.ValueObject-1.html": {
    "href": "api/Compze.DDD.ValueObject-1.html",
    "title": "Class ValueObject<T> | Compze",
    "keywords": "Class ValueObject<T> Namespace Compze.DDD Assembly Compze.CQRS.dll Base class for value objects that implements value equality based on instance fields. Properties are ignored when comparing. Only fields are used. public abstract class ValueObject<T> : IEquatable<T> where T : ValueObject<T> Type Parameters T Inheritance object ValueObject<T> Implements IEquatable<T> Derived EndpointId EndPointAddress MessageTypes.Remotable.ExactlyOnce.Command AggregateEvent Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods Equals(object?) public override bool Equals(object? obj) Parameters obj object Returns bool Equals(T?) public virtual bool Equals(T? other) Parameters other T Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string A JSON serialized version of the instance. Operators operator ==(ValueObject<T>?, ValueObject<T>?) Compares the objects for equality using value semantics public static bool operator ==(ValueObject<T>? lhs, ValueObject<T>? rhs) Parameters lhs ValueObject<T> rhs ValueObject<T> Returns bool operator !=(ValueObject<T>, ValueObject<T>) Compares the objects for inequality using value semantics public static bool operator !=(ValueObject<T> lhs, ValueObject<T> rhs) Parameters lhs ValueObject<T> rhs ValueObject<T> Returns bool"
  },
  "api/Compze.DDD.VersionedEntity-1.html": {
    "href": "api/Compze.DDD.VersionedEntity-1.html",
    "title": "Class VersionedEntity<T> | Compze",
    "keywords": "Class VersionedEntity<T> Namespace Compze.DDD Assembly Compze.dll Base class for persistent entities with versioning information public class VersionedEntity<T> : Entity<T>, IPersistentEntity<Guid>, IHasPersistentIdentity<Guid>, IEquatable<T> where T : VersionedEntity<T> Type Parameters T Inheritance object Entity<T, Guid> Entity<T> VersionedEntity<T> Implements IPersistentEntity<Guid> IHasPersistentIdentity<Guid> IEquatable<T> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> Inherited Members Entity<T>.Equals(T) Entity<T>.Equals(object) Entity<T>.GetHashCode() Entity<T, Guid>.Id Entity<T, Guid>.SetIdBeVerySureYouKnowWhatYouAreDoing(Guid) Entity<T, Guid>.GetIdBypassContractValidation() Entity<T, Guid>.Equals(T) Entity<T, Guid>.Equals(object) Entity<T, Guid>.GetHashCode() Entity<T, Guid>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors VersionedEntity(Guid) Creates an instance using the supplied id as the Id. protected VersionedEntity(Guid id) Parameters id Guid Properties Version Contains the current version of the entity public virtual int Version { get; protected set; } Property Value int"
  },
  "api/Compze.DDD.html": {
    "href": "api/Compze.DDD.html",
    "title": "Namespace Compze.DDD | Compze",
    "keywords": "Namespace Compze.DDD Classes Entity<TEntity> Simple base class for Entities that ensures a correct identity based Equals(object), GetHashCode(), and IEquatable<T>. This class uses Guids as Ids because it is the only built-in .Net type the developers are aware of which can, in practice, guarantee for a system that an PersistentEntity will have a globally unique immutable identity from the moment of instantiation and through any number of persisting-loading cycles. That in turn is an absolute requirement for a correct implementation of Equals(object), GetHashCode(), and IEquatable<T>. Entity<TEntity, TKey> Base class for any class that considers equality to be that the Ids for two instances are the same. It provides implementations of Equals(object), GetHashCode(), and IEquatable<T>. Equals is implemented as: return !ReferenceEquals(null, other) && other.Id.Equals(Id) the operators simply uses Equals. VersionedEntity<T> Base class for persistent entities with versioning information Interfaces IHasPersistentIdentity<TKeyType> Anything that can be uniquely identified using its id over any number of persist/load cycles. IPersistentEntity<TKeyType> Should be implemented by persistent* classes that represents entities in the Domain Driven Design sense of the word. The vital distinction about Persistent Entities is that equality is defined by Identity, and as such they must guarantee that they have a non-default identity at all times. Classes that have a lifecycle longer than an application run. Often persisted in databases."
  },
  "api/Compze.DependencyInjection.ComponentRegistration-1.html": {
    "href": "api/Compze.DependencyInjection.ComponentRegistration-1.html",
    "title": "Class ComponentRegistration<TService> | Compze",
    "keywords": "Class ComponentRegistration<TService> Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public class ComponentRegistration<TService> : ComponentRegistration where TService : class Type Parameters TService Inheritance object ComponentRegistration ComponentRegistration<TService> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.DependencyInjection.ComponentRegistration.html": {
    "href": "api/Compze.DependencyInjection.ComponentRegistration.html",
    "title": "Class ComponentRegistration | Compze",
    "keywords": "Class ComponentRegistration Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public abstract class ComponentRegistration Inheritance object ComponentRegistration Derived ComponentRegistration<TService> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.DependencyInjection.ComponentRegistrationExtensions.html": {
    "href": "api/Compze.DependencyInjection.ComponentRegistrationExtensions.html",
    "title": "Class ComponentRegistrationExtensions | Compze",
    "keywords": "Class ComponentRegistrationExtensions Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public static class ComponentRegistrationExtensions Inheritance object ComponentRegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class where TDependency9 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TDependency9 CreatedBy<TService, TImplementation>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TImplementation> factoryMethod) where TService : class where TImplementation : TService Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation CreatedBy<TService, TImplementation, TDependency1>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 CreatedBy<TService, TImplementation, TDependency1, TDependency2>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TDependency4, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TDependency4, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 TDependency4 CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TImplementation>) public static ComponentRegistration<TService> CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(this ComponentRegistrationWithoutInstantiationSpec<TService> @this, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TImplementation> factoryMethod) where TService : class where TImplementation : TService where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class Parameters this ComponentRegistrationWithoutInstantiationSpec<TService> factoryMethod Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TImplementation> Returns ComponentRegistration<TService> Type Parameters TService TImplementation TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7"
  },
  "api/Compze.DependencyInjection.ComponentRegistrationWithoutInstantiationSpec-1.html": {
    "href": "api/Compze.DependencyInjection.ComponentRegistrationWithoutInstantiationSpec-1.html",
    "title": "Class ComponentRegistrationWithoutInstantiationSpec<TService> | Compze",
    "keywords": "Class ComponentRegistrationWithoutInstantiationSpec<TService> Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public class ComponentRegistrationWithoutInstantiationSpec<TService> where TService : class Type Parameters TService Inheritance object ComponentRegistrationWithoutInstantiationSpec<TService> Derived SingletonRegistrationWithoutInstantiationSpec<TService> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TImplementation>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties ServiceTypes protected IReadOnlyList<Type> ServiceTypes { get; } Property Value IReadOnlyList<Type> Methods AssertImplementsAllServices(Type) protected void AssertImplementsAllServices(Type implementationType) Parameters implementationType Type"
  },
  "api/Compze.DependencyInjection.DIContainer.html": {
    "href": "api/Compze.DependencyInjection.DIContainer.html",
    "title": "Enum DIContainer | Compze",
    "keywords": "Enum DIContainer Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public enum DIContainer Extension Methods AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Fields Microsoft = 1 SimpleInjector = 0"
  },
  "api/Compze.DependencyInjection.DependencyInjectionContainer.html": {
    "href": "api/Compze.DependencyInjection.DependencyInjectionContainer.html",
    "title": "Class DependencyInjectionContainer | Compze",
    "keywords": "Class DependencyInjectionContainer Namespace Compze.DependencyInjection Assembly Compze.CQRS.ExternalDependencies.dll public static class DependencyInjectionContainer Inheritance object DependencyInjectionContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(IRunMode) public static IDependencyInjectionContainer Create(IRunMode runMode) Parameters runMode IRunMode Returns IDependencyInjectionContainer CreateServiceLocatorForTesting(Action<IEndpointBuilder>) public static IServiceLocator CreateServiceLocatorForTesting(Action<IEndpointBuilder> setup) Parameters setup Action<IEndpointBuilder> Returns IServiceLocator"
  },
  "api/Compze.DependencyInjection.IDependencyInjectionContainer.html": {
    "href": "api/Compze.DependencyInjection.IDependencyInjectionContainer.html",
    "title": "Interface IDependencyInjectionContainer | Compze",
    "keywords": "Interface IDependencyInjectionContainer Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public interface IDependencyInjectionContainer : IDisposable, IAsyncDisposable Inherited Members IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties RunMode IRunMode RunMode { get; } Property Value IRunMode ServiceLocator IServiceLocator ServiceLocator { get; } Property Value IServiceLocator Methods Register(params ComponentRegistration[]) void Register(params ComponentRegistration[] registrations) Parameters registrations ComponentRegistration[] RegisterToHandleServiceResolutionFor(IServiceCollection) void RegisterToHandleServiceResolutionFor(IServiceCollection services) Parameters services IServiceCollection RegisteredComponents() IEnumerable<ComponentRegistration> RegisteredComponents() Returns IEnumerable<ComponentRegistration>"
  },
  "api/Compze.DependencyInjection.IRunMode.html": {
    "href": "api/Compze.DependencyInjection.IRunMode.html",
    "title": "Interface IRunMode | Compze",
    "keywords": "Interface IRunMode Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public interface IRunMode Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties IsTesting bool IsTesting { get; } Property Value bool"
  },
  "api/Compze.DependencyInjection.IServiceLocator.html": {
    "href": "api/Compze.DependencyInjection.IServiceLocator.html",
    "title": "Interface IServiceLocator | Compze",
    "keywords": "Interface IServiceLocator Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public interface IServiceLocator : IDisposable, IAsyncDisposable Inherited Members IDisposable.Dispose() IAsyncDisposable.DisposeAsync() Extension Methods ServiceLocatorTransactionRunner.ExecuteInIsolatedScope(IServiceLocator, Action) ServiceLocatorTransactionRunner.ExecuteInIsolatedScopeAsync(IServiceLocator, Func<Task>) ServiceLocatorTransactionRunner.ExecuteInIsolatedScopeAsync<TResult>(IServiceLocator, Func<Task<TResult>>) ServiceLocatorTransactionRunner.ExecuteInIsolatedScope<TResult>(IServiceLocator, Func<TResult>) ServiceLocatorTransactionRunner.ExecuteTransactionInIsolatedScope(IServiceLocator, Action) ServiceLocatorTransactionRunner.ExecuteTransactionInIsolatedScope<TResult>(IServiceLocator, Func<TResult>) NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods BeginScope() IDisposable BeginScope() Returns IDisposable ResolveAll<TComponent>() TComponent[] ResolveAll<TComponent>() where TComponent : class Returns TComponent[] Type Parameters TComponent Resolve<TComponent>() TComponent Resolve<TComponent>() where TComponent : class Returns TComponent Type Parameters TComponent"
  },
  "api/Compze.DependencyInjection.Microsoft.MicrosoftDependencyInjectionContainer.html": {
    "href": "api/Compze.DependencyInjection.Microsoft.MicrosoftDependencyInjectionContainer.html",
    "title": "Class MicrosoftDependencyInjectionContainer | Compze",
    "keywords": "Class MicrosoftDependencyInjectionContainer Namespace Compze.DependencyInjection.Microsoft Assembly Compze.DependencyInjection.Microsoft.dll public sealed class MicrosoftDependencyInjectionContainer : IDependencyInjectionContainer, IServiceLocator, IDisposable, IAsyncDisposable Inheritance object MicrosoftDependencyInjectionContainer Implements IDependencyInjectionContainer IServiceLocator IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties RunMode public IRunMode RunMode { get; } Property Value IRunMode ServiceLocator public IServiceLocator ServiceLocator { get; } Property Value IServiceLocator Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. Register(params ComponentRegistration[]) public void Register(params ComponentRegistration[] registrations) Parameters registrations ComponentRegistration[] RegisteredComponents() public IEnumerable<ComponentRegistration> RegisteredComponents() Returns IEnumerable<ComponentRegistration> ResolveAll<TComponent>() public TComponent[] ResolveAll<TComponent>() where TComponent : class Returns TComponent[] Type Parameters TComponent Resolve<TComponent>() public TComponent Resolve<TComponent>() where TComponent : class Returns TComponent Type Parameters TComponent"
  },
  "api/Compze.DependencyInjection.Microsoft.html": {
    "href": "api/Compze.DependencyInjection.Microsoft.html",
    "title": "Namespace Compze.DependencyInjection.Microsoft | Compze",
    "keywords": "Namespace Compze.DependencyInjection.Microsoft Classes MicrosoftDependencyInjectionContainer"
  },
  "api/Compze.DependencyInjection.PersistenceLayer.html": {
    "href": "api/Compze.DependencyInjection.PersistenceLayer.html",
    "title": "Enum PersistenceLayer | Compze",
    "keywords": "Enum PersistenceLayer Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public enum PersistenceLayer Extension Methods AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Fields Memory = 1 MicrosoftSqlServer = 0 MySql = 2 PostgreSql = 3"
  },
  "api/Compze.DependencyInjection.Scoped.html": {
    "href": "api/Compze.DependencyInjection.Scoped.html",
    "title": "Class Scoped | Compze",
    "keywords": "Class Scoped Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public static class Scoped Inheritance object Scoped Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods For<TService>() public static ComponentRegistrationWithoutInstantiationSpec<TService> For<TService>() where TService : class Returns ComponentRegistrationWithoutInstantiationSpec<TService> Type Parameters TService For<TService1, TService2>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 For<TService1, TService2, TService3>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 For<TService1, TService2, TService3, TService4>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 For<TService1, TService2, TService3, TService4, TService5>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 For<TService1, TService2, TService3, TService4, TService5, TService6>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 For<TService1, TService2, TService3, TService4, TService5, TService6, TService7>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6, TService7>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 TService7 For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 TService7 TService8 For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8, TService9>() public static ComponentRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8, TService9>() where TService1 : class Returns ComponentRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 TService7 TService8 TService9"
  },
  "api/Compze.DependencyInjection.ServiceLocatorTransactionRunner.html": {
    "href": "api/Compze.DependencyInjection.ServiceLocatorTransactionRunner.html",
    "title": "Class ServiceLocatorTransactionRunner | Compze",
    "keywords": "Class ServiceLocatorTransactionRunner Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public static class ServiceLocatorTransactionRunner Inheritance object ServiceLocatorTransactionRunner Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteInIsolatedScope(IServiceLocator, Action) public static void ExecuteInIsolatedScope(this IServiceLocator me, Action action) Parameters me IServiceLocator action Action ExecuteInIsolatedScopeAsync(IServiceLocator, Func<Task>) public static Task ExecuteInIsolatedScopeAsync(this IServiceLocator me, Func<Task> action) Parameters me IServiceLocator action Func<Task> Returns Task ExecuteInIsolatedScopeAsync<TResult>(IServiceLocator, Func<Task<TResult>>) public static Task<TResult> ExecuteInIsolatedScopeAsync<TResult>(this IServiceLocator me, Func<Task<TResult>> function) Parameters me IServiceLocator function Func<Task<TResult>> Returns Task<TResult> Type Parameters TResult ExecuteInIsolatedScope<TResult>(IServiceLocator, Func<TResult>) public static TResult ExecuteInIsolatedScope<TResult>(this IServiceLocator me, Func<TResult> function) Parameters me IServiceLocator function Func<TResult> Returns TResult Type Parameters TResult ExecuteTransactionInIsolatedScope(IServiceLocator, Action) public static void ExecuteTransactionInIsolatedScope(this IServiceLocator me, Action action) Parameters me IServiceLocator action Action ExecuteTransactionInIsolatedScope<TResult>(IServiceLocator, Func<TResult>) public static TResult ExecuteTransactionInIsolatedScope<TResult>(this IServiceLocator me, Func<TResult> function) Parameters me IServiceLocator function Func<TResult> Returns TResult Type Parameters TResult"
  },
  "api/Compze.DependencyInjection.SimpleInjector.SimpleInjectorDependencyInjectionContainer.html": {
    "href": "api/Compze.DependencyInjection.SimpleInjector.SimpleInjectorDependencyInjectionContainer.html",
    "title": "Class SimpleInjectorDependencyInjectionContainer | Compze",
    "keywords": "Class SimpleInjectorDependencyInjectionContainer Namespace Compze.DependencyInjection.SimpleInjector Assembly Compze.DependencyInjection.SimpleInjector.dll public sealed class SimpleInjectorDependencyInjectionContainer : IDependencyInjectionContainer, IServiceLocator, IDisposable, IAsyncDisposable Inheritance object SimpleInjectorDependencyInjectionContainer Implements IDependencyInjectionContainer IServiceLocator IDisposable IAsyncDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties RunMode public IRunMode RunMode { get; } Property Value IRunMode Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. Register(params ComponentRegistration[]) public void Register(params ComponentRegistration[] registrations) Parameters registrations ComponentRegistration[] RegisteredComponents() public IEnumerable<ComponentRegistration> RegisteredComponents() Returns IEnumerable<ComponentRegistration> ResolveAll<TComponent>() public TComponent[] ResolveAll<TComponent>() where TComponent : class Returns TComponent[] Type Parameters TComponent Resolve<TComponent>() public TComponent Resolve<TComponent>() where TComponent : class Returns TComponent Type Parameters TComponent"
  },
  "api/Compze.DependencyInjection.SimpleInjector.html": {
    "href": "api/Compze.DependencyInjection.SimpleInjector.html",
    "title": "Namespace Compze.DependencyInjection.SimpleInjector | Compze",
    "keywords": "Namespace Compze.DependencyInjection.SimpleInjector Classes SimpleInjectorDependencyInjectionContainer"
  },
  "api/Compze.DependencyInjection.Singleton.html": {
    "href": "api/Compze.DependencyInjection.Singleton.html",
    "title": "Class Singleton | Compze",
    "keywords": "Class Singleton Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public static class Singleton Inheritance object Singleton Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods For<TService>() public static SingletonRegistrationWithoutInstantiationSpec<TService> For<TService>() where TService : class Returns SingletonRegistrationWithoutInstantiationSpec<TService> Type Parameters TService For<TService1, TService2>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 For<TService1, TService2, TService3>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 For<TService1, TService2, TService3, TService4>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 For<TService1, TService2, TService3, TService4, TService5>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 For<TService1, TService2, TService3, TService4, TService5, TService6>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 For<TService1, TService2, TService3, TService4, TService5, TService6, TService7>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6, TService7>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 TService7 For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 TService7 TService8 For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8, TService9>() public static SingletonRegistrationWithoutInstantiationSpec<TService1> For<TService1, TService2, TService3, TService4, TService5, TService6, TService7, TService8, TService9>() where TService1 : class Returns SingletonRegistrationWithoutInstantiationSpec<TService1> Type Parameters TService1 TService2 TService3 TService4 TService5 TService6 TService7 TService8 TService9"
  },
  "api/Compze.DependencyInjection.SingletonRegistrationWithoutInstantiationSpec-1.html": {
    "href": "api/Compze.DependencyInjection.SingletonRegistrationWithoutInstantiationSpec-1.html",
    "title": "Class SingletonRegistrationWithoutInstantiationSpec<TService> | Compze",
    "keywords": "Class SingletonRegistrationWithoutInstantiationSpec<TService> Namespace Compze.DependencyInjection Assembly Compze.DependencyInjection.dll public class SingletonRegistrationWithoutInstantiationSpec<TService> : ComponentRegistrationWithoutInstantiationSpec<TService> where TService : class Type Parameters TService Inheritance object ComponentRegistrationWithoutInstantiationSpec<TService> SingletonRegistrationWithoutInstantiationSpec<TService> Inherited Members ComponentRegistrationWithoutInstantiationSpec<TService>.ServiceTypes ComponentRegistrationWithoutInstantiationSpec<TService>.AssertImplementsAllServices(Type) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TImplementation>) ComponentRegistrationExtensions.CreatedBy<TService, TImplementation, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(ComponentRegistrationWithoutInstantiationSpec<TService>, Func<TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TImplementation>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.DependencyInjection.html": {
    "href": "api/Compze.DependencyInjection.html",
    "title": "Namespace Compze.DependencyInjection | Compze",
    "keywords": "Namespace Compze.DependencyInjection Namespaces Compze.DependencyInjection.Microsoft Compze.DependencyInjection.SimpleInjector Classes ComponentRegistration ComponentRegistrationExtensions ComponentRegistrationWithoutInstantiationSpec<TService> ComponentRegistration<TService> Scoped ServiceLocatorTransactionRunner Singleton SingletonRegistrationWithoutInstantiationSpec<TService> Interfaces IDependencyInjectionContainer IRunMode IServiceLocator Enums DIContainer PersistenceLayer"
  },
  "api/Compze.Functional.DiscriminatedUnion-3.html": {
    "href": "api/Compze.Functional.DiscriminatedUnion-3.html",
    "title": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2> | Compze",
    "keywords": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2> Namespace Compze.Functional Assembly Compze.Utilities.dll public abstract class DiscriminatedUnion<TInheritor, TOption1, TOption2> where TInheritor : DiscriminatedUnion<TInheritor, TOption1, TOption2> where TOption1 : TInheritor where TOption2 : TInheritor Type Parameters TInheritor TOption1 TOption2 Inheritance object DiscriminatedUnion<TInheritor, TOption1, TOption2> Derived Option<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DiscriminatedUnion() protected DiscriminatedUnion()"
  },
  "api/Compze.Functional.DiscriminatedUnion-4.html": {
    "href": "api/Compze.Functional.DiscriminatedUnion-4.html",
    "title": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3> | Compze",
    "keywords": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3> Namespace Compze.Functional Assembly Compze.Utilities.dll public abstract class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3> where TInheritor : DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3> where TOption1 : TInheritor where TOption2 : TInheritor where TOption3 : TInheritor Type Parameters TInheritor TOption1 TOption2 TOption3 Inheritance object DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DiscriminatedUnion() protected DiscriminatedUnion()"
  },
  "api/Compze.Functional.DiscriminatedUnion-5.html": {
    "href": "api/Compze.Functional.DiscriminatedUnion-5.html",
    "title": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4> | Compze",
    "keywords": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4> Namespace Compze.Functional Assembly Compze.Utilities.dll public abstract class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4> where TInheritor : DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4> where TOption1 : TInheritor where TOption2 : TInheritor where TOption3 : TInheritor where TOption4 : TInheritor Type Parameters TInheritor TOption1 TOption2 TOption3 TOption4 Inheritance object DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DiscriminatedUnion() protected DiscriminatedUnion()"
  },
  "api/Compze.Functional.DiscriminatedUnion-6.html": {
    "href": "api/Compze.Functional.DiscriminatedUnion-6.html",
    "title": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5> | Compze",
    "keywords": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5> Namespace Compze.Functional Assembly Compze.Utilities.dll public abstract class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5> where TInheritor : DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5> where TOption1 : TInheritor where TOption2 : TInheritor where TOption3 : TInheritor where TOption4 : TInheritor where TOption5 : TInheritor Type Parameters TInheritor TOption1 TOption2 TOption3 TOption4 TOption5 Inheritance object DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DiscriminatedUnion() protected DiscriminatedUnion()"
  },
  "api/Compze.Functional.DiscriminatedUnion-7.html": {
    "href": "api/Compze.Functional.DiscriminatedUnion-7.html",
    "title": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5, TOption6> | Compze",
    "keywords": "Class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5, TOption6> Namespace Compze.Functional Assembly Compze.Utilities.dll public abstract class DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5, TOption6> where TInheritor : DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5, TOption6> where TOption1 : TInheritor where TOption2 : TInheritor where TOption3 : TInheritor where TOption4 : TInheritor where TOption5 : TInheritor where TOption6 : TInheritor Type Parameters TInheritor TOption1 TOption2 TOption3 TOption4 TOption5 TOption6 Inheritance object DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5, TOption6> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DiscriminatedUnion() protected DiscriminatedUnion()"
  },
  "api/Compze.Functional.None-1.html": {
    "href": "api/Compze.Functional.None-1.html",
    "title": "Class None<T> | Compze",
    "keywords": "Class None<T> Namespace Compze.Functional Assembly Compze.Utilities.dll public sealed class None<T> : Option<T> Type Parameters T Inheritance object DiscriminatedUnion<Option<T>, Some<T>, None<T>> Option<T> None<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Functional.ObjectCE.html": {
    "href": "api/Compze.Functional.ObjectCE.html",
    "title": "Class ObjectCE | Compze",
    "keywords": "Class ObjectCE Namespace Compze.Functional Assembly Compze.CQRS.dll Methods useful for any type when used in a Linq context public static class ObjectCE Inheritance object ObjectCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToStringNotNull(object) public static string ToStringNotNull(this object @this) Parameters this object Returns string"
  },
  "api/Compze.Functional.Option-1.html": {
    "href": "api/Compze.Functional.Option-1.html",
    "title": "Class Option<T> | Compze",
    "keywords": "Class Option<T> Namespace Compze.Functional Assembly Compze.Utilities.dll public abstract class Option<T> : DiscriminatedUnion<Option<T>, Some<T>, None<T>> Type Parameters T Inheritance object DiscriminatedUnion<Option<T>, Some<T>, None<T>> Option<T> Derived None<T> Some<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Functional.Option.html": {
    "href": "api/Compze.Functional.Option.html",
    "title": "Class Option | Compze",
    "keywords": "Class Option Namespace Compze.Functional Assembly Compze.Utilities.dll public static class Option Inheritance object Option Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods None<T>() public static Option<T> None<T>() Returns Option<T> Type Parameters T Some<T>(T) public static Option<T> Some<T>(T value) Parameters value T Returns Option<T> Type Parameters T"
  },
  "api/Compze.Functional.Pipe.html": {
    "href": "api/Compze.Functional.Pipe.html",
    "title": "Class Pipe | Compze",
    "keywords": "Class Pipe Namespace Compze.Functional Assembly Compze.CQRS.dll Provides the ability to chain method calls rather than having to use separate lines and temporary variables. public static class Pipe Inheritance object Pipe Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods mutateAsync<T>(T, Func<T, Task>) Mutates it using mutate and returns it public static Task<T> mutateAsync<T>(this T it, Func<T, Task> mutate) Parameters it T mutate Func<T, Task> Returns Task<T> Type Parameters T mutate<T>(T, Action<T>) Mutates it using mutate and returns it public static T mutate<T>(this T it, Action<T> mutate) Parameters it T mutate Action<T> Returns T Type Parameters T select<TValue, TResult>(TValue, Func<TValue, TResult>) Takes the first value, applies transform and return the resulting value. public static TResult select<TValue, TResult>(this TValue it, Func<TValue, TResult> transform) Parameters it TValue transform Func<TValue, TResult> Returns TResult Type Parameters TValue TResult then<TValue, TResult>(TValue, Func<TResult>) Invokes func, ignoring the previous value. Useful for chaining calls where the previous result is irrelevant. public static TResult then<TValue, TResult>(this TValue _, Func<TResult> func) Parameters _ TValue func Func<TResult> Returns TResult Type Parameters TValue TResult then<TValue, TResult>(TValue, TResult) Returns value, ignoring the previous value. Useful for chaining calls where a constant value is needed. public static TResult then<TValue, TResult>(this TValue _, TResult value) Parameters _ TValue value TResult Returns TResult Type Parameters TValue TResult"
  },
  "api/Compze.Functional.Some-1.html": {
    "href": "api/Compze.Functional.Some-1.html",
    "title": "Class Some<T> | Compze",
    "keywords": "Class Some<T> Namespace Compze.Functional Assembly Compze.Utilities.dll public sealed class Some<T> : Option<T> Type Parameters T Inheritance object DiscriminatedUnion<Option<T>, Some<T>, None<T>> Option<T> Some<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties Value public T Value { get; } Property Value T"
  },
  "api/Compze.Functional.Unit.html": {
    "href": "api/Compze.Functional.Unit.html",
    "title": "Struct Unit | Compze",
    "keywords": "Struct Unit Namespace Compze.Functional Assembly Compze.CQRS.dll The functional programming unit concept. Unifies Func<TResult> and Action. Simply return Unit instead of void from methods with no return value. public struct Unit : IEquatable<Unit>, IStaticInstancePropertySingleton Implements IEquatable<Unit> IStaticInstancePropertySingleton Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) ObjectCE.ToStringNotNull(object) Fields Instance public static readonly Unit Instance Field Value Unit InstanceTask public static readonly Task<Unit> InstanceTask Field Value Task<Unit> Methods Equals(Unit) Indicates whether the current object is equal to another object of the same type. public readonly bool Equals(Unit _) Parameters _ Unit Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override readonly bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. From(Action) public static Unit From(Action action) Parameters action Action Returns Unit GetHashCode() Returns the hash code for this instance. public override readonly int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. ToString() Returns the fully qualified type name of this instance. public override readonly string ToString() Returns string The fully qualified type name. Operators operator ==(Unit, Unit) public static bool operator ==(Unit _, Unit __) Parameters _ Unit __ Unit Returns bool operator !=(Unit, Unit) public static bool operator !=(Unit _, Unit __) Parameters _ Unit __ Unit Returns bool"
  },
  "api/Compze.Functional.html": {
    "href": "api/Compze.Functional.html",
    "title": "Namespace Compze.Functional | Compze",
    "keywords": "Namespace Compze.Functional Classes DiscriminatedUnion<TInheritor, TOption1, TOption2> DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3> DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4> DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5> DiscriminatedUnion<TInheritor, TOption1, TOption2, TOption3, TOption4, TOption5, TOption6> None<T> Option Option<T> Some<T>"
  },
  "api/Compze.GenericAbstractions.OptimizedInitializer.html": {
    "href": "api/Compze.GenericAbstractions.OptimizedInitializer.html",
    "title": "Class OptimizedInitializer | Compze",
    "keywords": "Class OptimizedInitializer Namespace Compze.GenericAbstractions Assembly Compze.dll public class OptimizedInitializer Inheritance object OptimizedInitializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties IsInitialized public bool IsInitialized { get; } Property Value bool"
  },
  "api/Compze.GenericAbstractions.Time.DateTimeNowTimeSource.html": {
    "href": "api/Compze.GenericAbstractions.Time.DateTimeNowTimeSource.html",
    "title": "Class DateTimeNowTimeSource | Compze",
    "keywords": "Class DateTimeNowTimeSource Namespace Compze.GenericAbstractions.Time Assembly Compze.dll Simply returns DateTime.Now or DateTime.UtcNow public class DateTimeNowTimeSource : IUtcTimeTimeSource Inheritance object DateTimeNowTimeSource Implements IUtcTimeTimeSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Fields Instance Returns an instance. public static readonly DateTimeNowTimeSource Instance Field Value DateTimeNowTimeSource Properties UtcNow Returns DateTime.UtcNow public DateTime UtcNow { get; } Property Value DateTime"
  },
  "api/Compze.GenericAbstractions.Time.IUtcTimeTimeSource.html": {
    "href": "api/Compze.GenericAbstractions.Time.IUtcTimeTimeSource.html",
    "title": "Interface IUtcTimeTimeSource | Compze",
    "keywords": "Interface IUtcTimeTimeSource Namespace Compze.GenericAbstractions.Time Assembly Compze.dll Provides the service of telling what the current UTC time is. In order to make things testable calling DateTime.Now or DateTime.UtcNow directly is discouraged. public interface IUtcTimeTimeSource Extension Methods NullableCE.NotNull<T>(T?) Properties UtcNow Returns the current time as UTC time. DateTime UtcNow { get; } Property Value DateTime"
  },
  "api/Compze.GenericAbstractions.Time.TestingTimeSource.html": {
    "href": "api/Compze.GenericAbstractions.Time.TestingTimeSource.html",
    "title": "Class TestingTimeSource | Compze",
    "keywords": "Class TestingTimeSource Namespace Compze.GenericAbstractions.Time Assembly Compze.dll Just statically returns whatever value was assigned. public class TestingTimeSource : IUtcTimeTimeSource Inheritance object TestingTimeSource Implements IUtcTimeTimeSource Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Properties UtcNow Gets the current UTC time. public DateTime UtcNow { get; } Property Value DateTime Methods FreezeAtUtcTime(DateTime) public void FreezeAtUtcTime(DateTime time) Parameters time DateTime FreezeAtUtcTime(string) public void FreezeAtUtcTime(string time) Parameters time string FrozenAtUtcTime(DateTime) Returns a timesource that will forever return as the current time. public static TestingTimeSource FrozenAtUtcTime(DateTime utcTime) Parameters utcTime DateTime Returns TestingTimeSource FrozenUtcNow() Returns a timesource that will continually return the time that it was created at as the current time. public static TestingTimeSource FrozenUtcNow() Returns TestingTimeSource"
  },
  "api/Compze.GenericAbstractions.Time.html": {
    "href": "api/Compze.GenericAbstractions.Time.html",
    "title": "Namespace Compze.GenericAbstractions.Time | Compze",
    "keywords": "Namespace Compze.GenericAbstractions.Time Classes DateTimeNowTimeSource Simply returns DateTime.Now or DateTime.UtcNow TestingTimeSource Just statically returns whatever value was assigned. Interfaces IUtcTimeTimeSource Provides the service of telling what the current UTC time is. In order to make things testable calling DateTime.Now or DateTime.UtcNow directly is discouraged."
  },
  "api/Compze.GenericAbstractions.html": {
    "href": "api/Compze.GenericAbstractions.html",
    "title": "Namespace Compze.GenericAbstractions | Compze",
    "keywords": "Namespace Compze.GenericAbstractions Namespaces Compze.GenericAbstractions.Time Classes OptimizedInitializer"
  },
  "api/Compze.Messaging.Buses.EndpointHost.Production.html": {
    "href": "api/Compze.Messaging.Buses.EndpointHost.Production.html",
    "title": "Class EndpointHost.Production | Compze",
    "keywords": "Class EndpointHost.Production Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public static class EndpointHost.Production Inheritance object EndpointHost.Production Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Func<IRunMode, IDependencyInjectionContainer>) public static IEndpointHost Create(Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters containerFactory Func<IRunMode, IDependencyInjectionContainer> Returns IEndpointHost"
  },
  "api/Compze.Messaging.Buses.EndpointHost.html": {
    "href": "api/Compze.Messaging.Buses.EndpointHost.html",
    "title": "Class EndpointHost | Compze",
    "keywords": "Class EndpointHost Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public class EndpointHost : IEndpointHost, IAsyncDisposable Inheritance object EndpointHost Implements IEndpointHost IAsyncDisposable Derived TestingEndpointHostBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors EndpointHost(IRunMode, Func<IRunMode, IDependencyInjectionContainer>) protected EndpointHost(IRunMode mode, Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters mode IRunMode containerFactory Func<IRunMode, IDependencyInjectionContainer> Properties Endpoints protected IList<IEndpoint> Endpoints { get; } Property Value IList<IEndpoint> Methods DisposeAsync() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources asynchronously. public ValueTask DisposeAsync() Returns ValueTask A task that represents the asynchronous dispose operation. DisposeAsync(bool) protected virtual ValueTask DisposeAsync(bool disposing) Parameters disposing bool Returns ValueTask RegisterClientEndpoint(Action<IEndpointBuilder>) Registers a default client endpoint with a host. Can be called only once per host instance. public IEndpoint RegisterClientEndpoint(Action<IEndpointBuilder> setup) Parameters setup Action<IEndpointBuilder> Returns IEndpoint RegisterEndpoint(string, EndpointId, Action<IEndpointBuilder>) public IEndpoint RegisterEndpoint(string name, EndpointId id, Action<IEndpointBuilder> setup) Parameters name string id EndpointId setup Action<IEndpointBuilder> Returns IEndpoint Start() public void Start() StartAsync() public Task StartAsync() Returns Task"
  },
  "api/Compze.Messaging.Buses.EndpointId.html": {
    "href": "api/Compze.Messaging.Buses.EndpointId.html",
    "title": "Class EndpointId | Compze",
    "keywords": "Class EndpointId Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public record EndpointId : IEquatable<EndpointId> Inheritance object EndpointId Implements IEquatable<EndpointId> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors EndpointId(Guid) [JsonConstructor] public EndpointId(Guid guidValue) Parameters guidValue Guid Properties GuidValue public Guid GuidValue { get; } Property Value Guid"
  },
  "api/Compze.Messaging.Buses.EndpointRequestExecutor.html": {
    "href": "api/Compze.Messaging.Buses.EndpointRequestExecutor.html",
    "title": "Class EndpointRequestExecutor | Compze",
    "keywords": "Class EndpointRequestExecutor Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public static class EndpointRequestExecutor Inheritance object EndpointRequestExecutor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ExecuteAsClientRequestOn(NavigationSpecification, IEndpoint) public static void ExecuteAsClientRequestOn(this NavigationSpecification navigationSpecification, IEndpoint endpoint) Parameters navigationSpecification NavigationSpecification endpoint IEndpoint ExecuteAsClientRequestOnAsync(NavigationSpecification, IEndpoint) public static Task ExecuteAsClientRequestOnAsync(this NavigationSpecification navigationSpecification, IEndpoint endpoint) Parameters navigationSpecification NavigationSpecification endpoint IEndpoint Returns Task ExecuteAsClientRequestOnAsync<TResult>(NavigationSpecification<TResult>, IEndpoint) public static Task<TResult> ExecuteAsClientRequestOnAsync<TResult>(this NavigationSpecification<TResult> navigationSpecification, IEndpoint endpoint) Parameters navigationSpecification NavigationSpecification<TResult> endpoint IEndpoint Returns Task<TResult> Type Parameters TResult ExecuteAsClientRequestOn<TResult>(NavigationSpecification<TResult>, IEndpoint) public static TResult ExecuteAsClientRequestOn<TResult>(this NavigationSpecification<TResult> navigationSpecification, IEndpoint endpoint) Parameters navigationSpecification NavigationSpecification<TResult> endpoint IEndpoint Returns TResult Type Parameters TResult ExecuteClientRequest(IEndpoint, NavigationSpecification) public static void ExecuteClientRequest(this IEndpoint @this, NavigationSpecification navigation) Parameters this IEndpoint navigation NavigationSpecification ExecuteClientRequest(IEndpoint, Action<IRemoteHypermediaNavigator>) public static void ExecuteClientRequest(this IEndpoint @this, Action<IRemoteHypermediaNavigator> request) Parameters this IEndpoint request Action<IRemoteHypermediaNavigator> ExecuteClientRequestAsync(IEndpoint, NavigationSpecification) public static Task ExecuteClientRequestAsync(this IEndpoint endpoint, NavigationSpecification navigation) Parameters endpoint IEndpoint navigation NavigationSpecification Returns Task ExecuteClientRequestAsync(IEndpoint, Func<IRemoteHypermediaNavigator, Task>) public static Task ExecuteClientRequestAsync(this IEndpoint endpoint, Func<IRemoteHypermediaNavigator, Task> request) Parameters endpoint IEndpoint request Func<IRemoteHypermediaNavigator, Task> Returns Task ExecuteClientRequestAsync(IEndpoint, Func<Task>) public static Task ExecuteClientRequestAsync(this IEndpoint endpoint, Func<Task> request) Parameters endpoint IEndpoint request Func<Task> Returns Task ExecuteClientRequestAsync<TResult>(IEndpoint, Func<IRemoteHypermediaNavigator, Task<TResult>>) public static Task<TResult> ExecuteClientRequestAsync<TResult>(this IEndpoint @this, Func<IRemoteHypermediaNavigator, Task<TResult>> request) Parameters this IEndpoint request Func<IRemoteHypermediaNavigator, Task<TResult>> Returns Task<TResult> Type Parameters TResult ExecuteClientRequest<TResult>(IEndpoint, NavigationSpecification<TResult>) public static TResult ExecuteClientRequest<TResult>(this IEndpoint @this, NavigationSpecification<TResult> navigation) Parameters this IEndpoint navigation NavigationSpecification<TResult> Returns TResult Type Parameters TResult ExecuteClientRequest<TResult>(IEndpoint, Func<IRemoteHypermediaNavigator, TResult>) public static TResult ExecuteClientRequest<TResult>(this IEndpoint @this, Func<IRemoteHypermediaNavigator, TResult> request) Parameters this IEndpoint request Func<IRemoteHypermediaNavigator, TResult> Returns TResult Type Parameters TResult ExecuteRequestAsync<TResult>(IEndpoint, NavigationSpecification<TResult>) public static Task<TResult> ExecuteRequestAsync<TResult>(this IEndpoint endpoint, NavigationSpecification<TResult> navigation) Parameters endpoint IEndpoint navigation NavigationSpecification<TResult> Returns Task<TResult> Type Parameters TResult ExecuteServerRequest(IEndpoint, Action<IServiceBusSession>) public static void ExecuteServerRequest(this IEndpoint @this, Action<IServiceBusSession> request) Parameters this IEndpoint request Action<IServiceBusSession> ExecuteServerRequestInTransaction(IEndpoint, Action<IServiceBusSession>) public static void ExecuteServerRequestInTransaction(this IEndpoint @this, Action<IServiceBusSession> request) Parameters this IEndpoint request Action<IServiceBusSession>"
  },
  "api/Compze.Messaging.Buses.IEndpoint.html": {
    "href": "api/Compze.Messaging.Buses.IEndpoint.html",
    "title": "Interface IEndpoint | Compze",
    "keywords": "Interface IEndpoint Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public interface IEndpoint : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Extension Methods EndpointRequestExecutor.ExecuteClientRequest(IEndpoint, NavigationSpecification) EndpointRequestExecutor.ExecuteClientRequest(IEndpoint, Action<IRemoteHypermediaNavigator>) EndpointRequestExecutor.ExecuteClientRequestAsync(IEndpoint, NavigationSpecification) EndpointRequestExecutor.ExecuteClientRequestAsync(IEndpoint, Func<IRemoteHypermediaNavigator, Task>) EndpointRequestExecutor.ExecuteClientRequestAsync(IEndpoint, Func<Task>) EndpointRequestExecutor.ExecuteClientRequestAsync<TResult>(IEndpoint, Func<IRemoteHypermediaNavigator, Task<TResult>>) EndpointRequestExecutor.ExecuteClientRequest<TResult>(IEndpoint, NavigationSpecification<TResult>) EndpointRequestExecutor.ExecuteClientRequest<TResult>(IEndpoint, Func<IRemoteHypermediaNavigator, TResult>) EndpointRequestExecutor.ExecuteRequestAsync<TResult>(IEndpoint, NavigationSpecification<TResult>) EndpointRequestExecutor.ExecuteServerRequest(IEndpoint, Action<IServiceBusSession>) EndpointRequestExecutor.ExecuteServerRequestInTransaction(IEndpoint, Action<IServiceBusSession>) NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties Address EndPointAddress? Address { get; } Property Value EndPointAddress Id EndpointId Id { get; } Property Value EndpointId IsRunning bool IsRunning { get; } Property Value bool ServiceLocator IServiceLocator ServiceLocator { get; } Property Value IServiceLocator Methods AwaitNoMessagesInFlight(TimeSpan?) void AwaitNoMessagesInFlight(TimeSpan? timeoutOverride) Parameters timeoutOverride TimeSpan? ConnectAsync() Task ConnectAsync() Returns Task InitAsync() Task InitAsync() Returns Task StopAsync() Task StopAsync() Returns Task"
  },
  "api/Compze.Messaging.Buses.IEndpointBuilder.html": {
    "href": "api/Compze.Messaging.Buses.IEndpointBuilder.html",
    "title": "Interface IEndpointBuilder | Compze",
    "keywords": "Interface IEndpointBuilder Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public interface IEndpointBuilder : IDisposable Inherited Members IDisposable.Dispose() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties Configuration EndpointConfiguration Configuration { get; } Property Value EndpointConfiguration Container IDependencyInjectionContainer Container { get; } Property Value IDependencyInjectionContainer RegisterHandlers MessageHandlerRegistrarWithDependencyInjectionSupport RegisterHandlers { get; } Property Value MessageHandlerRegistrarWithDependencyInjectionSupport TypeMapper ITypeMappingRegistar TypeMapper { get; } Property Value ITypeMappingRegistar"
  },
  "api/Compze.Messaging.Buses.IEndpointHost.html": {
    "href": "api/Compze.Messaging.Buses.IEndpointHost.html",
    "title": "Interface IEndpointHost | Compze",
    "keywords": "Interface IEndpointHost Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public interface IEndpointHost : IAsyncDisposable Inherited Members IAsyncDisposable.DisposeAsync() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods RegisterClientEndpoint(Action<IEndpointBuilder>) Registers a default client endpoint with a host. Can be called only once per host instance. IEndpoint RegisterClientEndpoint(Action<IEndpointBuilder> setup) Parameters setup Action<IEndpointBuilder> Returns IEndpoint RegisterEndpoint(string, EndpointId, Action<IEndpointBuilder>) IEndpoint RegisterEndpoint(string name, EndpointId id, Action<IEndpointBuilder> setup) Parameters name string id EndpointId setup Action<IEndpointBuilder> Returns IEndpoint Start() void Start() StartAsync() Task StartAsync() Returns Task"
  },
  "api/Compze.Messaging.Buses.IMessageHandlerRegistrar.html": {
    "href": "api/Compze.Messaging.Buses.IMessageHandlerRegistrar.html",
    "title": "Interface IMessageHandlerRegistrar | Compze",
    "keywords": "Interface IMessageHandlerRegistrar Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public interface IMessageHandlerRegistrar Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods ForCommand<TCommand>(Action<TCommand>) IMessageHandlerRegistrar ForCommand<TCommand>(Action<TCommand> handler) where TCommand : ICommand Parameters handler Action<TCommand> Returns IMessageHandlerRegistrar Type Parameters TCommand ForCommand<TCommand, TResult>(Func<TCommand, TResult>) IMessageHandlerRegistrar ForCommand<TCommand, TResult>(Func<TCommand, TResult> handler) where TCommand : ICommand<TResult> Parameters handler Func<TCommand, TResult> Returns IMessageHandlerRegistrar Type Parameters TCommand TResult ForEvent<TEvent>(Action<TEvent>) IMessageHandlerRegistrar ForEvent<TEvent>(Action<TEvent> handler) where TEvent : IEvent Parameters handler Action<TEvent> Returns IMessageHandlerRegistrar Type Parameters TEvent ForQuery<TQuery, TResult>(Func<TQuery, TResult>) IMessageHandlerRegistrar ForQuery<TQuery, TResult>(Func<TQuery, TResult> handler) where TQuery : IQuery<TResult> Parameters handler Func<TQuery, TResult> Returns IMessageHandlerRegistrar Type Parameters TQuery TResult"
  },
  "api/Compze.Messaging.Buses.IServiceBusSession.html": {
    "href": "api/Compze.Messaging.Buses.IServiceBusSession.html",
    "title": "Interface IServiceBusSession | Compze",
    "keywords": "Interface IServiceBusSession Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll Dispatches messages between processes. public interface IServiceBusSession Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods ScheduleSend(DateTime, IExactlyOnceCommand) Schedules a command to be sent later if the current transaction succeeds. The execution of the handler runs is a separate transaction at the receiver. void ScheduleSend(DateTime sendAt, IExactlyOnceCommand command) Parameters sendAt DateTime command IExactlyOnceCommand Send(IExactlyOnceCommand) Sends a command if the current transaction succeeds. The execution of the handler runs is a separate transaction at the receiver. void Send(IExactlyOnceCommand command) Parameters command IExactlyOnceCommand"
  },
  "api/Compze.Messaging.Buses.ITestingEndpointHost.html": {
    "href": "api/Compze.Messaging.Buses.ITestingEndpointHost.html",
    "title": "Interface ITestingEndpointHost | Compze",
    "keywords": "Interface ITestingEndpointHost Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public interface ITestingEndpointHost : IEndpointHost, IAsyncDisposable Inherited Members IEndpointHost.RegisterEndpoint(string, EndpointId, Action<IEndpointBuilder>) IEndpointHost.RegisterClientEndpoint(Action<IEndpointBuilder>) IEndpointHost.StartAsync() IEndpointHost.Start() IAsyncDisposable.DisposeAsync() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods AssertThrown<TException>() TException AssertThrown<TException>() where TException : Exception Returns TException Type Parameters TException RegisterClientEndpointForRegisteredEndpoints() IEndpoint RegisterClientEndpointForRegisteredEndpoints() Returns IEndpoint RegisterTestingEndpoint(string?, EndpointId?, Action<IEndpointBuilder>?) IEndpoint RegisterTestingEndpoint(string? name = null, EndpointId? id = null, Action<IEndpointBuilder>? setup = null) Parameters name string id EndpointId setup Action<IEndpointBuilder> Returns IEndpoint"
  },
  "api/Compze.Messaging.Buses.Implementation.CommandValidationFailureException.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.CommandValidationFailureException.html",
    "title": "Class CommandValidationFailureException | Compze",
    "keywords": "Class CommandValidationFailureException Namespace Compze.Messaging.Buses.Implementation Assembly Compze.CQRS.dll public class CommandValidationFailureException : Exception, ISerializable Inheritance object Exception CommandValidationFailureException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors CommandValidationFailureException(IEnumerable<ValidationResult>) public CommandValidationFailureException(IEnumerable<ValidationResult> failures) Parameters failures IEnumerable<ValidationResult> Properties Failures public IEnumerable<ValidationResult> Failures { get; } Property Value IEnumerable<ValidationResult>"
  },
  "api/Compze.Messaging.Buses.Implementation.EndPointAddress.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.EndPointAddress.html",
    "title": "Class EndPointAddress | Compze",
    "keywords": "Class EndPointAddress Namespace Compze.Messaging.Buses.Implementation Assembly Compze.Messaging.dll public record EndPointAddress : IEquatable<EndPointAddress> Inheritance object EndPointAddress Implements IEquatable<EndPointAddress> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Messaging.Buses.Implementation.EndpointConfiguration.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.EndpointConfiguration.html",
    "title": "Class EndpointConfiguration | Compze",
    "keywords": "Class EndpointConfiguration Namespace Compze.Messaging.Buses.Implementation Assembly Compze.Messaging.dll public class EndpointConfiguration Inheritance object EndpointConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties ConnectionStringName public string ConnectionStringName { get; } Property Value string"
  },
  "api/Compze.Messaging.Buses.Implementation.InvalidControllerRegistrationException.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.InvalidControllerRegistrationException.html",
    "title": "Class InvalidControllerRegistrationException | Compze",
    "keywords": "Class InvalidControllerRegistrationException Namespace Compze.Messaging.Buses.Implementation Assembly Compze.CQRS.dll public class InvalidControllerRegistrationException : Exception, ISerializable Inheritance object Exception InvalidControllerRegistrationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors InvalidControllerRegistrationException(string, Exception) public InvalidControllerRegistrationException(string message, Exception ex) Parameters message string ex Exception"
  },
  "api/Compze.Messaging.Buses.Implementation.MessageDispatchingFailedException.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.MessageDispatchingFailedException.html",
    "title": "Class MessageDispatchingFailedException | Compze",
    "keywords": "Class MessageDispatchingFailedException Namespace Compze.Messaging.Buses.Implementation Assembly Compze.Messaging.dll public class MessageDispatchingFailedException : Exception, ISerializable Inheritance object Exception MessageDispatchingFailedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors MessageDispatchingFailedException(string) public MessageDispatchingFailedException(string remoteExceptionAsString) Parameters remoteExceptionAsString string"
  },
  "api/Compze.Messaging.Buses.Implementation.NoHandlerException.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.NoHandlerException.html",
    "title": "Class NoHandlerException | Compze",
    "keywords": "Class NoHandlerException Namespace Compze.Messaging.Buses.Implementation Assembly Compze.CQRS.dll public class NoHandlerException : Exception, ISerializable Inheritance object Exception NoHandlerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors NoHandlerException(Type) public NoHandlerException(Type messageType) Parameters messageType Type"
  },
  "api/Compze.Messaging.Buses.Implementation.NoHandlerForMessageTypeException.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.NoHandlerForMessageTypeException.html",
    "title": "Class NoHandlerForMessageTypeException | Compze",
    "keywords": "Class NoHandlerForMessageTypeException Namespace Compze.Messaging.Buses.Implementation Assembly Compze.CQRS.dll public class NoHandlerForMessageTypeException : Exception, ISerializable Inheritance object Exception NoHandlerForMessageTypeException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors NoHandlerForMessageTypeException(Type) public NoHandlerForMessageTypeException(Type commandType) Parameters commandType Type"
  },
  "api/Compze.Messaging.Buses.Implementation.html": {
    "href": "api/Compze.Messaging.Buses.Implementation.html",
    "title": "Namespace Compze.Messaging.Buses.Implementation | Compze",
    "keywords": "Namespace Compze.Messaging.Buses.Implementation Classes EndPointAddress EndpointConfiguration MessageDispatchingFailedException"
  },
  "api/Compze.Messaging.Buses.MessageHandlerRegistrarWithDependencyInjectionSupport.html": {
    "href": "api/Compze.Messaging.Buses.MessageHandlerRegistrarWithDependencyInjectionSupport.html",
    "title": "Class MessageHandlerRegistrarWithDependencyInjectionSupport | Compze",
    "keywords": "Class MessageHandlerRegistrarWithDependencyInjectionSupport Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public class MessageHandlerRegistrarWithDependencyInjectionSupport Inheritance object MessageHandlerRegistrarWithDependencyInjectionSupport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>) MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Messaging.Buses.MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.html": {
    "href": "api/Compze.Messaging.Buses.MessageHandlerRegistrarWithDependencyInjectionSupportExtensions.html",
    "title": "Class MessageHandlerRegistrarWithDependencyInjectionSupportExtensions | Compze",
    "keywords": "Class MessageHandlerRegistrarWithDependencyInjectionSupportExtensions Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public static class MessageHandlerRegistrarWithDependencyInjectionSupportExtensions Inheritance object MessageHandlerRegistrarWithDependencyInjectionSupportExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class where TDependency9 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TDependency9 TResult ForCommandWithResult<TCommand, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TResult> handler) where TCommand : ICommand<TResult> Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TResult ForCommandWithResult<TCommand, TDependency1, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TResult ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommandWithResult<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult> handler) where TCommand : ICommand<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TResult ForCommand<TCommand>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand> handler) where TCommand : ICommand Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class where TDependency9 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TDependency9 ForCommand<TCommand, TDependency1>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1> handler) where TCommand : ICommand where TDependency1 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 ForCommand<TCommand, TDependency1, TDependency2>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 ForCommand<TCommand, TDependency1, TDependency2, TDependency3>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForCommand<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8> handler) where TCommand : ICommand where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TCommand, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TCommand TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 ForEvent<TEvent>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent> handler) where TEvent : IEvent Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class where TDependency9 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TDependency9 ForEvent<TEvent, TDependency1>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1> handler) where TEvent : IEvent where TDependency1 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 ForEvent<TEvent, TDependency1, TDependency2>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 ForEvent<TEvent, TDependency1, TDependency2, TDependency3>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 TDependency4 ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(MessageHandlerRegistrarWithDependencyInjectionSupport, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForEvent<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8> handler) where TEvent : IEvent where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Action<TEvent, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TEvent TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TResult ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class where TDependency8 : class where TDependency9 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TDependency8, TDependency9, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TDependency8 TDependency9 TResult ForQuery<TQuery, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TResult> handler) where TQuery : IQuery<TResult> Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TResult ForQuery<TQuery, TDependency1, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TResult ForQuery<TQuery, TDependency1, TDependency2, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TResult ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TResult ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TDependency4 TResult ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TResult ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TResult ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>(MessageHandlerRegistrarWithDependencyInjectionSupport, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>) public static MessageHandlerRegistrarWithDependencyInjectionSupport ForQuery<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult>(this MessageHandlerRegistrarWithDependencyInjectionSupport @this, Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult> handler) where TQuery : IQuery<TResult> where TDependency1 : class where TDependency2 : class where TDependency3 : class where TDependency4 : class where TDependency5 : class where TDependency6 : class where TDependency7 : class Parameters this MessageHandlerRegistrarWithDependencyInjectionSupport handler Func<TQuery, TDependency1, TDependency2, TDependency3, TDependency4, TDependency5, TDependency6, TDependency7, TResult> Returns MessageHandlerRegistrarWithDependencyInjectionSupport Type Parameters TQuery TDependency1 TDependency2 TDependency3 TDependency4 TDependency5 TDependency6 TDependency7 TResult"
  },
  "api/Compze.Messaging.Buses.TestingEndpointHost.html": {
    "href": "api/Compze.Messaging.Buses.TestingEndpointHost.html",
    "title": "Class TestingEndpointHost | Compze",
    "keywords": "Class TestingEndpointHost Namespace Compze.Messaging.Buses Assembly Compze.CQRS.ExternalDependencies.dll public class TestingEndpointHost : TestingEndpointHostBase, ITestingEndpointHost, IEndpointHost, IAsyncDisposable Inheritance object EndpointHost TestingEndpointHostBase TestingEndpointHost Implements ITestingEndpointHost IEndpointHost IAsyncDisposable Inherited Members TestingEndpointHostBase.ServerEndpoints TestingEndpointHostBase.RegisterTestingEndpoint(string, EndpointId, Action<IEndpointBuilder>) TestingEndpointHostBase.RegisterClientEndpointForRegisteredEndpoints() TestingEndpointHostBase.AssertThrown<TException>() TestingEndpointHostBase.DisposeAsync(bool) EndpointHost.Endpoints EndpointHost.RegisterEndpoint(string, EndpointId, Action<IEndpointBuilder>) EndpointHost.RegisterClientEndpoint(Action<IEndpointBuilder>) EndpointHost.StartAsync() EndpointHost.Start() EndpointHost.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) TaskCE.CaF(IAsyncDisposable) ObjectCE.ToStringNotNull(object) Constructors TestingEndpointHost(IRunMode, Func<IRunMode, IDependencyInjectionContainer>) public TestingEndpointHost(IRunMode mode, Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters mode IRunMode containerFactory Func<IRunMode, IDependencyInjectionContainer> Methods Create(Func<IRunMode, IDependencyInjectionContainer>) public static ITestingEndpointHost Create(Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters containerFactory Func<IRunMode, IDependencyInjectionContainer> Returns ITestingEndpointHost"
  },
  "api/Compze.Messaging.Buses.TestingEndpointHostBase.html": {
    "href": "api/Compze.Messaging.Buses.TestingEndpointHostBase.html",
    "title": "Class TestingEndpointHostBase | Compze",
    "keywords": "Class TestingEndpointHostBase Namespace Compze.Messaging.Buses Assembly Compze.Messaging.dll public class TestingEndpointHostBase : EndpointHost, ITestingEndpointHost, IEndpointHost, IAsyncDisposable Inheritance object EndpointHost TestingEndpointHostBase Implements ITestingEndpointHost IEndpointHost IAsyncDisposable Derived TestingEndpointHost Inherited Members EndpointHost.Endpoints EndpointHost.RegisterEndpoint(string, EndpointId, Action<IEndpointBuilder>) EndpointHost.RegisterClientEndpoint(Action<IEndpointBuilder>) EndpointHost.StartAsync() EndpointHost.Start() EndpointHost.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors TestingEndpointHostBase(IRunMode, Func<IRunMode, IDependencyInjectionContainer>) public TestingEndpointHostBase(IRunMode mode, Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters mode IRunMode containerFactory Func<IRunMode, IDependencyInjectionContainer> Properties ServerEndpoints public IEnumerable<EndPointAddress> ServerEndpoints { get; } Property Value IEnumerable<EndPointAddress> Methods AssertThrown<TException>() public TException AssertThrown<TException>() where TException : Exception Returns TException Type Parameters TException DisposeAsync(bool) protected override ValueTask DisposeAsync(bool disposing) Parameters disposing bool Returns ValueTask RegisterClientEndpointForRegisteredEndpoints() public IEndpoint RegisterClientEndpointForRegisteredEndpoints() Returns IEndpoint RegisterTestingEndpoint(string?, EndpointId?, Action<IEndpointBuilder>?) public IEndpoint RegisterTestingEndpoint(string? name = null, EndpointId? id = null, Action<IEndpointBuilder>? setup = null) Parameters name string id EndpointId setup Action<IEndpointBuilder> Returns IEndpoint"
  },
  "api/Compze.Messaging.Buses.TestingHostExtensions.html": {
    "href": "api/Compze.Messaging.Buses.TestingHostExtensions.html",
    "title": "Class TestingHostExtensions | Compze",
    "keywords": "Class TestingHostExtensions Namespace Compze.Messaging.Buses Assembly Compze.CQRS.dll public static class TestingHostExtensions Inheritance object TestingHostExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AssertThatRunningScenarioThrowsBackendAndClientException<TException>(ITestingEndpointHost, Action) public static (TException BackendException, MessageDispatchingFailedException FrontEndException) AssertThatRunningScenarioThrowsBackendAndClientException<TException>(this ITestingEndpointHost @this, Action action) where TException : Exception Parameters this ITestingEndpointHost action Action Returns (TException BackendException, MessageDispatchingFailedException FrontEndException) Type Parameters TException AssertThatRunningScenarioThrowsBackendException<TException>(ITestingEndpointHost, Action) public static TException AssertThatRunningScenarioThrowsBackendException<TException>(this ITestingEndpointHost @this, Action action) where TException : Exception Parameters this ITestingEndpointHost action Action Returns TException Type Parameters TException"
  },
  "api/Compze.Messaging.Buses.html": {
    "href": "api/Compze.Messaging.Buses.html",
    "title": "Namespace Compze.Messaging.Buses | Compze",
    "keywords": "Namespace Compze.Messaging.Buses Namespaces Compze.Messaging.Buses.Implementation Classes EndpointHost EndpointHost.Production EndpointId EndpointRequestExecutor MessageHandlerRegistrarWithDependencyInjectionSupport MessageHandlerRegistrarWithDependencyInjectionSupportExtensions TestingEndpointHostBase Interfaces IEndpoint IEndpointBuilder IEndpointHost IMessageHandlerRegistrar IServiceBusSession Dispatches messages between processes. ITestingEndpointHost"
  },
  "api/Compze.Messaging.Events.CallMatchingHandlersInRegistrationOrderEventDispatcher-1.html": {
    "href": "api/Compze.Messaging.Events.CallMatchingHandlersInRegistrationOrderEventDispatcher-1.html",
    "title": "Class CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent> | Compze",
    "keywords": "Class CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent> Namespace Compze.Messaging.Events Assembly Compze.CQRS.dll Calls all matching handlers in the order they were registered when an event is Dispatched. Handlers should be registered using the RegisterHandlers method in the constructor of the inheritor. public class CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent> where TEvent : class, IEvent Type Parameters TEvent Inheritance object CallMatchingHandlersInRegistrationOrderEventDispatcher<TEvent> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods Dispatch(TEvent) public void Dispatch(TEvent evt) Parameters evt TEvent Handles(IAggregateEvent) public bool Handles(IAggregateEvent @event) Parameters event IAggregateEvent Returns bool HandlesEvent<THandled>() public bool HandlesEvent<THandled>() Returns bool Type Parameters THandled Register() public IEventHandlerRegistrar<TEvent> Register() Returns IEventHandlerRegistrar<TEvent>"
  },
  "api/Compze.Messaging.Events.EventHandlerRegistrar.html": {
    "href": "api/Compze.Messaging.Events.EventHandlerRegistrar.html",
    "title": "Class EventHandlerRegistrar | Compze",
    "keywords": "Class EventHandlerRegistrar Namespace Compze.Messaging.Events Assembly Compze.dll public static class EventHandlerRegistrar Inheritance object EventHandlerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AfterHandlers<TEvent>(IEventHandlerRegistrar<TEvent>, Action<TEvent>) public static IEventHandlerRegistrar<TEvent> AfterHandlers<TEvent>(this IEventHandlerRegistrar<TEvent> @this, Action<TEvent> handler) where TEvent : class, IEvent Parameters this IEventHandlerRegistrar<TEvent> handler Action<TEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters TEvent BeforeHandlers<TEvent>(IEventHandlerRegistrar<TEvent>, Action<TEvent>) public static IEventHandlerRegistrar<TEvent> BeforeHandlers<TEvent>(this IEventHandlerRegistrar<TEvent> @this, Action<TEvent> handler) where TEvent : class, IEvent Parameters this IEventHandlerRegistrar<TEvent> handler Action<TEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters TEvent"
  },
  "api/Compze.Messaging.Events.EventUnhandledException.html": {
    "href": "api/Compze.Messaging.Events.EventUnhandledException.html",
    "title": "Class EventUnhandledException | Compze",
    "keywords": "Class EventUnhandledException Namespace Compze.Messaging.Events Assembly Compze.dll public class EventUnhandledException : Exception, ISerializable Inheritance object Exception EventUnhandledException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?) Constructors EventUnhandledException(Type, Type) public EventUnhandledException(Type handlerType, Type eventType) Parameters handlerType Type eventType Type"
  },
  "api/Compze.Messaging.Events.IEventDispatcher-1.html": {
    "href": "api/Compze.Messaging.Events.IEventDispatcher-1.html",
    "title": "Interface IEventDispatcher<TEvent> | Compze",
    "keywords": "Interface IEventDispatcher<TEvent> Namespace Compze.Messaging.Events Assembly Compze.dll public interface IEventDispatcher<in TEvent> Type Parameters TEvent Extension Methods NullableCE.NotNull<T>(T?) Methods Dispatch(TEvent) void Dispatch(TEvent evt) Parameters evt TEvent"
  },
  "api/Compze.Messaging.Events.IEventHandlerRegistrar-1.html": {
    "href": "api/Compze.Messaging.Events.IEventHandlerRegistrar-1.html",
    "title": "Interface IEventHandlerRegistrar<TEvent> | Compze",
    "keywords": "Interface IEventHandlerRegistrar<TEvent> Namespace Compze.Messaging.Events Assembly Compze.dll public interface IEventHandlerRegistrar<in TEvent> where TEvent : class, IEvent Type Parameters TEvent Extension Methods EventHandlerRegistrar.AfterHandlers<TEvent>(IEventHandlerRegistrar<TEvent>, Action<TEvent>) EventHandlerRegistrar.BeforeHandlers<TEvent>(IEventHandlerRegistrar<TEvent>, Action<TEvent>) NullableCE.NotNull<T>(T?) Methods AfterHandlers<THandledEvent>(Action<THandledEvent>) IEventHandlerRegistrar<in TEvent> AfterHandlers<THandledEvent>(Action<THandledEvent> runAfterHandlers) where THandledEvent : TEvent Parameters runAfterHandlers Action<THandledEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters THandledEvent BeforeHandlers<THandledEvent>(Action<THandledEvent>) IEventHandlerRegistrar<in TEvent> BeforeHandlers<THandledEvent>(Action<THandledEvent> runBeforeHandlers) where THandledEvent : TEvent Parameters runBeforeHandlers Action<THandledEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters THandledEvent ForGenericEvent<THandledEvent>(Action<THandledEvent>) Lets you register handlers for event interfaces that may be defined outside of the event hierarchy you specify with TEvent. Useful for listening to generic events such as IAggregateCreatedEvent or IAggregateDeletedEvent Be aware that the concrete event received MUST still actually inherit TEvent or there will be an InvalidCastException IEventHandlerRegistrar<in TEvent> ForGenericEvent<THandledEvent>(Action<THandledEvent> handler) where THandledEvent : IEvent Parameters handler Action<THandledEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters THandledEvent ForWrapped<TWrapperEvent>(Action<TWrapperEvent>) IEventHandlerRegistrar<in TEvent> ForWrapped<TWrapperEvent>(Action<TWrapperEvent> handler) where TWrapperEvent : IWrapperEvent<in TEvent> Parameters handler Action<TWrapperEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters TWrapperEvent For<THandledEvent>(Action<THandledEvent>) Registers a handler for any event that implements THandledEvent. All matching handlers will be called in the order they were registered. IEventHandlerRegistrar<in TEvent> For<THandledEvent>(Action<THandledEvent> handler) where THandledEvent : TEvent Parameters handler Action<THandledEvent> Returns IEventHandlerRegistrar<TEvent> Type Parameters THandledEvent IgnoreAllUnhandled() IEventHandlerRegistrar<in TEvent> IgnoreAllUnhandled() Returns IEventHandlerRegistrar<TEvent> IgnoreUnhandled<TIgnored>() IEventHandlerRegistrar<in TEvent> IgnoreUnhandled<TIgnored>() where TIgnored : TEvent Returns IEventHandlerRegistrar<TEvent> Type Parameters TIgnored"
  },
  "api/Compze.Messaging.Events.IMutableEventDispatcher-1.html": {
    "href": "api/Compze.Messaging.Events.IMutableEventDispatcher-1.html",
    "title": "Interface IMutableEventDispatcher<TEvent> | Compze",
    "keywords": "Interface IMutableEventDispatcher<TEvent> Namespace Compze.Messaging.Events Assembly Compze.dll public interface IMutableEventDispatcher<in TEvent> : IEventDispatcher<TEvent> where TEvent : class, IEvent Type Parameters TEvent Inherited Members IEventDispatcher<TEvent>.Dispatch(TEvent) Extension Methods NullableCE.NotNull<T>(T?) Methods New() public static IMutableEventDispatcher<in TEvent> New() Returns IMutableEventDispatcher<TEvent> Register() Registers handlers for the incoming events. All matching handlers will be called in the order they were registered. IEventHandlerRegistrar<in TEvent> Register() Returns IEventHandlerRegistrar<TEvent>"
  },
  "api/Compze.Messaging.Events.ISingleAggregateQueryModel.html": {
    "href": "api/Compze.Messaging.Events.ISingleAggregateQueryModel.html",
    "title": "Interface ISingleAggregateQueryModel | Compze",
    "keywords": "Interface ISingleAggregateQueryModel Namespace Compze.Messaging.Events Assembly Compze.dll public interface ISingleAggregateQueryModel : IHasPersistentIdentity<Guid> Inherited Members IHasPersistentIdentity<Guid>.Id Extension Methods NullableCE.NotNull<T>(T?) Methods SetId(Guid) void SetId(Guid id) Parameters id Guid"
  },
  "api/Compze.Messaging.Events.html": {
    "href": "api/Compze.Messaging.Events.html",
    "title": "Namespace Compze.Messaging.Events | Compze",
    "keywords": "Namespace Compze.Messaging.Events Classes EventHandlerRegistrar EventUnhandledException Interfaces IEventDispatcher<TEvent> IEventHandlerRegistrar<TEvent> IMutableEventDispatcher<TEvent> ISingleAggregateQueryModel"
  },
  "api/Compze.Messaging.Hypermedia.ILocalHypermediaNavigator.html": {
    "href": "api/Compze.Messaging.Hypermedia.ILocalHypermediaNavigator.html",
    "title": "Interface ILocalHypermediaNavigator | Compze",
    "keywords": "Interface ILocalHypermediaNavigator Namespace Compze.Messaging.Hypermedia Assembly Compze.Messaging.dll Dispatches messages within a process. public interface ILocalHypermediaNavigator Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Execute(IStrictlyLocalCommand) Synchronously executes local handler for command. The handler takes part in the active transaction and guarantees consistent results within a transaction. void Execute(IStrictlyLocalCommand command) Parameters command IStrictlyLocalCommand Execute<TResult>(IStrictlyLocalCommand<TResult>) Synchronously executes local handler for command. The handler takes part in the active transaction and guarantees consistent results within a transaction. TResult Execute<TResult>(IStrictlyLocalCommand<TResult> command) Parameters command IStrictlyLocalCommand<TResult> Returns TResult Type Parameters TResult Execute<TQuery, TResult>(IStrictlyLocalQuery<TQuery, TResult>) Synchronously executes local handler for query. The handler takes part in the active transaction and guarantees consistent results within a transaction. TResult Execute<TQuery, TResult>(IStrictlyLocalQuery<TQuery, TResult> query) where TQuery : IStrictlyLocalQuery<TQuery, TResult> Parameters query IStrictlyLocalQuery<TQuery, TResult> Returns TResult Type Parameters TQuery TResult"
  },
  "api/Compze.Messaging.Hypermedia.IRemoteHypermediaNavigator.html": {
    "href": "api/Compze.Messaging.Hypermedia.IRemoteHypermediaNavigator.html",
    "title": "Interface IRemoteHypermediaNavigator | Compze",
    "keywords": "Interface IRemoteHypermediaNavigator Namespace Compze.Messaging.Hypermedia Assembly Compze.Messaging.dll public interface IRemoteHypermediaNavigator Extension Methods NavigationSpecificationMessageExtensions.NavigateAsync<TResult>(IRemoteHypermediaNavigator, NavigationSpecification<TResult>) NavigationSpecificationMessageExtensions.Navigate<TResult>(IRemoteHypermediaNavigator, NavigationSpecification<TResult>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods GetAsync<TResult>(IRemotableQuery<TResult>) Gets the result of a handler somewhere on the bus handling the query Task<TResult> GetAsync<TResult>(IRemotableQuery<TResult> query) Parameters query IRemotableQuery<TResult> Returns Task<TResult> Type Parameters TResult Get<TResult>(IRemotableQuery<TResult>) Synchronous wrapper for: GetAsync<TResult>(IRemotableQuery<TResult>). TResult Get<TResult>(IRemotableQuery<TResult> query) Parameters query IRemotableQuery<TResult> Returns TResult Type Parameters TResult Post(IAtMostOnceHypermediaCommand) void Post(IAtMostOnceHypermediaCommand command) Parameters command IAtMostOnceHypermediaCommand PostAsync(IAtMostOnceHypermediaCommand) Task PostAsync(IAtMostOnceHypermediaCommand command) Parameters command IAtMostOnceHypermediaCommand Returns Task PostAsync<TResult>(IAtMostOnceCommand<TResult>) Task<TResult> PostAsync<TResult>(IAtMostOnceCommand<TResult> command) Parameters command IAtMostOnceCommand<TResult> Returns Task<TResult> Type Parameters TResult Post<TResult>(IAtMostOnceCommand<TResult>) TResult Post<TResult>(IAtMostOnceCommand<TResult> command) Parameters command IAtMostOnceCommand<TResult> Returns TResult Type Parameters TResult"
  },
  "api/Compze.Messaging.Hypermedia.NavigationSpecification-1.html": {
    "href": "api/Compze.Messaging.Hypermedia.NavigationSpecification-1.html",
    "title": "Class NavigationSpecification<TResult> | Compze",
    "keywords": "Class NavigationSpecification<TResult> Namespace Compze.Messaging.Hypermedia Assembly Compze.Messaging.dll public abstract class NavigationSpecification<TResult> Type Parameters TResult Inheritance object NavigationSpecification<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EndpointRequestExecutor.ExecuteAsClientRequestOnAsync<TResult>(NavigationSpecification<TResult>, IEndpoint) EndpointRequestExecutor.ExecuteAsClientRequestOn<TResult>(NavigationSpecification<TResult>, IEndpoint) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Get<TNext>(Func<TResult, IRemotableQuery<TNext>>) public NavigationSpecification<TNext> Get<TNext>(Func<TResult, IRemotableQuery<TNext>> next) Parameters next Func<TResult, IRemotableQuery<TNext>> Returns NavigationSpecification<TNext> Type Parameters TNext NavigateOn(IRemoteHypermediaNavigator) public TResult NavigateOn(IRemoteHypermediaNavigator busSession) Parameters busSession IRemoteHypermediaNavigator Returns TResult NavigateOnAsync(IRemoteHypermediaNavigator) public abstract Task<TResult> NavigateOnAsync(IRemoteHypermediaNavigator busSession) Parameters busSession IRemoteHypermediaNavigator Returns Task<TResult> Post(Func<TResult, IAtMostOnceHypermediaCommand>) public NavigationSpecification Post(Func<TResult, IAtMostOnceHypermediaCommand> next) Parameters next Func<TResult, IAtMostOnceHypermediaCommand> Returns NavigationSpecification Post<TNext>(Func<TResult, IAtMostOnceCommand<TNext>>) public NavigationSpecification<TNext> Post<TNext>(Func<TResult, IAtMostOnceCommand<TNext>> next) Parameters next Func<TResult, IAtMostOnceCommand<TNext>> Returns NavigationSpecification<TNext> Type Parameters TNext Select<TNext>(Func<TResult, TNext>) public NavigationSpecification<TNext> Select<TNext>(Func<TResult, TNext> select) Parameters select Func<TResult, TNext> Returns NavigationSpecification<TNext> Type Parameters TNext"
  },
  "api/Compze.Messaging.Hypermedia.NavigationSpecification.html": {
    "href": "api/Compze.Messaging.Hypermedia.NavigationSpecification.html",
    "title": "Class NavigationSpecification | Compze",
    "keywords": "Class NavigationSpecification Namespace Compze.Messaging.Hypermedia Assembly Compze.Messaging.dll public abstract class NavigationSpecification Inheritance object NavigationSpecification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods EndpointRequestExecutor.ExecuteAsClientRequestOn(NavigationSpecification, IEndpoint) EndpointRequestExecutor.ExecuteAsClientRequestOnAsync(NavigationSpecification, IEndpoint) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Get<TResult>(IRemotableQuery<TResult>) public static NavigationSpecification<TResult> Get<TResult>(IRemotableQuery<TResult> query) Parameters query IRemotableQuery<TResult> Returns NavigationSpecification<TResult> Type Parameters TResult NavigateOn(IRemoteHypermediaNavigator) public void NavigateOn(IRemoteHypermediaNavigator busSession) Parameters busSession IRemoteHypermediaNavigator NavigateOnAsync(IRemoteHypermediaNavigator) public abstract Task NavigateOnAsync(IRemoteHypermediaNavigator busSession) Parameters busSession IRemoteHypermediaNavigator Returns Task Post(IAtMostOnceHypermediaCommand) public static NavigationSpecification Post(IAtMostOnceHypermediaCommand command) Parameters command IAtMostOnceHypermediaCommand Returns NavigationSpecification Post<TResult>(IAtMostOnceCommand<TResult>) public static NavigationSpecification<TResult> Post<TResult>(IAtMostOnceCommand<TResult> command) Parameters command IAtMostOnceCommand<TResult> Returns NavigationSpecification<TResult> Type Parameters TResult"
  },
  "api/Compze.Messaging.Hypermedia.NavigationSpecificationMessageExtensions.html": {
    "href": "api/Compze.Messaging.Hypermedia.NavigationSpecificationMessageExtensions.html",
    "title": "Class NavigationSpecificationMessageExtensions | Compze",
    "keywords": "Class NavigationSpecificationMessageExtensions Namespace Compze.Messaging.Hypermedia Assembly Compze.Messaging.dll public static class NavigationSpecificationMessageExtensions Inheritance object NavigationSpecificationMessageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetOn<TResult>(IRemotableQuery<TResult>, IRemoteHypermediaNavigator) public static TResult GetOn<TResult>(this IRemotableQuery<TResult> query, IRemoteHypermediaNavigator bus) Parameters query IRemotableQuery<TResult> bus IRemoteHypermediaNavigator Returns TResult Type Parameters TResult Get<TResult>(IRemotableQuery<TResult>) public static NavigationSpecification<TResult> Get<TResult>(this IRemotableQuery<TResult> query) Parameters query IRemotableQuery<TResult> Returns NavigationSpecification<TResult> Type Parameters TResult NavigateAsync<TResult>(IRemoteHypermediaNavigator, NavigationSpecification<TResult>) public static Task<TResult> NavigateAsync<TResult>(this IRemoteHypermediaNavigator navigator, NavigationSpecification<TResult> navigationSpecification) Parameters navigator IRemoteHypermediaNavigator navigationSpecification NavigationSpecification<TResult> Returns Task<TResult> Type Parameters TResult Navigate<TResult>(IRemoteHypermediaNavigator, NavigationSpecification<TResult>) public static TResult Navigate<TResult>(this IRemoteHypermediaNavigator navigator, NavigationSpecification<TResult> navigationSpecification) Parameters navigator IRemoteHypermediaNavigator navigationSpecification NavigationSpecification<TResult> Returns TResult Type Parameters TResult Post(IAtMostOnceHypermediaCommand) public static NavigationSpecification Post(this IAtMostOnceHypermediaCommand command) Parameters command IAtMostOnceHypermediaCommand Returns NavigationSpecification PostOn<TResult>(IAtMostOnceCommand<TResult>, IRemoteHypermediaNavigator) public static TResult PostOn<TResult>(this IAtMostOnceCommand<TResult> command, IRemoteHypermediaNavigator bus) Parameters command IAtMostOnceCommand<TResult> bus IRemoteHypermediaNavigator Returns TResult Type Parameters TResult Post<TResult>(IAtMostOnceCommand<TResult>) public static NavigationSpecification<TResult> Post<TResult>(this IAtMostOnceCommand<TResult> command) Parameters command IAtMostOnceCommand<TResult> Returns NavigationSpecification<TResult> Type Parameters TResult"
  },
  "api/Compze.Messaging.Hypermedia.html": {
    "href": "api/Compze.Messaging.Hypermedia.html",
    "title": "Namespace Compze.Messaging.Hypermedia | Compze",
    "keywords": "Namespace Compze.Messaging.Hypermedia Classes NavigationSpecification NavigationSpecificationMessageExtensions NavigationSpecification<TResult> Interfaces ILocalHypermediaNavigator Dispatches messages within a process. IRemoteHypermediaNavigator"
  },
  "api/Compze.Messaging.IAtMostOnceCommand-1.html": {
    "href": "api/Compze.Messaging.IAtMostOnceCommand-1.html",
    "title": "Interface IAtMostOnceCommand<TResult> | Compze",
    "keywords": "Interface IAtMostOnceCommand<TResult> Namespace Compze.Messaging Assembly Compze.dll public interface IAtMostOnceCommand<out TResult> : IAtMostOnceHypermediaCommand, IAtMostOnceMessage, IMustBeHandledTransactionally, IRemotableCommand<TResult>, IRemotableCommand, IRemotableMessage, ICommand<TResult>, ICommand, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Inherited Members IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IAtMostOnceHypermediaCommand.html": {
    "href": "api/Compze.Messaging.IAtMostOnceHypermediaCommand.html",
    "title": "Interface IAtMostOnceHypermediaCommand | Compze",
    "keywords": "Interface IAtMostOnceHypermediaCommand Namespace Compze.Messaging Assembly Compze.dll public interface IAtMostOnceHypermediaCommand : IAtMostOnceMessage, IMustBeHandledTransactionally, IRemotableCommand, ICommand, IRemotableMessage, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Inherited Members IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IAtMostOnceMessage.html": {
    "href": "api/Compze.Messaging.IAtMostOnceMessage.html",
    "title": "Interface IAtMostOnceMessage | Compze",
    "keywords": "Interface IAtMostOnceMessage Namespace Compze.Messaging Assembly Compze.dll A message that is guaranteed not to be delivered more than once. The MessageId is used by infrastructure to maintain this guarantee. The MessageId must be maintained when binding a command to a UI or the guarantee will be lost. public interface IAtMostOnceMessage : IRemotableMessage, IMustBeHandledTransactionally, IMessage Extension Methods NullableCE.NotNull<T>(T?) Properties MessageId Used by the infrastructure to guarantee that the same message is never delivered more than once. Must be generated when the message is created and then NEVER modified. Must be maintained when binding a command in a UI etc. Guid MessageId { get; } Property Value Guid"
  },
  "api/Compze.Messaging.ICannotBeSentRemotelyFromWithinTransaction.html": {
    "href": "api/Compze.Messaging.ICannotBeSentRemotelyFromWithinTransaction.html",
    "title": "Interface ICannotBeSentRemotelyFromWithinTransaction | Compze",
    "keywords": "Interface ICannotBeSentRemotelyFromWithinTransaction Namespace Compze.Messaging Assembly Compze.dll public interface ICannotBeSentRemotelyFromWithinTransaction : IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.ICommand-1.html": {
    "href": "api/Compze.Messaging.ICommand-1.html",
    "title": "Interface ICommand<TResult> | Compze",
    "keywords": "Interface ICommand<TResult> Namespace Compze.Messaging Assembly Compze.dll public interface ICommand<out TResult> : ICommand, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.ICommand.html": {
    "href": "api/Compze.Messaging.ICommand.html",
    "title": "Interface ICommand | Compze",
    "keywords": "Interface ICommand Namespace Compze.Messaging Assembly Compze.dll public interface ICommand : IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.ICreateMyOwnResultQuery-1.html": {
    "href": "api/Compze.Messaging.ICreateMyOwnResultQuery-1.html",
    "title": "Interface ICreateMyOwnResultQuery<TResult> | Compze",
    "keywords": "Interface ICreateMyOwnResultQuery<TResult> Namespace Compze.Messaging Assembly Compze.CQRS.dll Many resources in a hypermedia API do not actually need access to backend data. The data in the query is sufficient to create the result. For such queries implement this interface. That way no network roundtrip etc is required to perform the query. Greatly enhancing performance public interface ICreateMyOwnResultQuery<out TResult> : IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods CreateResult() TResult CreateResult() Returns TResult"
  },
  "api/Compze.Messaging.IEvent.html": {
    "href": "api/Compze.Messaging.IEvent.html",
    "title": "Interface IEvent | Compze",
    "keywords": "Interface IEvent Namespace Compze.Messaging Assembly Compze.dll public interface IEvent : IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IExactlyOnceCommand.html": {
    "href": "api/Compze.Messaging.IExactlyOnceCommand.html",
    "title": "Interface IExactlyOnceCommand | Compze",
    "keywords": "Interface IExactlyOnceCommand Namespace Compze.Messaging Assembly Compze.dll public interface IExactlyOnceCommand : IRemotableCommand, ICommand, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IExactlyOnceEvent.html": {
    "href": "api/Compze.Messaging.IExactlyOnceEvent.html",
    "title": "Interface IExactlyOnceEvent | Compze",
    "keywords": "Interface IExactlyOnceEvent Namespace Compze.Messaging Assembly Compze.dll public interface IExactlyOnceEvent : IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IExactlyOnceMessage.html": {
    "href": "api/Compze.Messaging.IExactlyOnceMessage.html",
    "title": "Interface IExactlyOnceMessage | Compze",
    "keywords": "Interface IExactlyOnceMessage Namespace Compze.Messaging Assembly Compze.dll public interface IExactlyOnceMessage : IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IExactlyOnceWrapperEvent-1.html": {
    "href": "api/Compze.Messaging.IExactlyOnceWrapperEvent-1.html",
    "title": "Interface IExactlyOnceWrapperEvent<TEventInterface> | Compze",
    "keywords": "Interface IExactlyOnceWrapperEvent<TEventInterface> Namespace Compze.Messaging Assembly Compze.dll public interface IExactlyOnceWrapperEvent<out TEventInterface> : IWrapperEvent<TEventInterface>, IEvent, IMessage where TEventInterface : IExactlyOnceEvent Type Parameters TEventInterface Inherited Members IWrapperEvent<TEventInterface>.Event Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IHasReturnValue-1.html": {
    "href": "api/Compze.Messaging.IHasReturnValue-1.html",
    "title": "Interface IHasReturnValue<TResult> | Compze",
    "keywords": "Interface IHasReturnValue<TResult> Namespace Compze.Messaging Assembly Compze.dll public interface IHasReturnValue<out TResult> : IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IHypermediaMessage.html": {
    "href": "api/Compze.Messaging.IHypermediaMessage.html",
    "title": "Interface IHypermediaMessage | Compze",
    "keywords": "Interface IHypermediaMessage Namespace Compze.Messaging Assembly Compze.dll public interface IHypermediaMessage : IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IMessage.html": {
    "href": "api/Compze.Messaging.IMessage.html",
    "title": "Interface IMessage | Compze",
    "keywords": "Interface IMessage Namespace Compze.Messaging Assembly Compze.dll public interface IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IMustBeHandledTransactionally.html": {
    "href": "api/Compze.Messaging.IMustBeHandledTransactionally.html",
    "title": "Interface IMustBeHandledTransactionally | Compze",
    "keywords": "Interface IMustBeHandledTransactionally Namespace Compze.Messaging Assembly Compze.dll public interface IMustBeHandledTransactionally : IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IMustBeSentAndHandledTransactionally.html": {
    "href": "api/Compze.Messaging.IMustBeSentAndHandledTransactionally.html",
    "title": "Interface IMustBeSentAndHandledTransactionally | Compze",
    "keywords": "Interface IMustBeSentAndHandledTransactionally Namespace Compze.Messaging Assembly Compze.dll public interface IMustBeSentAndHandledTransactionally : IMustBeSentTransactionally, IMustBeHandledTransactionally, IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IMustBeSentTransactionally.html": {
    "href": "api/Compze.Messaging.IMustBeSentTransactionally.html",
    "title": "Interface IMustBeSentTransactionally | Compze",
    "keywords": "Interface IMustBeSentTransactionally Namespace Compze.Messaging Assembly Compze.dll public interface IMustBeSentTransactionally : IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IQuery-1.html": {
    "href": "api/Compze.Messaging.IQuery-1.html",
    "title": "Interface IQuery<TResult> | Compze",
    "keywords": "Interface IQuery<TResult> Namespace Compze.Messaging Assembly Compze.dll An instructs the receiver to return a result based upon the data in the query. public interface IQuery<out TResult> : IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IRemotableCommand-1.html": {
    "href": "api/Compze.Messaging.IRemotableCommand-1.html",
    "title": "Interface IRemotableCommand<TResult> | Compze",
    "keywords": "Interface IRemotableCommand<TResult> Namespace Compze.Messaging Assembly Compze.dll public interface IRemotableCommand<out TResult> : IRemotableCommand, IRemotableMessage, ICommand<TResult>, ICommand, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IRemotableCommand.html": {
    "href": "api/Compze.Messaging.IRemotableCommand.html",
    "title": "Interface IRemotableCommand | Compze",
    "keywords": "Interface IRemotableCommand Namespace Compze.Messaging Assembly Compze.dll public interface IRemotableCommand : ICommand, IRemotableMessage, IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IRemotableCreateMyOwnResultQuery-1.html": {
    "href": "api/Compze.Messaging.IRemotableCreateMyOwnResultQuery-1.html",
    "title": "Interface IRemotableCreateMyOwnResultQuery<TResult> | Compze",
    "keywords": "Interface IRemotableCreateMyOwnResultQuery<TResult> Namespace Compze.Messaging Assembly Compze.CQRS.dll public interface IRemotableCreateMyOwnResultQuery<out TResult> : IRemotableQuery<TResult>, IRemotableMessage, ICreateMyOwnResultQuery<TResult>, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Inherited Members ICreateMyOwnResultQuery<TResult>.CreateResult() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) NavigationSpecificationMessageExtensions.GetOn<TResult>(IRemotableQuery<TResult>, IRemoteHypermediaNavigator) NavigationSpecificationMessageExtensions.Get<TResult>(IRemotableQuery<TResult>) ObjectCE.ToStringNotNull(object)"
  },
  "api/Compze.Messaging.IRemotableEvent.html": {
    "href": "api/Compze.Messaging.IRemotableEvent.html",
    "title": "Interface IRemotableEvent | Compze",
    "keywords": "Interface IRemotableEvent Namespace Compze.Messaging Assembly Compze.dll public interface IRemotableEvent : IRemotableMessage, IEvent, IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IRemotableMessage.html": {
    "href": "api/Compze.Messaging.IRemotableMessage.html",
    "title": "Interface IRemotableMessage | Compze",
    "keywords": "Interface IRemotableMessage Namespace Compze.Messaging Assembly Compze.dll public interface IRemotableMessage : IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IRemotableQuery-1.html": {
    "href": "api/Compze.Messaging.IRemotableQuery-1.html",
    "title": "Interface IRemotableQuery<TResult> | Compze",
    "keywords": "Interface IRemotableQuery<TResult> Namespace Compze.Messaging Assembly Compze.dll public interface IRemotableQuery<out TResult> : IRemotableMessage, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IRequireAResponse.html": {
    "href": "api/Compze.Messaging.IRequireAResponse.html",
    "title": "Interface IRequireAResponse | Compze",
    "keywords": "Interface IRequireAResponse Namespace Compze.Messaging Assembly Compze.dll public interface IRequireAResponse : ICannotBeSentRemotelyFromWithinTransaction, IMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IStrictlyLocalCommand-1.html": {
    "href": "api/Compze.Messaging.IStrictlyLocalCommand-1.html",
    "title": "Interface IStrictlyLocalCommand<TResult> | Compze",
    "keywords": "Interface IStrictlyLocalCommand<TResult> Namespace Compze.Messaging Assembly Compze.dll public interface IStrictlyLocalCommand<out TResult> : ICommand<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage Type Parameters TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IStrictlyLocalCommand.html": {
    "href": "api/Compze.Messaging.IStrictlyLocalCommand.html",
    "title": "Interface IStrictlyLocalCommand | Compze",
    "keywords": "Interface IStrictlyLocalCommand Namespace Compze.Messaging Assembly Compze.dll public interface IStrictlyLocalCommand : ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IStrictlyLocalEvent.html": {
    "href": "api/Compze.Messaging.IStrictlyLocalEvent.html",
    "title": "Interface IStrictlyLocalEvent | Compze",
    "keywords": "Interface IStrictlyLocalEvent Namespace Compze.Messaging Assembly Compze.dll public interface IStrictlyLocalEvent : IEvent, IMessage, IStrictlyLocalMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IStrictlyLocalMessage.html": {
    "href": "api/Compze.Messaging.IStrictlyLocalMessage.html",
    "title": "Interface IStrictlyLocalMessage | Compze",
    "keywords": "Interface IStrictlyLocalMessage Namespace Compze.Messaging Assembly Compze.dll public interface IStrictlyLocalMessage Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IStrictlyLocalQuery-2.html": {
    "href": "api/Compze.Messaging.IStrictlyLocalQuery-2.html",
    "title": "Interface IStrictlyLocalQuery<TQuery, TResult> | Compze",
    "keywords": "Interface IStrictlyLocalQuery<TQuery, TResult> Namespace Compze.Messaging Assembly Compze.dll public interface IStrictlyLocalQuery<TQuery, out TResult> : IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TQuery : IStrictlyLocalQuery<TQuery, out TResult> Type Parameters TQuery TResult Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Messaging.IWrapperEvent-1.html": {
    "href": "api/Compze.Messaging.IWrapperEvent-1.html",
    "title": "Interface IWrapperEvent<TEvent> | Compze",
    "keywords": "Interface IWrapperEvent<TEvent> Namespace Compze.Messaging Assembly Compze.dll public interface IWrapperEvent<out TEvent> : IEvent, IMessage where TEvent : IEvent Type Parameters TEvent Extension Methods NullableCE.NotNull<T>(T?) Properties Event TEvent Event { get; } Property Value TEvent"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand-1.html",
    "title": "Class MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand<TResult> | Compze",
    "keywords": "Class MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll public class MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand<TResult> : MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand, IAtMostOnceCommand<TResult>, IAtMostOnceHypermediaCommand, IAtMostOnceMessage, IMustBeHandledTransactionally, IRemotableCommand<TResult>, IRemotableCommand, IRemotableMessage, ICommand<TResult>, ICommand, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Inheritance object MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand<TResult> Implements IAtMostOnceCommand<TResult> IAtMostOnceHypermediaCommand IAtMostOnceMessage IMustBeHandledTransactionally IRemotableCommand<TResult> IRemotableCommand IRemotableMessage ICommand<TResult> ICommand IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage Inherited Members MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.MessageId MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.ReplaceDeduplicationId() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NavigationSpecificationMessageExtensions.PostOn<TResult>(IAtMostOnceCommand<TResult>, IRemoteHypermediaNavigator) NavigationSpecificationMessageExtensions.Post<TResult>(IAtMostOnceCommand<TResult>) NavigationSpecificationMessageExtensions.Post(IAtMostOnceHypermediaCommand) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors AtMostOnceCommand(DeduplicationIdHandling) It is important not to set a default value if we are binding values in a UI. That would make it very easy to accidentally break the At most once guarantee. That is why you must pass the enum value here so that we can know what is happening. protected AtMostOnceCommand(MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling scenario) Parameters scenario MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling.html",
    "title": "Enum MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling | Compze",
    "keywords": "Enum MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling Namespace Compze.Messaging Assembly Compze.Messaging.dll How and when a MessageId is generated is vital to correctly maintain the At most once delivery guarantee. When creating the command in the backend service we must generate a new MessageId. When binding the command in a UI we must reuse the MessageId generated by the backend. This enum helps make that important distinction explicit in your code. protected enum MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling Extension Methods AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Fields Create = 0 When creating the command within the owning handler endpoint a new MessageId must be generated. Reuse = 1 When binding the command in a UI or when deserializing it is very important to NOT create a new MessageId as this would break the At most once delivery guarantee."
  },
  "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.html",
    "title": "Class MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand | Compze",
    "keywords": "Class MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand Namespace Compze.Messaging Assembly Compze.Messaging.dll public class MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand : IAtMostOnceHypermediaCommand, IAtMostOnceMessage, IMustBeHandledTransactionally, IRemotableCommand, ICommand, IRemotableMessage, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Inheritance object MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand Implements IAtMostOnceHypermediaCommand IAtMostOnceMessage IMustBeHandledTransactionally IRemotableCommand ICommand IRemotableMessage IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage Derived MessageTypes.Remotable.AtMostOnce.AtMostOnceCommand<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NavigationSpecificationMessageExtensions.Post(IAtMostOnceHypermediaCommand) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors AtMostOnceHypermediaCommand(DeduplicationIdHandling) How and when a MessageId is generated is vital to correctly maintain the At most once delivery guarantee. When creating the command in the backend service we must generate a new MessageId. When binding the command in a UI we must reuse the MessageId generated by the backend. protected AtMostOnceHypermediaCommand(MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling scenario) Parameters scenario MessageTypes.Remotable.AtMostOnce.AtMostOnceHypermediaCommand.DeduplicationIdHandling Properties MessageId Used by the infrastructure to guarantee that the same message is never delivered more than once. Must be generated when the message is created and then NEVER modified. Must be maintained when binding a command in a UI etc. public Guid MessageId { get; set; } Property Value Guid Methods ReplaceDeduplicationId() Allows for replacing the MessageId in the rare cases when that is actually helpful. One example is when a command failed to execute due to backend business logic rules and you wish to reuse the entered values in the UI that the command is bound to. If you do not change the MessageId when doing that the bus will keep returning the response from the first time you sent the command. public void ReplaceDeduplicationId()"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.AtMostOnce.html",
    "title": "Class MessageTypes.Remotable.AtMostOnce | Compze",
    "keywords": "Class MessageTypes.Remotable.AtMostOnce Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.Remotable.AtMostOnce Inheritance object MessageTypes.Remotable.AtMostOnce Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.ExactlyOnce.Command.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.ExactlyOnce.Command.html",
    "title": "Class MessageTypes.Remotable.ExactlyOnce.Command | Compze",
    "keywords": "Class MessageTypes.Remotable.ExactlyOnce.Command Namespace Compze.Messaging Assembly Compze.Messaging.dll public class MessageTypes.Remotable.ExactlyOnce.Command : IExactlyOnceCommand, IRemotableCommand, ICommand, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inheritance object MessageTypes.Remotable.ExactlyOnce.Command Implements IExactlyOnceCommand IRemotableCommand ICommand IExactlyOnceMessage IMustBeSentAndHandledTransactionally IMustBeSentTransactionally IAtMostOnceMessage IRemotableMessage IMustBeHandledTransactionally IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors Command() protected Command() Properties MessageId Used by the infrastructure to guarantee that the same message is never delivered more than once. Must be generated when the message is created and then NEVER modified. Must be maintained when binding a command in a UI etc. public Guid MessageId { get; } Property Value Guid"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.ExactlyOnce.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.ExactlyOnce.html",
    "title": "Class MessageTypes.Remotable.ExactlyOnce | Compze",
    "keywords": "Class MessageTypes.Remotable.ExactlyOnce Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.Remotable.ExactlyOnce Inheritance object MessageTypes.Remotable.ExactlyOnce Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.EntityLink-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.EntityLink-1.html",
    "title": "Class MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult> | Compze",
    "keywords": "Class MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll public class MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult> : MessageTypes.Remotable.NonTransactional.Queries.Query<TResult>, IRemotableQuery<TResult>, IRemotableMessage, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage where TResult : IHasPersistentIdentity<Guid> Type Parameters TResult Inheritance object MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult> Implements IRemotableQuery<TResult> IRemotableMessage IQuery<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NavigationSpecificationMessageExtensions.GetOn<TResult>(IRemotableQuery<TResult>, IRemoteHypermediaNavigator) NavigationSpecificationMessageExtensions.Get<TResult>(IRemotableQuery<TResult>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors EntityLink() public EntityLink() EntityLink(Guid) public EntityLink(Guid entityId) Parameters entityId Guid Properties EntityId public Guid EntityId { get; } Property Value Guid Methods WithId(Guid) public MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult> WithId(Guid id) Parameters id Guid Returns MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult>"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery-1.html",
    "title": "Class MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery<TResult> | Compze",
    "keywords": "Class MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll Implement IRemotableCreateMyOwnResultQuery<TResult> by passing a func to this base class. public abstract class MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery<TResult> : MessageTypes.Remotable.NonTransactional.Queries.Query<TResult>, IRemotableQuery<TResult>, IRemotableMessage, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Inheritance object MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery<TResult> Implements IRemotableQuery<TResult> IRemotableMessage IQuery<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NavigationSpecificationMessageExtensions.GetOn<TResult>(IRemotableQuery<TResult>, IRemoteHypermediaNavigator) NavigationSpecificationMessageExtensions.Get<TResult>(IRemotableQuery<TResult>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors FuncResultQuery(Func<TResult>) Implement IRemotableCreateMyOwnResultQuery<TResult> by passing a func to this base class. protected FuncResultQuery(Func<TResult> factory) Parameters factory Func<TResult> Methods CreateResult() public TResult CreateResult() Returns TResult"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink-1.html",
    "title": "Class MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink<TResult> | Compze",
    "keywords": "Class MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll Implements IRemotableCreateMyOwnResultQuery<TResult> by calling the default constructor on TResult public class MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink<TResult> : MessageTypes.Remotable.NonTransactional.Queries.Query<TResult>, IRemotableQuery<TResult>, IRemotableMessage, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Inheritance object MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink<TResult> Implements IRemotableQuery<TResult> IRemotableMessage IQuery<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NavigationSpecificationMessageExtensions.GetOn<TResult>(IRemotableQuery<TResult>, IRemoteHypermediaNavigator) NavigationSpecificationMessageExtensions.Get<TResult>(IRemotableQuery<TResult>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods CreateResult() public TResult CreateResult() Returns TResult"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.Query-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.Query-1.html",
    "title": "Class MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> | Compze",
    "keywords": "Class MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll public abstract class MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> : IRemotableQuery<TResult>, IRemotableMessage, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage Type Parameters TResult Inheritance object MessageTypes.Remotable.NonTransactional.Queries.Query<TResult> Implements IRemotableQuery<TResult> IRemotableMessage IQuery<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage Derived MessageTypes.Remotable.NonTransactional.Queries.EntityLink<TResult> MessageTypes.Remotable.NonTransactional.Queries.FuncResultQuery<TResult> MessageTypes.Remotable.NonTransactional.Queries.NewableResultLink<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NavigationSpecificationMessageExtensions.GetOn<TResult>(IRemotableQuery<TResult>, IRemoteHypermediaNavigator) NavigationSpecificationMessageExtensions.Get<TResult>(IRemotableQuery<TResult>) NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.Queries.html",
    "title": "Class MessageTypes.Remotable.NonTransactional.Queries | Compze",
    "keywords": "Class MessageTypes.Remotable.NonTransactional.Queries Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.Remotable.NonTransactional.Queries Inheritance object MessageTypes.Remotable.NonTransactional.Queries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.NonTransactional.html",
    "title": "Class MessageTypes.Remotable.NonTransactional | Compze",
    "keywords": "Class MessageTypes.Remotable.NonTransactional Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.Remotable.NonTransactional Inheritance object MessageTypes.Remotable.NonTransactional Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.Remotable.html": {
    "href": "api/Compze.Messaging.MessageTypes.Remotable.html",
    "title": "Class MessageTypes.Remotable | Compze",
    "keywords": "Class MessageTypes.Remotable Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.Remotable Inheritance object MessageTypes.Remotable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand-1.html",
    "title": "Class MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand<TResult> | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll public abstract class MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand<TResult> : IStrictlyLocalCommand<TResult>, ICommand<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage Type Parameters TResult Inheritance object MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand<TResult> Implements IStrictlyLocalCommand<TResult> ICommand<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IStrictlyLocalCommand ICommand IMustBeSentTransactionally IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand.html",
    "title": "Class MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand Namespace Compze.Messaging Assembly Compze.Messaging.dll public abstract class MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand : IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage Inheritance object MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand Implements IStrictlyLocalCommand ICommand IMustBeSentTransactionally IMessage IStrictlyLocalMessage Derived DocumentDbApi.Command.DeleteDocument<TDocument> DocumentDbApi.Command.SaveDocument<TDocument> EventStoreApi.CommandApi.SaveAggregate<TAggregate> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.Commands.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.Commands.html",
    "title": "Class MessageTypes.StrictlyLocal.Commands | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal.Commands Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.StrictlyLocal.Commands Inheritance object MessageTypes.StrictlyLocal.Commands Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.Queries.EntityLink-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.Queries.EntityLink-1.html",
    "title": "Class MessageTypes.StrictlyLocal.Queries.EntityLink<TResult> | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal.Queries.EntityLink<TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll public sealed class MessageTypes.StrictlyLocal.Queries.EntityLink<TResult> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<MessageTypes.StrictlyLocal.Queries.EntityLink<TResult>, TResult>, IStrictlyLocalQuery<MessageTypes.StrictlyLocal.Queries.EntityLink<TResult>, TResult>, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TResult : IHasPersistentIdentity<Guid> Type Parameters TResult Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<MessageTypes.StrictlyLocal.Queries.EntityLink<TResult>, TResult> MessageTypes.StrictlyLocal.Queries.EntityLink<TResult> Implements IStrictlyLocalQuery<MessageTypes.StrictlyLocal.Queries.EntityLink<TResult>, TResult> IQuery<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors EntityLink(Guid) [JsonConstructor] public EntityLink(Guid entityId) Parameters entityId Guid Properties EntityId public Guid EntityId { get; } Property Value Guid"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery-2.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery-2.html",
    "title": "Class MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<TQuery, TResult> | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<TQuery, TResult> Namespace Compze.Messaging Assembly Compze.Messaging.dll public abstract class MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<TQuery, TResult> : IStrictlyLocalQuery<TQuery, TResult>, IQuery<TResult>, IHasReturnValue<TResult>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TQuery : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<TQuery, TResult> Type Parameters TQuery TResult Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<TQuery, TResult> Implements IStrictlyLocalQuery<TQuery, TResult> IQuery<TResult> IHasReturnValue<TResult> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Derived MessageTypes.StrictlyLocal.Queries.EntityLink<TResult> DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> DocumentDbApi.QueryApi.TryGetDocument<TDocument> EventStoreApi.QueryApi.AggregateLink<TAggregate> EventStoreApi.QueryApi.GetAggregateHistory<TEvent> EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.Queries.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.Queries.html",
    "title": "Class MessageTypes.StrictlyLocal.Queries | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal.Queries Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.StrictlyLocal.Queries Inheritance object MessageTypes.StrictlyLocal.Queries Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.StrictlyLocal.html": {
    "href": "api/Compze.Messaging.MessageTypes.StrictlyLocal.html",
    "title": "Class MessageTypes.StrictlyLocal | Compze",
    "keywords": "Class MessageTypes.StrictlyLocal Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes.StrictlyLocal Inheritance object MessageTypes.StrictlyLocal Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.MessageTypes.WrapperEvent-1.html": {
    "href": "api/Compze.Messaging.MessageTypes.WrapperEvent-1.html",
    "title": "Class MessageTypes.WrapperEvent<TEventInterface> | Compze",
    "keywords": "Class MessageTypes.WrapperEvent<TEventInterface> Namespace Compze.Messaging Assembly Compze.CQRS.dll public class MessageTypes.WrapperEvent<TEventInterface> : IWrapperEvent<TEventInterface>, IEvent, IMessage where TEventInterface : IEvent Type Parameters TEventInterface Inheritance object MessageTypes.WrapperEvent<TEventInterface> Implements IWrapperEvent<TEventInterface> IEvent IMessage Derived AggregateEvent<TBaseEventInterface> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors WrapperEvent(TEventInterface) public WrapperEvent(TEventInterface @event) Parameters event TEventInterface Properties Event public TEventInterface Event { get; } Property Value TEventInterface"
  },
  "api/Compze.Messaging.MessageTypes.WrapperEvent.html": {
    "href": "api/Compze.Messaging.MessageTypes.WrapperEvent.html",
    "title": "Class MessageTypes.WrapperEvent | Compze",
    "keywords": "Class MessageTypes.WrapperEvent Namespace Compze.Messaging Assembly Compze.CQRS.dll public static class MessageTypes.WrapperEvent Inheritance object MessageTypes.WrapperEvent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WrapEvent(IEvent) public static IWrapperEvent<IEvent> WrapEvent(IEvent theEvent) Parameters theEvent IEvent Returns IWrapperEvent<IEvent> WrapEvent<TWrappedEvent>(TWrappedEvent) public static IWrapperEvent<TWrappedEvent> WrapEvent<TWrappedEvent>(TWrappedEvent theEvent) where TWrappedEvent : IEvent Parameters theEvent TWrappedEvent Returns IWrapperEvent<TWrappedEvent> Type Parameters TWrappedEvent WrapEvent<TWrapperEvent, TWrappedEvent>(TWrappedEvent) public static TWrapperEvent WrapEvent<TWrapperEvent, TWrappedEvent>(TWrappedEvent theEvent) where TWrapperEvent : IWrapperEvent<TWrappedEvent> where TWrappedEvent : IEvent Parameters theEvent TWrappedEvent Returns TWrapperEvent Type Parameters TWrapperEvent TWrappedEvent WrapperConstructorFor(Type) public static Func<IEvent, IWrapperEvent<IEvent>> WrapperConstructorFor(Type wrappedEventType) Parameters wrappedEventType Type Returns Func<IEvent, IWrapperEvent<IEvent>>"
  },
  "api/Compze.Messaging.MessageTypes.html": {
    "href": "api/Compze.Messaging.MessageTypes.html",
    "title": "Class MessageTypes | Compze",
    "keywords": "Class MessageTypes Namespace Compze.Messaging Assembly Compze.Messaging.dll public static class MessageTypes Inheritance object MessageTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.Messaging.WrapperEvent-1.html": {
    "href": "api/Compze.Messaging.WrapperEvent-1.html",
    "title": "Class WrapperEvent<TEventInterface> | Compze",
    "keywords": "Class WrapperEvent<TEventInterface> Namespace Compze.Messaging Assembly Compze.dll public class WrapperEvent<TEventInterface> : IWrapperEvent<TEventInterface>, IEvent, IMessage where TEventInterface : IEvent Type Parameters TEventInterface Inheritance object WrapperEvent<TEventInterface> Implements IWrapperEvent<TEventInterface> IEvent IMessage Derived AggregateWrapperEvent<TBaseEventInterface> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors WrapperEvent(TEventInterface) public WrapperEvent(TEventInterface @event) Parameters event TEventInterface Properties Event public TEventInterface Event { get; } Property Value TEventInterface"
  },
  "api/Compze.Messaging.html": {
    "href": "api/Compze.Messaging.html",
    "title": "Namespace Compze.Messaging | Compze",
    "keywords": "Namespace Compze.Messaging Namespaces Compze.Messaging.Events Classes WrapperEvent<TEventInterface> Interfaces IAtMostOnceCommand<TResult> IAtMostOnceHypermediaCommand IAtMostOnceMessage A message that is guaranteed not to be delivered more than once. The MessageId is used by infrastructure to maintain this guarantee. The MessageId must be maintained when binding a command to a UI or the guarantee will be lost. ICannotBeSentRemotelyFromWithinTransaction ICommand ICommand<TResult> IEvent IExactlyOnceCommand IExactlyOnceEvent IExactlyOnceMessage IExactlyOnceWrapperEvent<TEventInterface> IHasReturnValue<TResult> IHypermediaMessage IMessage IMustBeHandledTransactionally IMustBeSentAndHandledTransactionally IMustBeSentTransactionally IQuery<TResult> An instructs the receiver to return a result based upon the data in the query. IRemotableCommand IRemotableCommand<TResult> IRemotableEvent IRemotableMessage IRemotableQuery<TResult> IRequireAResponse IStrictlyLocalCommand IStrictlyLocalCommand<TResult> IStrictlyLocalEvent IStrictlyLocalMessage IStrictlyLocalQuery<TQuery, TResult> IWrapperEvent<TEvent>"
  },
  "api/Compze.Persistence.Common.DependencyInjection.DocumentDbRegistrar.html": {
    "href": "api/Compze.Persistence.Common.DependencyInjection.DocumentDbRegistrar.html",
    "title": "Class DocumentDbRegistrar | Compze",
    "keywords": "Class DocumentDbRegistrar Namespace Compze.Persistence.Common.DependencyInjection Assembly Compze.ExternalDependencies.dll public static class DocumentDbRegistrar Inheritance object DocumentDbRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterDocumentDb(IDependencyInjectionContainer, string) public static DocumentDbRegistrationBuilder RegisterDocumentDb(this IDependencyInjectionContainer @this, string connectionName) Parameters this IDependencyInjectionContainer connectionName string Returns DocumentDbRegistrationBuilder RegisterDocumentDb(IEndpointBuilder) public static DocumentDbRegistrationBuilder RegisterDocumentDb(this IEndpointBuilder @this) Parameters this IEndpointBuilder Returns DocumentDbRegistrationBuilder"
  },
  "api/Compze.Persistence.Common.DependencyInjection.DocumentDbRegistrationBuilder.html": {
    "href": "api/Compze.Persistence.Common.DependencyInjection.DocumentDbRegistrationBuilder.html",
    "title": "Class DocumentDbRegistrationBuilder | Compze",
    "keywords": "Class DocumentDbRegistrationBuilder Namespace Compze.Persistence.Common.DependencyInjection Assembly Compze.ExternalDependencies.dll public class DocumentDbRegistrationBuilder Inheritance object DocumentDbRegistrationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods HandleDocumentType<TDocument>(MessageHandlerRegistrarWithDependencyInjectionSupport) public DocumentDbRegistrationBuilder HandleDocumentType<TDocument>(MessageHandlerRegistrarWithDependencyInjectionSupport registrar) Parameters registrar MessageHandlerRegistrarWithDependencyInjectionSupport Returns DocumentDbRegistrationBuilder Type Parameters TDocument"
  },
  "api/Compze.Persistence.Common.DependencyInjection.EventStoreRegistrar.html": {
    "href": "api/Compze.Persistence.Common.DependencyInjection.EventStoreRegistrar.html",
    "title": "Class EventStoreRegistrar | Compze",
    "keywords": "Class EventStoreRegistrar Namespace Compze.Persistence.Common.DependencyInjection Assembly Compze.ExternalDependencies.dll public static class EventStoreRegistrar Inheritance object EventStoreRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterEventStore(IDependencyInjectionContainer, string) public static void RegisterEventStore(this IDependencyInjectionContainer @this, string connectionName) Parameters this IDependencyInjectionContainer connectionName string RegisterEventStore(IDependencyInjectionContainer, string, IReadOnlyList<IEventMigration>) public static void RegisterEventStore(this IDependencyInjectionContainer @this, string connectionName, IReadOnlyList<IEventMigration> migrations) Parameters this IDependencyInjectionContainer connectionName string migrations IReadOnlyList<IEventMigration> RegisterEventStore(IEndpointBuilder) public static EventStoreRegistrationBuilder RegisterEventStore(this IEndpointBuilder @this) Parameters this IEndpointBuilder Returns EventStoreRegistrationBuilder RegisterEventStore(IEndpointBuilder, IReadOnlyList<IEventMigration>) public static EventStoreRegistrationBuilder RegisterEventStore(this IEndpointBuilder @this, IReadOnlyList<IEventMigration> migrations) Parameters this IEndpointBuilder migrations IReadOnlyList<IEventMigration> Returns EventStoreRegistrationBuilder RegisterEventStoreForFlexibleTesting(IDependencyInjectionContainer, string, Func<IReadOnlyList<IEventMigration>>) public static void RegisterEventStoreForFlexibleTesting(this IDependencyInjectionContainer @this, string connectionName, Func<IReadOnlyList<IEventMigration>> migrations) Parameters this IDependencyInjectionContainer connectionName string migrations Func<IReadOnlyList<IEventMigration>>"
  },
  "api/Compze.Persistence.Common.DependencyInjection.EventStoreRegistrationBuilder.html": {
    "href": "api/Compze.Persistence.Common.DependencyInjection.EventStoreRegistrationBuilder.html",
    "title": "Class EventStoreRegistrationBuilder | Compze",
    "keywords": "Class EventStoreRegistrationBuilder Namespace Compze.Persistence.Common.DependencyInjection Assembly Compze.ExternalDependencies.dll public class EventStoreRegistrationBuilder Inheritance object EventStoreRegistrationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods HandleAggregate<TAggregate, TEvent>() public EventStoreRegistrationBuilder HandleAggregate<TAggregate, TEvent>() where TAggregate : class, IEventStored<TEvent> where TEvent : IAggregateEvent Returns EventStoreRegistrationBuilder Type Parameters TAggregate TEvent"
  },
  "api/Compze.Persistence.Common.DependencyInjection.TestingPersistenceLayerRegistrar.html": {
    "href": "api/Compze.Persistence.Common.DependencyInjection.TestingPersistenceLayerRegistrar.html",
    "title": "Class TestingPersistenceLayerRegistrar | Compze",
    "keywords": "Class TestingPersistenceLayerRegistrar Namespace Compze.Persistence.Common.DependencyInjection Assembly Compze.CQRS.ExternalDependencies.dll public static class TestingPersistenceLayerRegistrar Inheritance object TestingPersistenceLayerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterCurrentTestsConfiguredPersistenceLayer(IDependencyInjectionContainer, string) public static void RegisterCurrentTestsConfiguredPersistenceLayer(this IDependencyInjectionContainer container, string connectionStringName) Parameters container IDependencyInjectionContainer connectionStringName string RegisterCurrentTestsConfiguredPersistenceLayer(IEndpointBuilder) public static void RegisterCurrentTestsConfiguredPersistenceLayer(this IEndpointBuilder @this) Parameters this IEndpointBuilder"
  },
  "api/Compze.Persistence.Common.DependencyInjection.html": {
    "href": "api/Compze.Persistence.Common.DependencyInjection.html",
    "title": "Namespace Compze.Persistence.Common.DependencyInjection | Compze",
    "keywords": "Namespace Compze.Persistence.Common.DependencyInjection Classes DocumentDbRegistrar DocumentDbRegistrationBuilder EventStoreRegistrar EventStoreRegistrationBuilder"
  },
  "api/Compze.Persistence.Common.EventStore.EventDuplicateKeyException.html": {
    "href": "api/Compze.Persistence.Common.EventStore.EventDuplicateKeyException.html",
    "title": "Class EventDuplicateKeyException | Compze",
    "keywords": "Class EventDuplicateKeyException Namespace Compze.Persistence.Common.EventStore Assembly Compze.CQRS.ExternalDependencies.dll public class EventDuplicateKeyException : Exception, ISerializable Inheritance object Exception EventDuplicateKeyException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors EventDuplicateKeyException(Exception) public EventDuplicateKeyException(Exception sqlException) Parameters sqlException Exception"
  },
  "api/Compze.Persistence.Common.EventStore.html": {
    "href": "api/Compze.Persistence.Common.EventStore.html",
    "title": "Namespace Compze.Persistence.Common.EventStore | Compze",
    "keywords": "Namespace Compze.Persistence.Common.EventStore Classes EventDuplicateKeyException"
  },
  "api/Compze.Persistence.Common.html": {
    "href": "api/Compze.Persistence.Common.html",
    "title": "Namespace Compze.Persistence.Common | Compze",
    "keywords": "Namespace Compze.Persistence.Common Namespaces Compze.Persistence.Common.DependencyInjection Compze.Persistence.Common.EventStore"
  },
  "api/Compze.Persistence.DocumentDb.AttemptToSaveAlreadyPersistedValueException.html": {
    "href": "api/Compze.Persistence.DocumentDb.AttemptToSaveAlreadyPersistedValueException.html",
    "title": "Class AttemptToSaveAlreadyPersistedValueException | Compze",
    "keywords": "Class AttemptToSaveAlreadyPersistedValueException Namespace Compze.Persistence.DocumentDb Assembly Compze.CQRS.dll public class AttemptToSaveAlreadyPersistedValueException : Exception, ISerializable Inheritance object Exception AttemptToSaveAlreadyPersistedValueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AttemptToSaveAlreadyPersistedValueException(object, object) public AttemptToSaveAlreadyPersistedValueException(object key, object value) Parameters key object value object"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.Command.DeleteDocument-1.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.Command.DeleteDocument-1.html",
    "title": "Class DocumentDbApi.Command.DeleteDocument<TDocument> | Compze",
    "keywords": "Class DocumentDbApi.Command.DeleteDocument<TDocument> Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.Command.DeleteDocument<TDocument> : MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand, IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage Type Parameters TDocument Inheritance object MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand DocumentDbApi.Command.DeleteDocument<TDocument> Implements IStrictlyLocalCommand ICommand IMustBeSentTransactionally IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.Command.SaveDocument-1.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.Command.SaveDocument-1.html",
    "title": "Class DocumentDbApi.Command.SaveDocument<TDocument> | Compze",
    "keywords": "Class DocumentDbApi.Command.SaveDocument<TDocument> Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.Command.SaveDocument<TDocument> : MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand, IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage Type Parameters TDocument Inheritance object MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand DocumentDbApi.Command.SaveDocument<TDocument> Implements IStrictlyLocalCommand ICommand IMustBeSentTransactionally IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.Command.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.Command.html",
    "title": "Class DocumentDbApi.Command | Compze",
    "keywords": "Class DocumentDbApi.Command Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.Command Inheritance object DocumentDbApi.Command Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Delete<TDocument>(string) public DocumentDbApi.Command.DeleteDocument<TDocument> Delete<TDocument>(string key) Parameters key string Returns DocumentDbApi.Command.DeleteDocument<TDocument> Type Parameters TDocument Save<TDocument>(string, TDocument) public DocumentDbApi.Command.SaveDocument<TDocument> Save<TDocument>(string key, TDocument account) Parameters key string account TDocument Returns DocumentDbApi.Command.SaveDocument<TDocument> Type Parameters TDocument Save<TDocument>(TDocument) public DocumentDbApi.Command.SaveDocument<TDocument> Save<TDocument>(TDocument account) where TDocument : IHasPersistentIdentity<Guid> Parameters account TDocument Returns DocumentDbApi.Command.SaveDocument<TDocument> Type Parameters TDocument"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.GetDocumentForUpdate-1.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.GetDocumentForUpdate-1.html",
    "title": "Class DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> | Compze",
    "keywords": "Class DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument>, TDocument>, IStrictlyLocalQuery<DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument>, TDocument>, IQuery<TDocument>, IHasReturnValue<TDocument>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage Type Parameters TDocument Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument>, TDocument> DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> Implements IStrictlyLocalQuery<DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument>, TDocument> IQuery<TDocument> IHasReturnValue<TDocument> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument-1.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument-1.html",
    "title": "Class DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> | Compze",
    "keywords": "Class DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument>, TDocument>, IStrictlyLocalQuery<DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument>, TDocument>, IQuery<TDocument>, IHasReturnValue<TDocument>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage Type Parameters TDocument Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument>, TDocument> DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> Implements IStrictlyLocalQuery<DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument>, TDocument> IQuery<TDocument> IHasReturnValue<TDocument> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.TryGetDocument-1.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.TryGetDocument-1.html",
    "title": "Class DocumentDbApi.QueryApi.TryGetDocument<TDocument> | Compze",
    "keywords": "Class DocumentDbApi.QueryApi.TryGetDocument<TDocument> Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.QueryApi.TryGetDocument<TDocument> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<DocumentDbApi.QueryApi.TryGetDocument<TDocument>, Option<TDocument>>, IStrictlyLocalQuery<DocumentDbApi.QueryApi.TryGetDocument<TDocument>, Option<TDocument>>, IQuery<Option<TDocument>>, IHasReturnValue<Option<TDocument>>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage Type Parameters TDocument Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<DocumentDbApi.QueryApi.TryGetDocument<TDocument>, Option<TDocument>> DocumentDbApi.QueryApi.TryGetDocument<TDocument> Implements IStrictlyLocalQuery<DocumentDbApi.QueryApi.TryGetDocument<TDocument>, Option<TDocument>> IQuery<Option<TDocument>> IHasReturnValue<Option<TDocument>> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.QueryApi.html",
    "title": "Class DocumentDbApi.QueryApi | Compze",
    "keywords": "Class DocumentDbApi.QueryApi Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi.QueryApi Inheritance object DocumentDbApi.QueryApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods GetForUpdate<TDocument>(Guid) public DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> GetForUpdate<TDocument>(Guid id) Parameters id Guid Returns DocumentDbApi.QueryApi.GetDocumentForUpdate<TDocument> Type Parameters TDocument GetReadOnlyCopy<TDocument>(Guid) public DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> GetReadOnlyCopy<TDocument>(Guid id) Parameters id Guid Returns DocumentDbApi.QueryApi.GetReadonlyCopyOfDocument<TDocument> Type Parameters TDocument TryGet<TDocument>(Guid) public DocumentDbApi.QueryApi.TryGetDocument<TDocument> TryGet<TDocument>(Guid id) where TDocument : IHasPersistentIdentity<Guid> Parameters id Guid Returns DocumentDbApi.QueryApi.TryGetDocument<TDocument> Type Parameters TDocument TryGet<TDocument>(string) public DocumentDbApi.QueryApi.TryGetDocument<TDocument> TryGet<TDocument>(string id) Parameters id string Returns DocumentDbApi.QueryApi.TryGetDocument<TDocument> Type Parameters TDocument"
  },
  "api/Compze.Persistence.DocumentDb.DocumentDbApi.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentDbApi.html",
    "title": "Class DocumentDbApi | Compze",
    "keywords": "Class DocumentDbApi Namespace Compze.Persistence.DocumentDb Assembly Compze.Messaging.dll public class DocumentDbApi Inheritance object DocumentDbApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties Commands public DocumentDbApi.Command Commands { get; } Property Value DocumentDbApi.Command Queries public DocumentDbApi.QueryApi Queries { get; } Property Value DocumentDbApi.QueryApi"
  },
  "api/Compze.Persistence.DocumentDb.DocumentIdIsEmptyGuidException.html": {
    "href": "api/Compze.Persistence.DocumentDb.DocumentIdIsEmptyGuidException.html",
    "title": "Class DocumentIdIsEmptyGuidException | Compze",
    "keywords": "Class DocumentIdIsEmptyGuidException Namespace Compze.Persistence.DocumentDb Assembly Compze.DocumentDb.dll public class DocumentIdIsEmptyGuidException : Exception, ISerializable Inheritance object Exception DocumentIdIsEmptyGuidException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DocumentIdIsEmptyGuidException() public DocumentIdIsEmptyGuidException()"
  },
  "api/Compze.Persistence.DocumentDb.IDocumentDb.html": {
    "href": "api/Compze.Persistence.DocumentDb.IDocumentDb.html",
    "title": "Interface IDocumentDb | Compze",
    "keywords": "Interface IDocumentDb Namespace Compze.Persistence.DocumentDb Assembly Compze.dll public interface IDocumentDb Extension Methods NullableCE.NotNull<T>(T?) Methods Add<TDocument>(object, TDocument, Dictionary<Type, Dictionary<string, string>>) void Add<TDocument>(object id, TDocument value, Dictionary<Type, Dictionary<string, string>> persistentValues) Parameters id object value TDocument persistentValues Dictionary<Type, Dictionary<string, string>> Type Parameters TDocument GetAllIds<TDocument>() IEnumerable<Guid> GetAllIds<TDocument>() where TDocument : IHasPersistentIdentity<Guid> Returns IEnumerable<Guid> Type Parameters TDocument GetAll<TDocument>() IEnumerable<TDocument> GetAll<TDocument>() where TDocument : IHasPersistentIdentity<Guid> Returns IEnumerable<TDocument> Type Parameters TDocument GetAll<TDocument>(IEnumerable<Guid>) IEnumerable<TDocument> GetAll<TDocument>(IEnumerable<Guid> ids) where TDocument : IHasPersistentIdentity<Guid> Parameters ids IEnumerable<Guid> Returns IEnumerable<TDocument> Type Parameters TDocument Remove(object, Type) void Remove(object id, Type documentType) Parameters id object documentType Type TryGet<TDocument>(object, out TDocument, Dictionary<Type, Dictionary<string, string>>, bool) bool TryGet<TDocument>(object id, out TDocument value, Dictionary<Type, Dictionary<string, string>> persistentValues, bool useUpdateLock) Parameters id object value TDocument persistentValues Dictionary<Type, Dictionary<string, string>> useUpdateLock bool Returns bool Type Parameters TDocument Update(IEnumerable<KeyValuePair<string, object>>, Dictionary<Type, Dictionary<string, string>>) void Update(IEnumerable<KeyValuePair<string, object>> values, Dictionary<Type, Dictionary<string, string>> persistentValues) Parameters values IEnumerable<KeyValuePair<string, object>> persistentValues Dictionary<Type, Dictionary<string, string>>"
  },
  "api/Compze.Persistence.DocumentDb.IDocumentDbBulkReader.html": {
    "href": "api/Compze.Persistence.DocumentDb.IDocumentDbBulkReader.html",
    "title": "Interface IDocumentDbBulkReader | Compze",
    "keywords": "Interface IDocumentDbBulkReader Namespace Compze.Persistence.DocumentDb Assembly Compze.dll public interface IDocumentDbBulkReader : IDocumentDbReader, IDisposable Inherited Members IDocumentDbReader.Get<TValue>(object) IDocumentDbReader.TryGet<TValue>(object, out TValue) IDocumentDbReader.GetAll<T>(IEnumerable<Guid>) IDisposable.Dispose() Extension Methods NullableCE.NotNull<T>(T?) Methods GetAllIds<T>() IEnumerable<Guid> GetAllIds<T>() where T : IHasPersistentIdentity<Guid> Returns IEnumerable<Guid> Type Parameters T GetAll<T>() IEnumerable<T> GetAll<T>() where T : IHasPersistentIdentity<Guid> Returns IEnumerable<T> Type Parameters T"
  },
  "api/Compze.Persistence.DocumentDb.IDocumentDbReader.html": {
    "href": "api/Compze.Persistence.DocumentDb.IDocumentDbReader.html",
    "title": "Interface IDocumentDbReader | Compze",
    "keywords": "Interface IDocumentDbReader Namespace Compze.Persistence.DocumentDb Assembly Compze.dll public interface IDocumentDbReader : IDisposable Inherited Members IDisposable.Dispose() Extension Methods NullableCE.NotNull<T>(T?) Methods GetAll<T>(IEnumerable<Guid>) IEnumerable<T> GetAll<T>(IEnumerable<Guid> ids) where T : IHasPersistentIdentity<Guid> Parameters ids IEnumerable<Guid> Returns IEnumerable<T> Type Parameters T Get<TValue>(object) TValue Get<TValue>(object key) Parameters key object Returns TValue Type Parameters TValue TryGet<TValue>(object, out TValue) bool TryGet<TValue>(object key, out TValue document) Parameters key object document TValue Returns bool Type Parameters TValue"
  },
  "api/Compze.Persistence.DocumentDb.IDocumentDbSession.html": {
    "href": "api/Compze.Persistence.DocumentDb.IDocumentDbSession.html",
    "title": "Interface IDocumentDbSession | Compze",
    "keywords": "Interface IDocumentDbSession Namespace Compze.Persistence.DocumentDb Assembly Compze.dll public interface IDocumentDbSession : IDocumentDbBulkReader, IDocumentDbReader, IDisposable, IDocumentDbUpdater Inherited Members IDocumentDbBulkReader.GetAll<T>() IDocumentDbBulkReader.GetAllIds<T>() IDocumentDbReader.Get<TValue>(object) IDocumentDbReader.TryGet<TValue>(object, out TValue) IDocumentDbReader.GetAll<T>(IEnumerable<Guid>) IDisposable.Dispose() IDocumentDbUpdater.GetForUpdate<TValue>(object) IDocumentDbUpdater.Save<TValue>(object, TValue) IDocumentDbUpdater.Delete<TEntity>(object) IDocumentDbUpdater.Save<TEntity>(TEntity) IDocumentDbUpdater.Delete<TEntity>(TEntity) Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.DocumentDb.IDocumentDbUpdater.html": {
    "href": "api/Compze.Persistence.DocumentDb.IDocumentDbUpdater.html",
    "title": "Interface IDocumentDbUpdater | Compze",
    "keywords": "Interface IDocumentDbUpdater Namespace Compze.Persistence.DocumentDb Assembly Compze.dll public interface IDocumentDbUpdater Extension Methods NullableCE.NotNull<T>(T?) Methods Delete<TEntity>(object) void Delete<TEntity>(object id) Parameters id object Type Parameters TEntity Delete<TEntity>(TEntity) void Delete<TEntity>(TEntity entity) where TEntity : IHasPersistentIdentity<Guid> Parameters entity TEntity Type Parameters TEntity GetForUpdate<TValue>(object) Like Get but, if supported by implementing class, eagerly locks the instance in the database. TValue GetForUpdate<TValue>(object key) Parameters key object Returns TValue Type Parameters TValue Save<TValue>(object, TValue) void Save<TValue>(object id, TValue value) Parameters id object value TValue Type Parameters TValue Save<TEntity>(TEntity) void Save<TEntity>(TEntity entity) where TEntity : IHasPersistentIdentity<Guid> Parameters entity TEntity Type Parameters TEntity"
  },
  "api/Compze.Persistence.DocumentDb.NoSuchDocumentException.html": {
    "href": "api/Compze.Persistence.DocumentDb.NoSuchDocumentException.html",
    "title": "Class NoSuchDocumentException | Compze",
    "keywords": "Class NoSuchDocumentException Namespace Compze.Persistence.DocumentDb Assembly Compze.CQRS.dll public class NoSuchDocumentException : Exception, ISerializable Inheritance object Exception NoSuchDocumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors NoSuchDocumentException(object, Guid) public NoSuchDocumentException(object key, Guid type) Parameters key object type Guid NoSuchDocumentException(object, Type) public NoSuchDocumentException(object key, Type type) Parameters key object type Type"
  },
  "api/Compze.Persistence.DocumentDb.TooManyItemsDeletedException.html": {
    "href": "api/Compze.Persistence.DocumentDb.TooManyItemsDeletedException.html",
    "title": "Class TooManyItemsDeletedException | Compze",
    "keywords": "Class TooManyItemsDeletedException Namespace Compze.Persistence.DocumentDb Assembly Compze.CQRS.dll public class TooManyItemsDeletedException : Exception, ISerializable Inheritance object Exception TooManyItemsDeletedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object)"
  },
  "api/Compze.Persistence.DocumentDb.html": {
    "href": "api/Compze.Persistence.DocumentDb.html",
    "title": "Namespace Compze.Persistence.DocumentDb | Compze",
    "keywords": "Namespace Compze.Persistence.DocumentDb Interfaces IDocumentDb IDocumentDbBulkReader IDocumentDbReader IDocumentDbSession IDocumentDbUpdater"
  },
  "api/Compze.Persistence.EventStore.AggregateEvent-1.html": {
    "href": "api/Compze.Persistence.EventStore.AggregateEvent-1.html",
    "title": "Class AggregateEvent<TBaseEventInterface> | Compze",
    "keywords": "Class AggregateEvent<TBaseEventInterface> Namespace Compze.Persistence.EventStore Assembly Compze.dll public abstract class AggregateEvent<TBaseEventInterface> : WrapperEvent<TBaseEventInterface>, IAggregateEvent<TBaseEventInterface>, IExactlyOnceWrapperEvent<TBaseEventInterface>, IWrapperEvent<TBaseEventInterface>, IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage where TBaseEventInterface : IAggregateEvent Type Parameters TBaseEventInterface Inheritance object WrapperEvent<TBaseEventInterface> AggregateEvent<TBaseEventInterface> Implements IAggregateEvent<TBaseEventInterface> IExactlyOnceWrapperEvent<TBaseEventInterface> IWrapperEvent<TBaseEventInterface> IExactlyOnceEvent IRemotableEvent IEvent IExactlyOnceMessage IMustBeSentAndHandledTransactionally IMustBeSentTransactionally IAtMostOnceMessage IRemotableMessage IMustBeHandledTransactionally IMessage Inherited Members WrapperEvent<TBaseEventInterface>.Event object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors AggregateEvent(TBaseEventInterface) protected AggregateEvent(TBaseEventInterface @event) Parameters event TBaseEventInterface"
  },
  "api/Compze.Persistence.EventStore.AggregateEvent.html": {
    "href": "api/Compze.Persistence.EventStore.AggregateEvent.html",
    "title": "Class AggregateEvent | Compze",
    "keywords": "Class AggregateEvent Namespace Compze.Persistence.EventStore Assembly Compze.dll public abstract class AggregateEvent : IMutableAggregateEvent, IAggregateEvent, IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inheritance object AggregateEvent Implements IMutableAggregateEvent IAggregateEvent IExactlyOnceEvent IRemotableEvent IEvent IExactlyOnceMessage IMustBeSentAndHandledTransactionally IMustBeSentTransactionally IAtMostOnceMessage IRemotableMessage IMustBeHandledTransactionally IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors AggregateEvent() protected AggregateEvent() AggregateEvent(Guid) protected AggregateEvent(Guid aggregateId) Parameters aggregateId Guid Properties AggregateId public Guid AggregateId { get; } Property Value Guid AggregateVersion public int AggregateVersion { get; } Property Value int MessageId Used by the infrastructure to guarantee that the same message is never delivered more than once. Must be generated when the message is created and then NEVER modified. Must be maintained when binding a command in a UI etc. public Guid MessageId { get; } Property Value Guid UtcTimeStamp public DateTime UtcTimeStamp { get; } Property Value DateTime"
  },
  "api/Compze.Persistence.EventStore.AggregateNotFoundException.html": {
    "href": "api/Compze.Persistence.EventStore.AggregateNotFoundException.html",
    "title": "Class AggregateNotFoundException | Compze",
    "keywords": "Class AggregateNotFoundException Namespace Compze.Persistence.EventStore Assembly Compze.CQRS.dll public class AggregateNotFoundException : Exception, ISerializable Inheritance object Exception AggregateNotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AggregateNotFoundException(Guid) public AggregateNotFoundException(Guid aggregateId) Parameters aggregateId Guid"
  },
  "api/Compze.Persistence.EventStore.AggregateWrapperEvent-1.html": {
    "href": "api/Compze.Persistence.EventStore.AggregateWrapperEvent-1.html",
    "title": "Class AggregateWrapperEvent<TBaseEventInterface> | Compze",
    "keywords": "Class AggregateWrapperEvent<TBaseEventInterface> Namespace Compze.Persistence.EventStore Assembly Compze.dll public abstract class AggregateWrapperEvent<TBaseEventInterface> : WrapperEvent<TBaseEventInterface>, IAggregateWrapperEvent<TBaseEventInterface>, IExactlyOnceWrapperEvent<TBaseEventInterface>, IWrapperEvent<TBaseEventInterface>, IEvent, IMessage where TBaseEventInterface : IAggregateEvent Type Parameters TBaseEventInterface Inheritance object WrapperEvent<TBaseEventInterface> AggregateWrapperEvent<TBaseEventInterface> Implements IAggregateWrapperEvent<TBaseEventInterface> IExactlyOnceWrapperEvent<TBaseEventInterface> IWrapperEvent<TBaseEventInterface> IEvent IMessage Inherited Members WrapperEvent<TBaseEventInterface>.Event object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors AggregateWrapperEvent(TBaseEventInterface) protected AggregateWrapperEvent(TBaseEventInterface @event) Parameters event TBaseEventInterface"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-3.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-3.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, AggregateWrapperEvent<TAggregateEvent>, IAggregateWrapperEvent<TAggregateEvent>>, IPersistentEntity<Guid>, IHasPersistentIdentity<Guid>, IEquatable<TAggregate>, IEventStored<TAggregateEvent>, IEventStored where TAggregate : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> where TAggregateEventImplementation : AggregateEvent, TAggregateEvent where TAggregateEvent : class, IAggregateEvent Type Parameters TAggregate TAggregateEventImplementation TAggregateEvent Inheritance object Entity<TAggregate, Guid> Entity<TAggregate> VersionedEntity<TAggregate> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, AggregateWrapperEvent<TAggregateEvent>, IAggregateWrapperEvent<TAggregateEvent>> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> Implements IPersistentEntity<Guid> IHasPersistentIdentity<Guid> IEquatable<TAggregate> IEventStored<TAggregateEvent> IEventStored Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, AggregateWrapperEvent<TAggregateEvent>, IAggregateWrapperEvent<TAggregateEvent>>.Publish<TEvent>(TEvent) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, AggregateWrapperEvent<TAggregateEvent>, IAggregateWrapperEvent<TAggregateEvent>>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, AggregateWrapperEvent<TAggregateEvent>, IAggregateWrapperEvent<TAggregateEvent>>.RegisterEventHandlers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, AggregateWrapperEvent<TAggregateEvent>, IAggregateWrapperEvent<TAggregateEvent>>.AssertInvariantsAreMet() VersionedEntity<TAggregate>.Version Entity<TAggregate>.Equals(TAggregate) Entity<TAggregate>.Equals(object) Entity<TAggregate>.GetHashCode() Entity<TAggregate, Guid>.Id Entity<TAggregate, Guid>.SetIdBeVerySureYouKnowWhatYouAreDoing(Guid) Entity<TAggregate, Guid>.GetIdBypassContractValidation() Entity<TAggregate, Guid>.Equals(TAggregate) Entity<TAggregate, Guid>.Equals(object) Entity<TAggregate, Guid>.GetHashCode() Entity<TAggregate, Guid>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Aggregate() [Obsolete(\"Only for infrastructure\", true)] protected Aggregate() Aggregate(IUtcTimeTimeSource) protected Aggregate(IUtcTimeTimeSource timeSource) Parameters timeSource IUtcTimeTimeSource"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.EntityCollectionManager-7.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.EntityCollectionManager-7.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> where TEntityId : notnull where TEntityEventImplementation : TEntityEvent, TAggregateEventImplementation where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TParent TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityCreatedEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors EntityCollectionManager(TParent, Action<TEntityEventImplementation>, IEventHandlerRegistrar<TEntityEvent>) protected EntityCollectionManager(TParent parent, Action<TEntityEventImplementation> raiseEventThroughParent, IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters parent TParent raiseEventThroughParent Action<TEntityEventImplementation> appliersRegistrar IEventHandlerRegistrar<TEntityEvent> Fields IdGetter protected static readonly TEntityEventIdGetterSetter IdGetter Field Value TEntityEventIdGetterSetter Properties Entities public IReadOnlyEntityCollection<TEntity, TEntityId> Entities { get; } Property Value IReadOnlyEntityCollection<TEntity, TEntityId> ManagedEntities protected EntityCollection<TEntity, TEntityId> ManagedEntities { get; } Property Value EntityCollection<TEntity, TEntityId> Methods AddByPublishing<TCreationEvent>(TCreationEvent) public TEntity AddByPublishing<TCreationEvent>(TCreationEvent creationEvent) where TCreationEvent : TEntityEventImplementation, TEntityCreatedEvent Parameters creationEvent TCreationEvent Returns TEntity Type Parameters TCreationEvent"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.EntityCollectionManager-8.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.EntityCollectionManager-8.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> where TEntityId : notnull where TEntityEventImplementation : TEntityEvent, TAggregateEventImplementation where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityRemovedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetSetAggregateEntityEventEntityId<TEntityId, TEntityEventImplementation, TEntityEvent> Type Parameters TParent TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityCreatedEvent TEntityRemovedEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.IdGetter Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.ManagedEntities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Entities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.AddByPublishing<TCreationEvent>(TCreationEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors EntityCollectionManager(TParent, Action<TEntityEventImplementation>, IEventHandlerRegistrar<TEntityEvent>) protected EntityCollectionManager(TParent parent, Action<TEntityEventImplementation> raiseEventThroughParent, IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters parent TParent raiseEventThroughParent Action<TEntityEventImplementation> appliersRegistrar IEventHandlerRegistrar<TEntityEvent>"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.NestedComponent-3.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.NestedComponent-3.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll [UsedImplicitly(ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature)] public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> where TNestedComponent : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> where TNestedComponentEventImplementation : TComponentEventImplementation, TNestedComponentEvent where TNestedComponentEvent : class, TComponentEvent Type Parameters TNestedComponent TNestedComponentEventImplementation TNestedComponentEvent Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent>.Publish(TNestedComponentEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent>.RegisterEventHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors NestedComponent(IUtcTimeTimeSource, Action<TNestedComponentEventImplementation>, IEventHandlerRegistrar<TNestedComponentEvent>, bool) protected NestedComponent(IUtcTimeTimeSource timeSource, Action<TNestedComponentEventImplementation> raiseEventThroughParent, IEventHandlerRegistrar<TNestedComponentEvent> appliersRegistrar, bool registerEventAppliers) Parameters timeSource IUtcTimeTimeSource raiseEventThroughParent Action<TNestedComponentEventImplementation> appliersRegistrar IEventHandlerRegistrar<TNestedComponentEvent> registerEventAppliers bool NestedComponent(TComponent) protected NestedComponent(TComponent parent) Parameters parent TComponent"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.NestedEntity-6.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.NestedEntity-6.CollectionManager.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.IdGetter Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.ManagedEntities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Entities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.AddByPublishing<TCreationEvent>(TCreationEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.NestedEntity-6.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.NestedEntity-6.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TEntity, TEntityEventImplementation, TEntityEvent> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntityId : struct where TEntityEventImplementation : TComponentEventImplementation, TEntityEvent where TEntityEvent : class, TComponentEvent where TEntityCreatedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetSetAggregateEntityEventEntityId<TEntityId, TEntityEventImplementation, TEntityEvent> Type Parameters TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityCreatedEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors NestedEntity(IUtcTimeTimeSource, Action<TEntityEventImplementation>, IEventHandlerRegistrar<TEntityEvent>) protected NestedEntity(IUtcTimeTimeSource timeSource, Action<TEntityEventImplementation> raiseEventThroughParent, IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters timeSource IUtcTimeTimeSource raiseEventThroughParent Action<TEntityEventImplementation> appliersRegistrar IEventHandlerRegistrar<TEntityEvent> NestedEntity(TComponent) protected NestedEntity(TComponent parent) Parameters parent TComponent Properties Id public TEntityId Id { get; } Property Value TEntityId Methods CreateSelfManagingCollection(TComponent) public static Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager CreateSelfManagingCollection(TComponent parent) Parameters parent TComponent Returns Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Publish(TEntityEventImplementation) protected override void Publish(TEntityEventImplementation @event) Parameters event TEntityEventImplementation"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.RemovableNestedEntity-7.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.RemovableNestedEntity-7.CollectionManager.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.IdGetter Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.ManagedEntities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Entities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.AddByPublishing<TCreationEvent>(TCreationEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.RemovableNestedEntity-7.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.RemovableNestedEntity-7.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntityId : struct where TEntityEventImplementation : TComponentEventImplementation, TEntityEvent where TEntityEvent : class, TComponentEvent where TEntityCreatedEvent : TEntityEvent where TEntityRemovedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetSetAggregateEntityEventEntityId<TEntityId, TEntityEventImplementation, TEntityEvent> Type Parameters TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityCreatedEvent TEntityRemovedEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Id Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CreateSelfManagingCollection(TComponent) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors RemovableNestedEntity(TComponent) protected RemovableNestedEntity(TComponent parent) Parameters parent TComponent Methods CreateSelfManagingCollection(TComponent) public static Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager CreateSelfManagingCollection(TComponent parent) Parameters parent TComponent Returns Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.SlavedNestedEntity-5.EntityCollectionManagerBase.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.SlavedNestedEntity-5.EntityCollectionManagerBase.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter>.EntityCollectionManagerBase | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter>.EntityCollectionManagerBase Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.CQRS.dll public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter>.EntityCollectionManagerBase Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter>.EntityCollectionManagerBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors EntityCollectionManagerBase(IEventHandlerRegistrar<TEntityEvent>) protected EntityCollectionManagerBase(IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters appliersRegistrar IEventHandlerRegistrar<TEntityEvent> Properties Entities public IReadOnlyEntityCollection<TEntity, TEntityId> Entities { get; } Property Value IReadOnlyEntityCollection<TEntity, TEntityId>"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.SlavedNestedEntity-5.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.SlavedNestedEntity-5.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.CQRS.dll An entity that is not created and removed through raising events. Instead it is automatically created and/or removed when another entity in the Aggregate object graph is added or removed. Inheritors must implement the add/remove behavior. Inheritors must ensure that the Id property is initialized correctly before any calls to RaiseEvent. Usually this is implemented within a nested class that inherits from Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter>.EntityCollectionManagerBase public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TEntity, TEntityEventImplementation, TEntityEvent> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter> where TEntityId : notnull where TEntityEventImplementation : TComponentEventImplementation, TEntityEvent where TEntityEvent : class, TComponentEvent where TEntityEventIdGetterSetter : IGetSetAggregateEntityEventEntityId<TEntityId, TEntityEventImplementation, TEntityEvent> Type Parameters TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityEventIdGetterSetter> Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors SlavedNestedEntity(IUtcTimeTimeSource, Action<TEntityEventImplementation>, IEventHandlerRegistrar<TEntityEvent>) protected SlavedNestedEntity(IUtcTimeTimeSource timeSource, Action<TEntityEventImplementation> raiseEventThroughParent, IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters timeSource IUtcTimeTimeSource raiseEventThroughParent Action<TEntityEventImplementation> appliersRegistrar IEventHandlerRegistrar<TEntityEvent> SlavedNestedEntity(TComponent) protected SlavedNestedEntity(TComponent parent) Parameters parent TComponent Properties Id protected TEntityId Id { get; set; } Property Value TEntityId Methods Publish(TEntityEventImplementation) protected override void Publish(TEntityEventImplementation @event) Parameters event TEntityEventImplementation"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Component-3.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent> where TComponent : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent> where TComponentEventImplementation : TAggregateEventImplementation, TComponentEvent where TComponentEvent : class, TAggregateEvent Type Parameters TComponent TComponentEventImplementation TComponentEvent Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Component(TAggregate) protected Component(TAggregate aggregate) Parameters aggregate TAggregate Methods Publish(TComponentEventImplementation) protected virtual void Publish(TComponentEventImplementation @event) Parameters event TComponentEventImplementation RegisterEventAppliers() protected IEventHandlerRegistrar<TComponentEvent> RegisterEventAppliers() Returns IEventHandlerRegistrar<TComponentEvent> RegisterEventHandlers() protected IEventHandlerRegistrar<TComponentEvent> RegisterEventHandlers() Returns IEventHandlerRegistrar<TComponentEvent>"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Entity-6.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Entity-6.CollectionManager.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.IdGetter Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.ManagedEntities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Entities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.AddByPublishing<TCreationEvent>(TCreationEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Entity-6.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.Entity-6.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll [UsedImplicitly(ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature)] public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntityId : struct where TEntityEventImplementation : TAggregateEventImplementation, TEntityEvent where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetSetAggregateEntityEventEntityId<TEntityId, TEntityEventImplementation, TEntityEvent> Type Parameters TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityCreatedEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Entity(TAggregate) protected Entity(TAggregate aggregate) Parameters aggregate TAggregate Properties Id public TEntityId Id { get; } Property Value TEntityId Methods CreateSelfManagingCollection(TAggregate) public static Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager CreateSelfManagingCollection(TAggregate parent) Parameters parent TAggregate Returns Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Publish(TEntityEventImplementation) protected override void Publish(TEntityEventImplementation @event) Parameters event TEntityEventImplementation"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.RemovableEntity-7.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.RemovableEntity-7.CollectionManager.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.IdGetter Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.ManagedEntities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Entities Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.EntityCollectionManager<TAggregate, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.AddByPublishing<TCreationEvent>(TCreationEvent) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.RemovableEntity-7.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.RemovableEntity-7.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public abstract class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntity : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> where TEntityId : struct where TEntityEventImplementation : TAggregateEventImplementation, TEntityEvent where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityRemovedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetSetAggregateEntityEventEntityId<TEntityId, TEntityEventImplementation, TEntityEvent> Type Parameters TEntity TEntityId TEntityEventImplementation TEntityEvent TEntityCreatedEvent TEntityRemovedEvent TEntityEventIdGetterSetter Inheritance object Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Inherited Members Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Id Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CreateSelfManagingCollection(TAggregate) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.Publish(TEntityEventImplementation) Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventAppliers() Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TEntity, TEntityEventImplementation, TEntityEvent>.RegisterEventHandlers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors RemovableEntity(TAggregate) protected RemovableEntity(TAggregate aggregate) Parameters aggregate TAggregate Methods CreateSelfManagingCollection(TAggregate) public static Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager CreateSelfManagingCollection(TAggregate parent) Parameters parent TAggregate Returns Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager"
  },
  "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.Aggregate-5.html",
    "title": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> | Compze",
    "keywords": "Class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> : VersionedEntity<TAggregate>, IPersistentEntity<Guid>, IHasPersistentIdentity<Guid>, IEquatable<TAggregate>, IEventStored<TAggregateEvent>, IEventStored where TAggregate : Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> where TAggregateEventImplementation : AggregateEvent, TAggregateEvent where TAggregateEvent : class, IAggregateEvent where TWrapperEventImplementation : TWrapperEventInterface where TWrapperEventInterface : IAggregateWrapperEvent<TAggregateEvent> Type Parameters TAggregate TAggregateEventImplementation TAggregateEvent TWrapperEventImplementation TWrapperEventInterface Inheritance object Entity<TAggregate, Guid> Entity<TAggregate> VersionedEntity<TAggregate> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> Implements IPersistentEntity<Guid> IHasPersistentIdentity<Guid> IEquatable<TAggregate> IEventStored<TAggregateEvent> IEventStored Derived Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> Inherited Members VersionedEntity<TAggregate>.Version Entity<TAggregate>.Equals(TAggregate) Entity<TAggregate>.Equals(object) Entity<TAggregate>.GetHashCode() Entity<TAggregate, Guid>.Id Entity<TAggregate, Guid>.SetIdBeVerySureYouKnowWhatYouAreDoing(Guid) Entity<TAggregate, Guid>.GetIdBypassContractValidation() Entity<TAggregate, Guid>.Equals(TAggregate) Entity<TAggregate, Guid>.Equals(object) Entity<TAggregate, Guid>.GetHashCode() Entity<TAggregate, Guid>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Aggregate(IUtcTimeTimeSource) protected Aggregate(IUtcTimeTimeSource timeSource) Parameters timeSource IUtcTimeTimeSource Methods AssertInvariantsAreMet() protected virtual void AssertInvariantsAreMet() Publish<TEvent>(TEvent) protected TEvent Publish<TEvent>(TEvent theEvent) where TEvent : TAggregateEventImplementation Parameters theEvent TEvent Returns TEvent Type Parameters TEvent RegisterEventAppliers() protected IEventHandlerRegistrar<TAggregateEvent> RegisterEventAppliers() Returns IEventHandlerRegistrar<TAggregateEvent> RegisterEventHandlers() protected IEventHandlerRegistrar<TAggregateEvent> RegisterEventHandlers() Returns IEventHandlerRegistrar<TAggregateEvent>"
  },
  "api/Compze.Persistence.EventStore.Aggregates.AllowPublicSettersAttribute.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.AllowPublicSettersAttribute.html",
    "title": "Class AllowPublicSettersAttribute | Compze",
    "keywords": "Class AllowPublicSettersAttribute Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Interface)] public sealed class AllowPublicSettersAttribute : Attribute Inheritance object Attribute AllowPublicSettersAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Aggregates.EntityCollection-2.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.EntityCollection-2.html",
    "title": "Class EntityCollection<TEntity, TEntityId> | Compze",
    "keywords": "Class EntityCollection<TEntity, TEntityId> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public class EntityCollection<TEntity, TEntityId> : IReadOnlyEntityCollection<TEntity, TEntityId>, IEnumerable<TEntity>, IEnumerable where TEntityId : notnull Type Parameters TEntity TEntityId Inheritance object EntityCollection<TEntity, TEntityId> Implements IReadOnlyEntityCollection<TEntity, TEntityId> IEnumerable<TEntity> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Properties InCreationOrder public IReadOnlyList<TEntity> InCreationOrder { get; } Property Value IReadOnlyList<TEntity> this[TEntityId] public TEntity this[TEntityId id] { get; } Parameters id TEntityId Property Value TEntity Methods Contains(TEntityId) public bool Contains(TEntityId id) Parameters id TEntityId Returns bool Get(TEntityId) public TEntity Get(TEntityId id) Parameters id TEntityId Returns TEntity GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TEntity> GetEnumerator() Returns IEnumerator<TEntity> An enumerator that can be used to iterate through the collection. TryGet(TEntityId, out TEntity) public bool TryGet(TEntityId id, out TEntity component) Parameters id TEntityId component TEntity Returns bool"
  },
  "api/Compze.Persistence.EventStore.Aggregates.IGetAggregateEntityEventEntityId-2.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.IGetAggregateEntityEventEntityId-2.html",
    "title": "Interface IGetAggregateEntityEventEntityId<TEvent, TEntityId> | Compze",
    "keywords": "Interface IGetAggregateEntityEventEntityId<TEvent, TEntityId> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public interface IGetAggregateEntityEventEntityId<in TEvent, out TEntityId> Type Parameters TEvent TEntityId Extension Methods NullableCE.NotNull<T>(T?) Methods GetId(TEvent) TEntityId GetId(TEvent @event) Parameters event TEvent Returns TEntityId"
  },
  "api/Compze.Persistence.EventStore.Aggregates.IGetSetAggregateEntityEventEntityId-3.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.IGetSetAggregateEntityEventEntityId-3.html",
    "title": "Interface IGetSetAggregateEntityEventEntityId<TEntityId, TEventImplementation, TEvent> | Compze",
    "keywords": "Interface IGetSetAggregateEntityEventEntityId<TEntityId, TEventImplementation, TEvent> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public interface IGetSetAggregateEntityEventEntityId<TEntityId, in TEventImplementation, in TEvent> : IGetAggregateEntityEventEntityId<TEvent, TEntityId> Type Parameters TEntityId TEventImplementation TEvent Inherited Members IGetAggregateEntityEventEntityId<TEvent, TEntityId>.GetId(TEvent) Extension Methods NullableCE.NotNull<T>(T?) Methods SetEntityId(TEventImplementation, TEntityId) void SetEntityId(TEventImplementation @event, TEntityId id) Parameters event TEventImplementation id TEntityId"
  },
  "api/Compze.Persistence.EventStore.Aggregates.IReadOnlyEntityCollection-2.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.IReadOnlyEntityCollection-2.html",
    "title": "Interface IReadOnlyEntityCollection<TEntity, TEntityId> | Compze",
    "keywords": "Interface IReadOnlyEntityCollection<TEntity, TEntityId> Namespace Compze.Persistence.EventStore.Aggregates Assembly Compze.dll public interface IReadOnlyEntityCollection<TEntity, in TEntityId> : IEnumerable<TEntity>, IEnumerable Type Parameters TEntity TEntityId Inherited Members IEnumerable<TEntity>.GetEnumerator() Extension Methods NullableCE.NotNull<T>(T?) Properties InCreationOrder IReadOnlyList<TEntity> InCreationOrder { get; } Property Value IReadOnlyList<TEntity> this[TEntityId] TEntity this[TEntityId id] { get; } Parameters id TEntityId Property Value TEntity Methods Contains(TEntityId) bool Contains(TEntityId id) Parameters id TEntityId Returns bool Get(TEntityId) TEntity Get(TEntityId id) Parameters id TEntityId Returns TEntity TryGet(TEntityId, out TEntity) bool TryGet(TEntityId id, out TEntity component) Parameters id TEntityId component TEntity Returns bool"
  },
  "api/Compze.Persistence.EventStore.Aggregates.html": {
    "href": "api/Compze.Persistence.EventStore.Aggregates.html",
    "title": "Namespace Compze.Persistence.EventStore.Aggregates | Compze",
    "keywords": "Namespace Compze.Persistence.EventStore.Aggregates Classes Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.EntityCollectionManager<TParent, TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEventImplementation, TNestedComponentEvent> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Component<TComponent, TComponentEventImplementation, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.Entity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter>.CollectionManager Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter> Aggregate<TAggregate, TAggregateEventImplementation, TAggregateEvent, TWrapperEventImplementation, TWrapperEventInterface>.RemovableEntity<TEntity, TEntityId, TEntityEventImplementation, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEntityEventIdGetterSetter>.CollectionManager AllowPublicSettersAttribute EntityCollection<TEntity, TEntityId> Interfaces IGetAggregateEntityEventEntityId<TEvent, TEntityId> IGetSetAggregateEntityEventEntityId<TEntityId, TEventImplementation, TEvent> IReadOnlyEntityCollection<TEntity, TEntityId>"
  },
  "api/Compze.Persistence.EventStore.AttemptToSaveAlreadyPersistedAggregateException.html": {
    "href": "api/Compze.Persistence.EventStore.AttemptToSaveAlreadyPersistedAggregateException.html",
    "title": "Class AttemptToSaveAlreadyPersistedAggregateException | Compze",
    "keywords": "Class AttemptToSaveAlreadyPersistedAggregateException Namespace Compze.Persistence.EventStore Assembly Compze.CQRS.dll public class AttemptToSaveAlreadyPersistedAggregateException : Exception, ISerializable Inheritance object Exception AttemptToSaveAlreadyPersistedAggregateException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AttemptToSaveAlreadyPersistedAggregateException(IEventStored) public AttemptToSaveAlreadyPersistedAggregateException(IEventStored aggregate) Parameters aggregate IEventStored"
  },
  "api/Compze.Persistence.EventStore.AttemptToSaveEmptyAggregateException.html": {
    "href": "api/Compze.Persistence.EventStore.AttemptToSaveEmptyAggregateException.html",
    "title": "Class AttemptToSaveEmptyAggregateException | Compze",
    "keywords": "Class AttemptToSaveEmptyAggregateException Namespace Compze.Persistence.EventStore Assembly Compze.CQRS.dll public class AttemptToSaveEmptyAggregateException : Exception, ISerializable Inheritance object Exception AttemptToSaveEmptyAggregateException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AttemptToSaveEmptyAggregateException(object) public AttemptToSaveEmptyAggregateException(object value) Parameters value object"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.Command.SaveAggregate-1.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.Command.SaveAggregate-1.html",
    "title": "Class EventStoreApi.Command.SaveAggregate<TAggregate> | Compze",
    "keywords": "Class EventStoreApi.Command.SaveAggregate<TAggregate> Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.Command.SaveAggregate<TAggregate> : MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand, IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage where TAggregate : class, IEventStored Type Parameters TAggregate Inheritance object MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand EventStoreApi.Command.SaveAggregate<TAggregate> Implements IStrictlyLocalCommand ICommand IMustBeSentTransactionally IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.Command.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.Command.html",
    "title": "Class EventStoreApi.Command | Compze",
    "keywords": "Class EventStoreApi.Command Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.Command Inheritance object EventStoreApi.Command Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Save<TAggregate>(TAggregate) public EventStoreApi.Command.SaveAggregate<TAggregate> Save<TAggregate>(TAggregate account) where TAggregate : class, IEventStored Parameters account TAggregate Returns EventStoreApi.Command.SaveAggregate<TAggregate> Type Parameters TAggregate"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.CommandApi.SaveAggregate-1.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.CommandApi.SaveAggregate-1.html",
    "title": "Class EventStoreApi.CommandApi.SaveAggregate<TAggregate> | Compze",
    "keywords": "Class EventStoreApi.CommandApi.SaveAggregate<TAggregate> Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.CommandApi.SaveAggregate<TAggregate> : MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand, IStrictlyLocalCommand, ICommand, IMustBeSentTransactionally, IMessage, IStrictlyLocalMessage where TAggregate : class, IEventStored Type Parameters TAggregate Inheritance object MessageTypes.StrictlyLocal.Commands.StrictlyLocalCommand EventStoreApi.CommandApi.SaveAggregate<TAggregate> Implements IStrictlyLocalCommand ICommand IMustBeSentTransactionally IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.CommandApi.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.CommandApi.html",
    "title": "Class EventStoreApi.CommandApi | Compze",
    "keywords": "Class EventStoreApi.CommandApi Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.CommandApi Inheritance object EventStoreApi.CommandApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Save<TAggregate>(TAggregate) public EventStoreApi.CommandApi.SaveAggregate<TAggregate> Save<TAggregate>(TAggregate account) where TAggregate : class, IEventStored Parameters account TAggregate Returns EventStoreApi.CommandApi.SaveAggregate<TAggregate> Type Parameters TAggregate"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.AggregateLink-1.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.AggregateLink-1.html",
    "title": "Class EventStoreApi.QueryApi.AggregateLink<TAggregate> | Compze",
    "keywords": "Class EventStoreApi.QueryApi.AggregateLink<TAggregate> Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.QueryApi.AggregateLink<TAggregate> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.AggregateLink<TAggregate>, TAggregate>, IStrictlyLocalQuery<EventStoreApi.QueryApi.AggregateLink<TAggregate>, TAggregate>, IQuery<TAggregate>, IHasReturnValue<TAggregate>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TAggregate : class, IEventStored Type Parameters TAggregate Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.AggregateLink<TAggregate>, TAggregate> EventStoreApi.QueryApi.AggregateLink<TAggregate> Implements IStrictlyLocalQuery<EventStoreApi.QueryApi.AggregateLink<TAggregate>, TAggregate> IQuery<TAggregate> IHasReturnValue<TAggregate> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.GetAggregateHistory-1.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.GetAggregateHistory-1.html",
    "title": "Class EventStoreApi.QueryApi.GetAggregateHistory<TEvent> | Compze",
    "keywords": "Class EventStoreApi.QueryApi.GetAggregateHistory<TEvent> Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.QueryApi.GetAggregateHistory<TEvent> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.GetAggregateHistory<TEvent>, IEnumerable<TEvent>>, IStrictlyLocalQuery<EventStoreApi.QueryApi.GetAggregateHistory<TEvent>, IEnumerable<TEvent>>, IQuery<IEnumerable<TEvent>>, IHasReturnValue<IEnumerable<TEvent>>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TEvent : IAggregateEvent Type Parameters TEvent Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.GetAggregateHistory<TEvent>, IEnumerable<TEvent>> EventStoreApi.QueryApi.GetAggregateHistory<TEvent> Implements IStrictlyLocalQuery<EventStoreApi.QueryApi.GetAggregateHistory<TEvent>, IEnumerable<TEvent>> IQuery<IEnumerable<TEvent>> IHasReturnValue<IEnumerable<TEvent>> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate-1.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate-1.html",
    "title": "Class EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> | Compze",
    "keywords": "Class EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate>, TAggregate>, IStrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate>, TAggregate>, IQuery<TAggregate>, IHasReturnValue<TAggregate>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TAggregate : class, IEventStored Type Parameters TAggregate Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate>, TAggregate> EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> Implements IStrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate>, TAggregate> IQuery<TAggregate> IHasReturnValue<TAggregate> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion-1.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion-1.html",
    "title": "Class EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> | Compze",
    "keywords": "Class EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> : MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate>, TAggregate>, IStrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate>, TAggregate>, IQuery<TAggregate>, IHasReturnValue<TAggregate>, IHypermediaMessage, IRequireAResponse, ICannotBeSentRemotelyFromWithinTransaction, IMessage, IStrictlyLocalMessage where TAggregate : class, IEventStored Type Parameters TAggregate Inheritance object MessageTypes.StrictlyLocal.Queries.StrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate>, TAggregate> EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> Implements IStrictlyLocalQuery<EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate>, TAggregate> IQuery<TAggregate> IHasReturnValue<TAggregate> IHypermediaMessage IRequireAResponse ICannotBeSentRemotelyFromWithinTransaction IMessage IStrictlyLocalMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.QueryApi.html",
    "title": "Class EventStoreApi.QueryApi | Compze",
    "keywords": "Class EventStoreApi.QueryApi Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi.QueryApi Inheritance object EventStoreApi.QueryApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods GetForUpdate<TAggregate>(Guid) public EventStoreApi.QueryApi.AggregateLink<TAggregate> GetForUpdate<TAggregate>(Guid id) where TAggregate : class, IEventStored Parameters id Guid Returns EventStoreApi.QueryApi.AggregateLink<TAggregate> Type Parameters TAggregate GetHistory<TEvent>(Guid) public EventStoreApi.QueryApi.GetAggregateHistory<TEvent> GetHistory<TEvent>(Guid id) where TEvent : IAggregateEvent Parameters id Guid Returns EventStoreApi.QueryApi.GetAggregateHistory<TEvent> Type Parameters TEvent GetReadOnlyCopyOfVersion<TAggregate>(Guid, int) public EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> GetReadOnlyCopyOfVersion<TAggregate>(Guid id, int version) where TAggregate : class, IEventStored Parameters id Guid version int Returns EventStoreApi.QueryApi.GetReadonlyCopyOfAggregateVersion<TAggregate> Type Parameters TAggregate GetReadOnlyCopy<TAggregate>(Guid) public EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> GetReadOnlyCopy<TAggregate>(Guid id) where TAggregate : class, IEventStored Parameters id Guid Returns EventStoreApi.QueryApi.GetReadonlyCopyOfAggregate<TAggregate> Type Parameters TAggregate"
  },
  "api/Compze.Persistence.EventStore.EventStoreApi.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreApi.html",
    "title": "Class EventStoreApi | Compze",
    "keywords": "Class EventStoreApi Namespace Compze.Persistence.EventStore Assembly Compze.Messaging.dll public class EventStoreApi Inheritance object EventStoreApi Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Properties Commands public EventStoreApi.CommandApi Commands { get; } Property Value EventStoreApi.CommandApi Queries public EventStoreApi.QueryApi Queries { get; } Property Value EventStoreApi.QueryApi"
  },
  "api/Compze.Persistence.EventStore.EventStoreExtensions.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreExtensions.html",
    "title": "Class EventStoreExtensions | Compze",
    "keywords": "Class EventStoreExtensions Namespace Compze.Persistence.EventStore Assembly Compze.dll public static class EventStoreExtensions Inheritance object EventStoreExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods StreamAggregateIdsInCreationOrder<TAggregateEvent>(IEventStore) public static IEnumerable<Guid> StreamAggregateIdsInCreationOrder<TAggregateEvent>(this IEventStore @this) Parameters this IEventStore Returns IEnumerable<Guid> Type Parameters TAggregateEvent"
  },
  "api/Compze.Persistence.EventStore.EventStoreTestingExtensions.html": {
    "href": "api/Compze.Persistence.EventStore.EventStoreTestingExtensions.html",
    "title": "Class EventStoreTestingExtensions | Compze",
    "keywords": "Class EventStoreTestingExtensions Namespace Compze.Persistence.EventStore Assembly Compze.dll public static class EventStoreTestingExtensions Inheritance object EventStoreTestingExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ListAllEventsForTestingPurposesAbsolutelyNotUsableForARealEventStoreOfAnySize(IEventStore, int) public static IReadOnlyList<IAggregateEvent> ListAllEventsForTestingPurposesAbsolutelyNotUsableForARealEventStoreOfAnySize(this IEventStore @this, int batchSize = 10000) Parameters this IEventStore batchSize int Returns IReadOnlyList<IAggregateEvent>"
  },
  "api/Compze.Persistence.EventStore.IAggregateCreatedEvent.html": {
    "href": "api/Compze.Persistence.EventStore.IAggregateCreatedEvent.html",
    "title": "Interface IAggregateCreatedEvent | Compze",
    "keywords": "Interface IAggregateCreatedEvent Namespace Compze.Persistence.EventStore Assembly Compze.dll Marks an event as meaning that the aggregate was created. Can be used by clients to perform logic that should happen whenever an aggregate is created. Is used in several places in the infrastructure and the infrastructure will fail in various ways if this events is not inherited correctly. For example: Aggregate: Id is only set when such an event is raised. It is only ever possibly to raise 1 such event. More than one will cause an exception SingleAggregateQueryModelUpdater: Creates the initial query model when it receives such an event public interface IAggregateCreatedEvent : IAggregateEvent, IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAggregateEvent.AggregateVersion IAggregateEvent.AggregateId IAggregateEvent.UtcTimeStamp IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.IAggregateDeletedEvent.html": {
    "href": "api/Compze.Persistence.EventStore.IAggregateDeletedEvent.html",
    "title": "Interface IAggregateDeletedEvent | Compze",
    "keywords": "Interface IAggregateDeletedEvent Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IAggregateDeletedEvent : IAggregateEvent, IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAggregateEvent.AggregateVersion IAggregateEvent.AggregateId IAggregateEvent.UtcTimeStamp IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.IAggregateEvent-1.html": {
    "href": "api/Compze.Persistence.EventStore.IAggregateEvent-1.html",
    "title": "Interface IAggregateEvent<TEventInterface> | Compze",
    "keywords": "Interface IAggregateEvent<TEventInterface> Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IAggregateEvent<out TEventInterface> : IExactlyOnceWrapperEvent<TEventInterface>, IWrapperEvent<TEventInterface>, IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage where TEventInterface : IAggregateEvent Type Parameters TEventInterface Inherited Members IWrapperEvent<TEventInterface>.Event IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting)"
  },
  "api/Compze.Persistence.EventStore.IAggregateEvent.html": {
    "href": "api/Compze.Persistence.EventStore.IAggregateEvent.html",
    "title": "Interface IAggregateEvent | Compze",
    "keywords": "Interface IAggregateEvent Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IAggregateEvent : IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?) Properties AggregateId Guid AggregateId { get; } Property Value Guid AggregateVersion int AggregateVersion { get; } Property Value int UtcTimeStamp DateTime UtcTimeStamp { get; } Property Value DateTime"
  },
  "api/Compze.Persistence.EventStore.IAggregateWrapperEvent-1.html": {
    "href": "api/Compze.Persistence.EventStore.IAggregateWrapperEvent-1.html",
    "title": "Interface IAggregateWrapperEvent<TEventInterface> | Compze",
    "keywords": "Interface IAggregateWrapperEvent<TEventInterface> Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IAggregateWrapperEvent<out TEventInterface> : IExactlyOnceWrapperEvent<TEventInterface>, IWrapperEvent<TEventInterface>, IEvent, IMessage where TEventInterface : IAggregateEvent Type Parameters TEventInterface Inherited Members IWrapperEvent<TEventInterface>.Event Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.IEventCache.html": {
    "href": "api/Compze.Persistence.EventStore.IEventCache.html",
    "title": "Interface IEventCache | Compze",
    "keywords": "Interface IEventCache Namespace Compze.Persistence.EventStore Assembly Compze.EventStore.dll public interface IEventCache Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Clear() void Clear()"
  },
  "api/Compze.Persistence.EventStore.IEventStore.html": {
    "href": "api/Compze.Persistence.EventStore.IEventStore.html",
    "title": "Interface IEventStore | Compze",
    "keywords": "Interface IEventStore Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IEventStore : IDisposable Inherited Members IDisposable.Dispose() Extension Methods EventStoreExtensions.StreamAggregateIdsInCreationOrder<TAggregateEvent>(IEventStore) EventStoreTestingExtensions.ListAllEventsForTestingPurposesAbsolutelyNotUsableForARealEventStoreOfAnySize(IEventStore, int) NullableCE.NotNull<T>(T?) Methods DeleteAggregate(Guid) void DeleteAggregate(Guid aggregateId) Parameters aggregateId Guid GetAggregateHistory(Guid) IReadOnlyList<IAggregateEvent> GetAggregateHistory(Guid id) Parameters id Guid Returns IReadOnlyList<IAggregateEvent> GetAggregateHistoryForUpdate(Guid) IReadOnlyList<IAggregateEvent> GetAggregateHistoryForUpdate(Guid id) Parameters id Guid Returns IReadOnlyList<IAggregateEvent> PersistMigrations() void PersistMigrations() SaveSingleAggregateEvents(IReadOnlyList<IAggregateEvent>) void SaveSingleAggregateEvents(IReadOnlyList<IAggregateEvent> events) Parameters events IReadOnlyList<IAggregateEvent> StreamAggregateIdsInCreationOrder(Type?) The passed eventType filters the aggregate Ids so that only ids of aggregates that are created by an event that inherits from eventType are returned. IEnumerable<Guid> StreamAggregateIdsInCreationOrder(Type? eventType = null) Parameters eventType Type Returns IEnumerable<Guid> StreamEvents(int, Action<IReadOnlyList<IAggregateEvent>>) void StreamEvents(int batchSize, Action<IReadOnlyList<IAggregateEvent>> handleEvents) Parameters batchSize int handleEvents Action<IReadOnlyList<IAggregateEvent>>"
  },
  "api/Compze.Persistence.EventStore.IEventStoreReader.html": {
    "href": "api/Compze.Persistence.EventStore.IEventStoreReader.html",
    "title": "Interface IEventStoreReader | Compze",
    "keywords": "Interface IEventStoreReader Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IEventStoreReader Extension Methods NullableCE.NotNull<T>(T?) Methods GetHistory(Guid) IReadOnlyList<IAggregateEvent> GetHistory(Guid aggregateId) Parameters aggregateId Guid Returns IReadOnlyList<IAggregateEvent> GetReadonlyCopyOfVersion<TAggregate>(Guid, int) Loads a specific version of the aggregate. This instance is NOT tracked for changes. No changes to this entity vill be persisted. TAggregate GetReadonlyCopyOfVersion<TAggregate>(Guid aggregateId, int version) where TAggregate : class, IEventStored Parameters aggregateId Guid version int Returns TAggregate Type Parameters TAggregate GetReadonlyCopy<TAggregate>(Guid) TAggregate GetReadonlyCopy<TAggregate>(Guid aggregateId) where TAggregate : class, IEventStored Parameters aggregateId Guid Returns TAggregate Type Parameters TAggregate"
  },
  "api/Compze.Persistence.EventStore.IEventStoreUpdater.html": {
    "href": "api/Compze.Persistence.EventStore.IEventStoreUpdater.html",
    "title": "Interface IEventStoreUpdater | Compze",
    "keywords": "Interface IEventStoreUpdater Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IEventStoreUpdater : IDisposable Inherited Members IDisposable.Dispose() Extension Methods NullableCE.NotNull<T>(T?) Methods Delete(Guid) Deletes all traces of an aggregate from the store. void Delete(Guid aggregateId) Parameters aggregateId Guid Get<TAggregate>(Guid) Loads an aggregate and tracks it for changes. TAggregate Get<TAggregate>(Guid aggregateId) where TAggregate : class, IEventStored Parameters aggregateId Guid Returns TAggregate Type Parameters TAggregate Save<TAggregate>(TAggregate) Causes the store to start tracking the aggregate. void Save<TAggregate>(TAggregate aggregate) where TAggregate : class, IEventStored Parameters aggregate TAggregate Type Parameters TAggregate TryGet<TAggregate>(Guid, out TAggregate?) Tries to get the specified instance. Returns false and sets the result to null if the aggregate did not exist. bool TryGet<TAggregate>(Guid aggregateId, out TAggregate? result) where TAggregate : class, IEventStored Parameters aggregateId Guid result TAggregate Returns bool Type Parameters TAggregate"
  },
  "api/Compze.Persistence.EventStore.IEventStored-1.html": {
    "href": "api/Compze.Persistence.EventStore.IEventStored-1.html",
    "title": "Interface IEventStored<TEvent> | Compze",
    "keywords": "Interface IEventStored<TEvent> Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IEventStored<out TEvent> : IEventStored where TEvent : IAggregateEvent Type Parameters TEvent Inherited Members IEventStored.Id IEventStored.Version IEventStored.Commit(Action<IReadOnlyList<IAggregateEvent>>) IEventStored.LoadFromHistory(IEnumerable<IAggregateEvent>) IEventStored.SetTimeSource(IUtcTimeTimeSource) Extension Methods NullableCE.NotNull<T>(T?) Properties EventStream IObservable<out TEvent> EventStream { get; } Property Value IObservable<TEvent>"
  },
  "api/Compze.Persistence.EventStore.IEventStored.html": {
    "href": "api/Compze.Persistence.EventStore.IEventStored.html",
    "title": "Interface IEventStored | Compze",
    "keywords": "Interface IEventStored Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IEventStored Extension Methods NullableCE.NotNull<T>(T?) Properties EventStream IObservable<IAggregateEvent> EventStream { get; } Property Value IObservable<IAggregateEvent> Id Guid Id { get; } Property Value Guid Version int Version { get; } Property Value int Methods Commit(Action<IReadOnlyList<IAggregateEvent>>) void Commit(Action<IReadOnlyList<IAggregateEvent>> commitEvents) Parameters commitEvents Action<IReadOnlyList<IAggregateEvent>> LoadFromHistory(IEnumerable<IAggregateEvent>) void LoadFromHistory(IEnumerable<IAggregateEvent> history) Parameters history IEnumerable<IAggregateEvent> SetTimeSource(IUtcTimeTimeSource) void SetTimeSource(IUtcTimeTimeSource timeSource) Parameters timeSource IUtcTimeTimeSource"
  },
  "api/Compze.Persistence.EventStore.IMutableAggregateEvent.html": {
    "href": "api/Compze.Persistence.EventStore.IMutableAggregateEvent.html",
    "title": "Interface IMutableAggregateEvent | Compze",
    "keywords": "Interface IMutableAggregateEvent Namespace Compze.Persistence.EventStore Assembly Compze.dll public interface IMutableAggregateEvent : IAggregateEvent, IExactlyOnceEvent, IRemotableEvent, IEvent, IExactlyOnceMessage, IMustBeSentAndHandledTransactionally, IMustBeSentTransactionally, IAtMostOnceMessage, IRemotableMessage, IMustBeHandledTransactionally, IMessage Inherited Members IAggregateEvent.AggregateVersion IAggregateEvent.AggregateId IAggregateEvent.UtcTimeStamp IAtMostOnceMessage.MessageId Extension Methods NullableCE.NotNull<T>(T?) Methods SetAggregateId(Guid) void SetAggregateId(Guid aggregateId) Parameters aggregateId Guid SetAggregateVersion(int) void SetAggregateVersion(int aggregateVersion) Parameters aggregateVersion int SetMessageId(Guid) void SetMessageId(Guid messageId) Parameters messageId Guid SetUtcTimeStamp(DateTime) void SetUtcTimeStamp(DateTime utcTimeStamp) Parameters utcTimeStamp DateTime"
  },
  "api/Compze.Persistence.EventStore.InvalidHistoryException.html": {
    "href": "api/Compze.Persistence.EventStore.InvalidHistoryException.html",
    "title": "Class InvalidHistoryException | Compze",
    "keywords": "Class InvalidHistoryException Namespace Compze.Persistence.EventStore Assembly Compze.CQRS.dll public class InvalidHistoryException : Exception, ISerializable Inheritance object Exception InvalidHistoryException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors InvalidHistoryException(Guid) public InvalidHistoryException(Guid aggregateId) Parameters aggregateId Guid"
  },
  "api/Compze.Persistence.EventStore.Query.Models.Generators.IQueryModelGenerator.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.Generators.IQueryModelGenerator.html",
    "title": "Interface IQueryModelGenerator | Compze",
    "keywords": "Interface IQueryModelGenerator Namespace Compze.Persistence.EventStore.Query.Models.Generators Assembly Compze.dll public interface IQueryModelGenerator Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Query.Models.Generators.IVersioningDocumentDbReader.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.Generators.IVersioningDocumentDbReader.html",
    "title": "Interface IVersioningDocumentDbReader | Compze",
    "keywords": "Interface IVersioningDocumentDbReader Namespace Compze.Persistence.EventStore.Query.Models.Generators Assembly Compze.dll public interface IVersioningDocumentDbReader : IDocumentDbReader, IDisposable Inherited Members IDocumentDbReader.Get<TValue>(object) IDocumentDbReader.TryGet<TValue>(object, out TValue) IDocumentDbReader.GetAll<T>(IEnumerable<Guid>) IDisposable.Dispose() Extension Methods NullableCE.NotNull<T>(T?) Methods GetVersion<TValue>(object, int) TValue GetVersion<TValue>(object key, int version) Parameters key object version int Returns TValue Type Parameters TValue TryGetVersion<TDocument>(object, out TDocument, int) bool TryGetVersion<TDocument>(object key, out TDocument document, int version) Parameters key object document TDocument version int Returns bool Type Parameters TDocument"
  },
  "api/Compze.Persistence.EventStore.Query.Models.Generators.QueryModelGeneratingDocumentDbReader.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.Generators.QueryModelGeneratingDocumentDbReader.html",
    "title": "Class QueryModelGeneratingDocumentDbReader | Compze",
    "keywords": "Class QueryModelGeneratingDocumentDbReader Namespace Compze.Persistence.EventStore.Query.Models.Generators Assembly Compze.dll public class QueryModelGeneratingDocumentDbReader : IVersioningDocumentDbReader, IDocumentDbReader, IDisposable Inheritance object QueryModelGeneratingDocumentDbReader Implements IVersioningDocumentDbReader IDocumentDbReader IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors QueryModelGeneratingDocumentDbReader(IEnumerable<IQueryModelGenerator>) public QueryModelGeneratingDocumentDbReader(IEnumerable<IQueryModelGenerator> documentGenerators) Parameters documentGenerators IEnumerable<IQueryModelGenerator> Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool GetAll<TValue>(IEnumerable<Guid>) public virtual IEnumerable<TValue> GetAll<TValue>(IEnumerable<Guid> ids) where TValue : IHasPersistentIdentity<Guid> Parameters ids IEnumerable<Guid> Returns IEnumerable<TValue> Type Parameters TValue GetVersion<TValue>(object, int) public virtual TValue GetVersion<TValue>(object key, int version) Parameters key object version int Returns TValue Type Parameters TValue Get<TValue>(object) public virtual TValue Get<TValue>(object key) Parameters key object Returns TValue Type Parameters TValue TryGetVersion<TDocument>(object, out TDocument, int) public virtual bool TryGetVersion<TDocument>(object key, out TDocument document, int version = -1) Parameters key object document TDocument version int Returns bool Type Parameters TDocument TryGet<TDocument>(object, out TDocument) public virtual bool TryGet<TDocument>(object key, out TDocument document) Parameters key object document TDocument Returns bool Type Parameters TDocument"
  },
  "api/Compze.Persistence.EventStore.Query.Models.Generators.SingleAggregateQueryModelGenerator-4.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.Generators.SingleAggregateQueryModelGenerator-4.html",
    "title": "Class SingleAggregateQueryModelGenerator<TImplementer, TViewModel, TEvent, TSession> | Compze",
    "keywords": "Class SingleAggregateQueryModelGenerator<TImplementer, TViewModel, TEvent, TSession> Namespace Compze.Persistence.EventStore.Query.Models.Generators Assembly Compze.dll [UsedImplicitly(ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature)] public abstract class SingleAggregateQueryModelGenerator<TImplementer, TViewModel, TEvent, TSession> : IQueryModelGenerator where TImplementer : SingleAggregateQueryModelGenerator<TImplementer, TViewModel, TEvent, TSession> where TViewModel : class, ISingleAggregateQueryModel where TEvent : class, IAggregateEvent where TSession : IEventStoreReader Type Parameters TImplementer TViewModel TEvent TSession Inheritance object SingleAggregateQueryModelGenerator<TImplementer, TViewModel, TEvent, TSession> Implements IQueryModelGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors SingleAggregateQueryModelGenerator(TSession) protected SingleAggregateQueryModelGenerator(TSession session) Parameters session TSession Properties Model protected TViewModel? Model { get; } Property Value TViewModel Methods RegisterHandlers() Registers handlers for the incoming events. All matching handlers will be called in the order they were registered. protected IEventHandlerRegistrar<TEvent> RegisterHandlers() Returns IEventHandlerRegistrar<TEvent> TryGenerate(Guid) public Option<TViewModel> TryGenerate(Guid id) Parameters id Guid Returns Option<TViewModel> TryGenerate(Guid, int) public Option<TViewModel> TryGenerate(Guid id, int version) Parameters id Guid version int Returns Option<TViewModel>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.Generators.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.Generators.html",
    "title": "Namespace Compze.Persistence.EventStore.Query.Models.Generators | Compze",
    "keywords": "Namespace Compze.Persistence.EventStore.Query.Models.Generators Classes QueryModelGeneratingDocumentDbReader SingleAggregateQueryModelGenerator<TImplementer, TViewModel, TEvent, TSession> Interfaces IQueryModelGenerator IVersioningDocumentDbReader"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.IReadonlyQueryModelEntityCollection-2.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.IReadonlyQueryModelEntityCollection-2.html",
    "title": "Interface IReadonlyQueryModelEntityCollection<TEntity, TEntityId> | Compze",
    "keywords": "Interface IReadonlyQueryModelEntityCollection<TEntity, TEntityId> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public interface IReadonlyQueryModelEntityCollection<TEntity, in TEntityId> : IEnumerable<TEntity>, IEnumerable Type Parameters TEntity TEntityId Inherited Members IEnumerable<TEntity>.GetEnumerator() Extension Methods NullableCE.NotNull<T>(T?) Properties InCreationOrder IReadOnlyList<TEntity> InCreationOrder { get; } Property Value IReadOnlyList<TEntity> this[TEntityId] TEntity this[TEntityId id] { get; } Parameters id TEntityId Property Value TEntity Methods Contains(TEntityId) bool Contains(TEntityId id) Parameters id TEntityId Returns bool Get(TEntityId) TEntity Get(TEntityId id) Parameters id TEntityId Returns TEntity TryGet(TEntityId, out TEntity) bool TryGet(TEntityId id, out TEntity component) Parameters id TEntityId component TEntity Returns bool"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.QueryModelEntityCollection-2.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.QueryModelEntityCollection-2.html",
    "title": "Class QueryModelEntityCollection<TEntity, TEntityId> | Compze",
    "keywords": "Class QueryModelEntityCollection<TEntity, TEntityId> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class QueryModelEntityCollection<TEntity, TEntityId> : IReadonlyQueryModelEntityCollection<TEntity, TEntityId>, IEnumerable<TEntity>, IEnumerable where TEntityId : notnull Type Parameters TEntity TEntityId Inheritance object QueryModelEntityCollection<TEntity, TEntityId> Implements IReadonlyQueryModelEntityCollection<TEntity, TEntityId> IEnumerable<TEntity> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Properties InCreationOrder public IReadOnlyList<TEntity> InCreationOrder { get; } Property Value IReadOnlyList<TEntity> this[TEntityId] public TEntity this[TEntityId id] { get; } Parameters id TEntityId Property Value TEntity Methods Contains(TEntityId) public bool Contains(TEntityId id) Parameters id TEntityId Returns bool Get(TEntityId) public TEntity Get(TEntityId id) Parameters id TEntityId Returns TEntity GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<TEntity> GetEnumerator() Returns IEnumerator<TEntity> An enumerator that can be used to iterate through the collection. TryGet(TEntityId, out TEntity) public bool TryGet(TEntityId id, out TEntity component) Parameters id TEntityId component TEntity Returns bool"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.NestedComponent-2.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.NestedComponent-2.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll [UsedImplicitly(ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature)] public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TNestedComponent, TNestedComponentEvent> where TNestedComponent : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> where TNestedComponentEvent : class, TComponentEvent Type Parameters TNestedComponent TNestedComponentEvent Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TNestedComponent, TNestedComponentEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> Derived SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TNestedComponent, TNestedComponentEvent>.RegisterEventAppliers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors NestedComponent(IEventHandlerRegistrar<TNestedComponentEvent>, bool) protected NestedComponent(IEventHandlerRegistrar<TNestedComponentEvent> appliersRegistrar, bool registerEventAppliers) Parameters appliersRegistrar IEventHandlerRegistrar<TNestedComponentEvent> registerEventAppliers bool NestedComponent(TComponent) protected NestedComponent(TComponent parent) Parameters parent TComponent"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.NestedEntity-5.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.NestedEntity-5.CollectionManager.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.IdGetter SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.ManagedEntities SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Entities object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.NestedEntity-5.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.NestedEntity-5.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TEntity, TEntityEvent> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> where TEntityId : struct where TEntityEvent : class, TComponentEvent where TEntityCreatedEvent : TEntityEvent where TEventEntityIdGetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TEntity TEntityId TEntityEvent TEntityCreatedEvent TEventEntityIdGetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Derived SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.RegisterEventAppliers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors NestedEntity(IEventHandlerRegistrar<TEntityEvent>) protected NestedEntity(IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters appliersRegistrar IEventHandlerRegistrar<TEntityEvent> NestedEntity(TComponent) protected NestedEntity(TComponent parent) Parameters parent TComponent Properties Id public TEntityId Id { get; } Property Value TEntityId Methods CreateSelfManagingCollection(TComponent) public static SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager CreateSelfManagingCollection(TComponent parent) Parameters parent TComponent Returns SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.QueryModelEntityCollectionManager-6.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.QueryModelEntityCollectionManager-6.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> where TEntityId : notnull where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityEventIdGetterSetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TParent TEntity TEntityId TEntityEvent TEntityCreatedEvent TEntityEventIdGetterSetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> Derived SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors QueryModelEntityCollectionManager(TParent, IEventHandlerRegistrar<TEntityEvent>) protected QueryModelEntityCollectionManager(TParent parent, IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters parent TParent appliersRegistrar IEventHandlerRegistrar<TEntityEvent> Fields IdGetter protected static readonly TEntityEventIdGetterSetter IdGetter Field Value TEntityEventIdGetterSetter Properties Entities public IReadonlyQueryModelEntityCollection<TEntity, TEntityId> Entities { get; } Property Value IReadonlyQueryModelEntityCollection<TEntity, TEntityId> ManagedEntities protected QueryModelEntityCollection<TEntity, TEntityId> ManagedEntities { get; } Property Value QueryModelEntityCollection<TEntity, TEntityId>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.QueryModelEntityCollectionManager-7.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.QueryModelEntityCollectionManager-7.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> where TEntityId : notnull where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityRemovedEvent : TEntityEvent where TEventEntityIdGetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TParent TEntity TEntityId TEntityEvent TEntityCreatedEvent TEntityRemovedEvent TEventEntityIdGetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Derived SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.IdGetter SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.ManagedEntities SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Entities object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors QueryModelEntityCollectionManager(TParent, IEventHandlerRegistrar<TEntityEvent>) protected QueryModelEntityCollectionManager(TParent parent, IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters parent TParent appliersRegistrar IEventHandlerRegistrar<TEntityEvent>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.RemovableNestedEntity-6.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.RemovableNestedEntity-6.CollectionManager.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.IdGetter SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.ManagedEntities SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TComponent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Entities object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.RemovableNestedEntity-6.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.RemovableNestedEntity-6.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> where TEntityId : struct where TEntityEvent : class, TComponentEvent where TEntityCreatedEvent : TEntityEvent where TEntityRemovedEvent : TEntityEvent where TEventEntityIdGetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TEntity TEntityId TEntityEvent TEntityCreatedEvent TEntityRemovedEvent TEventEntityIdGetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Id SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CreateSelfManagingCollection(TComponent) SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.RegisterEventAppliers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors RemovableNestedEntity(TComponent) protected RemovableNestedEntity(TComponent parent) Parameters parent TComponent Methods CreateSelfManagingCollection(TComponent) public static SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager CreateSelfManagingCollection(TComponent parent) Parameters parent TComponent Returns SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.SlavedNestedEntity-4.EntityCollectionManagerBase.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.SlavedNestedEntity-4.EntityCollectionManagerBase.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter>.EntityCollectionManagerBase | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter>.EntityCollectionManagerBase Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.CQRS.dll public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter>.EntityCollectionManagerBase Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter>.EntityCollectionManagerBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors EntityCollectionManagerBase(IEventHandlerRegistrar<TEntityEvent>) protected EntityCollectionManagerBase(IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters appliersRegistrar IEventHandlerRegistrar<TEntityEvent> Properties Entities public IReadonlyQueryModelEntityCollection<TEntity, TEntityId> Entities { get; } Property Value IReadonlyQueryModelEntityCollection<TEntity, TEntityId>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.SlavedNestedEntity-4.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.SlavedNestedEntity-4.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.CQRS.dll An entity that is not created and removed through raising events. Instead it is automatically created and/or removed when another entity in the Aggregate object graph is added or removed. Inheritors must implement the add/remove behavior. Inheritors must ensure that the Id property is initialized. Usually this is implemented within a nested class that inherits from SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter>.EntityCollectionManagerBase public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TEntity, TEntityEvent> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter> where TEntityId : notnull where TEntityEvent : class, TComponentEvent where TEventEntityIdGetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TEntity TEntityId TEntityEvent TEventEntityIdGetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.SlavedNestedEntity<TEntity, TEntityId, TEntityEvent, TEventEntityIdGetter> Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.RegisterEventAppliers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors SlavedNestedEntity(IEventHandlerRegistrar<TEntityEvent>) protected SlavedNestedEntity(IEventHandlerRegistrar<TEntityEvent> appliersRegistrar) Parameters appliersRegistrar IEventHandlerRegistrar<TEntityEvent> SlavedNestedEntity(TComponent) protected SlavedNestedEntity(TComponent parent) Parameters parent TComponent Properties Id protected TEntityId Id { get; set; } Property Value TEntityId"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Component-2.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent> where TComponent : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent> where TComponentEvent : class, TAggregateEvent Type Parameters TComponent TComponentEvent Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent> Derived SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Component(TQueryModel) protected Component(TQueryModel queryModel) Parameters queryModel TQueryModel Methods RegisterEventAppliers() protected IEventHandlerRegistrar<TComponentEvent> RegisterEventAppliers() Returns IEventHandlerRegistrar<TComponentEvent>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-5.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-5.CollectionManager.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.IdGetter SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.ManagedEntities SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Entities object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-5.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-5.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll [UsedImplicitly(ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature)] public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> where TEntityId : struct where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEventEntityIdGetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TEntity TEntityId TEntityEvent TEntityCreatedEvent TEventEntityIdGetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> Derived SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.RegisterEventAppliers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Entity(TQueryModel) protected Entity(TQueryModel queryModel) Parameters queryModel TQueryModel Properties Id public TEntityId Id { get; } Property Value TEntityId Methods CreateSelfManagingCollection(TQueryModel) public static SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager CreateSelfManagingCollection(TQueryModel parent) Parameters parent TQueryModel Returns SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-6.CollectionManager.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-6.CollectionManager.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.IdGetter SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.ManagedEntities SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.QueryModelEntityCollectionManager<TQueryModel, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Entities object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-6.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.Entity-6.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> where TEntity : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> where TEntityId : struct where TEntityEvent : class, TAggregateEvent where TEntityCreatedEvent : TEntityEvent where TEntityRemovedEvent : TEntityEvent where TEventEntityIdGetter : IGetAggregateEntityEventEntityId<TEntityEvent, TEntityId> Type Parameters TEntity TEntityId TEntityEvent TEntityCreatedEvent TEntityRemovedEvent TEventEntityIdGetter Inheritance object SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> Inherited Members SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.Id SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CreateSelfManagingCollection(TQueryModel) SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TEntity, TEntityEvent>.RegisterEventAppliers() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors Entity(TQueryModel) protected Entity(TQueryModel queryModel) Parameters queryModel TQueryModel Methods CreateSelfManagingCollection(TQueryModel) public static SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager CreateSelfManagingCollection(TQueryModel parent) Parameters parent TQueryModel Returns SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.SelfGeneratingQueryModel-2.html",
    "title": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> | Compze",
    "keywords": "Class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Assembly Compze.dll public abstract class SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> : VersionedEntity<TQueryModel>, IPersistentEntity<Guid>, IHasPersistentIdentity<Guid>, IEquatable<TQueryModel> where TQueryModel : SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> where TAggregateEvent : class, IAggregateEvent Type Parameters TQueryModel TAggregateEvent Inheritance object Entity<TQueryModel, Guid> Entity<TQueryModel> VersionedEntity<TQueryModel> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> Implements IPersistentEntity<Guid> IHasPersistentIdentity<Guid> IEquatable<TQueryModel> Inherited Members VersionedEntity<TQueryModel>.Version Entity<TQueryModel>.Equals(TQueryModel) Entity<TQueryModel>.Equals(object) Entity<TQueryModel>.GetHashCode() Entity<TQueryModel, Guid>.Id Entity<TQueryModel, Guid>.SetIdBeVerySureYouKnowWhatYouAreDoing(Guid) Entity<TQueryModel, Guid>.GetIdBypassContractValidation() Entity<TQueryModel, Guid>.Equals(TQueryModel) Entity<TQueryModel, Guid>.Equals(object) Entity<TQueryModel, Guid>.GetHashCode() Entity<TQueryModel, Guid>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors SelfGeneratingQueryModel() protected SelfGeneratingQueryModel() Methods ApplyEvent(TAggregateEvent) public void ApplyEvent(TAggregateEvent theEvent) Parameters theEvent TAggregateEvent AssertInvariantsAreMet() protected virtual void AssertInvariantsAreMet() HandlesEvent(TAggregateEvent) public bool HandlesEvent(TAggregateEvent @event) Parameters event TAggregateEvent Returns bool LoadFromHistory(IEnumerable<IAggregateEvent>) public void LoadFromHistory(IEnumerable<IAggregateEvent> history) Parameters history IEnumerable<IAggregateEvent> RegisterEventAppliers() protected IEventHandlerRegistrar<TAggregateEvent> RegisterEventAppliers() Returns IEventHandlerRegistrar<TAggregateEvent>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels.html",
    "title": "Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels | Compze",
    "keywords": "Namespace Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels Classes QueryModelEntityCollection<TEntity, TEntityId> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedComponent<TNestedComponent, TNestedComponentEvent> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.NestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityEventIdGetterSetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.QueryModelEntityCollectionManager<TParent, TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Component<TComponent, TComponentEvent>.RemovableNestedEntity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEventEntityIdGetter>.CollectionManager SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter> SelfGeneratingQueryModel<TQueryModel, TAggregateEvent>.Entity<TEntity, TEntityId, TEntityEvent, TEntityCreatedEvent, TEntityRemovedEvent, TEventEntityIdGetter>.CollectionManager Interfaces IReadonlyQueryModelEntityCollection<TEntity, TEntityId>"
  },
  "api/Compze.Persistence.EventStore.Query.Models.html": {
    "href": "api/Compze.Persistence.EventStore.Query.Models.html",
    "title": "Namespace Compze.Persistence.EventStore.Query.Models | Compze",
    "keywords": "Namespace Compze.Persistence.EventStore.Query.Models Namespaces Compze.Persistence.EventStore.Query.Models.Generators Compze.Persistence.EventStore.Query.Models.SelfGeneratingQueryModels"
  },
  "api/Compze.Persistence.EventStore.Refactoring.Migrations.EventMigration-1.html": {
    "href": "api/Compze.Persistence.EventStore.Refactoring.Migrations.EventMigration-1.html",
    "title": "Class EventMigration<TMigratedAggregateEventHierarchyRootInterface> | Compze",
    "keywords": "Class EventMigration<TMigratedAggregateEventHierarchyRootInterface> Namespace Compze.Persistence.EventStore.Refactoring.Migrations Assembly Compze.dll public abstract class EventMigration<TMigratedAggregateEventHierarchyRootInterface> : IEventMigration where TMigratedAggregateEventHierarchyRootInterface : IAggregateEvent Type Parameters TMigratedAggregateEventHierarchyRootInterface Inheritance object EventMigration<TMigratedAggregateEventHierarchyRootInterface> Implements IEventMigration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) Constructors EventMigration(Guid, string, string) protected EventMigration(Guid id, string name, string description) Parameters id Guid name string description string Properties Description public string Description { get; } Property Value string Done public bool Done { get; } Property Value bool Id public Guid Id { get; } Property Value Guid MigratedAggregateEventHierarchyRootInterface The event interface that is the root of the event hierarchy for the aggregate whose events this migration modifies public Type MigratedAggregateEventHierarchyRootInterface { get; } Property Value Type Name public string Name { get; } Property Value string Methods CreateSingleAggregateInstanceHandlingMigrator() public abstract ISingleAggregateInstanceHandlingEventMigrator CreateSingleAggregateInstanceHandlingMigrator() Returns ISingleAggregateInstanceHandlingEventMigrator"
  },
  "api/Compze.Persistence.EventStore.Refactoring.Migrations.IEventMigration.html": {
    "href": "api/Compze.Persistence.EventStore.Refactoring.Migrations.IEventMigration.html",
    "title": "Interface IEventMigration | Compze",
    "keywords": "Interface IEventMigration Namespace Compze.Persistence.EventStore.Refactoring.Migrations Assembly Compze.dll Defines an identity for migration of events into other events. Creates public interface IEventMigration Extension Methods NullableCE.NotNull<T>(T?) Properties Description string Description { get; } Property Value string Done bool Done { get; } Property Value bool Id Guid Id { get; } Property Value Guid MigratedAggregateEventHierarchyRootInterface The event interface that is the root of the event hierarchy for the aggregate whose events this migration modifies Type MigratedAggregateEventHierarchyRootInterface { get; } Property Value Type Name string Name { get; } Property Value string Methods CreateSingleAggregateInstanceHandlingMigrator() ISingleAggregateInstanceHandlingEventMigrator CreateSingleAggregateInstanceHandlingMigrator() Returns ISingleAggregateInstanceHandlingEventMigrator"
  },
  "api/Compze.Persistence.EventStore.Refactoring.Migrations.IEventModifier.html": {
    "href": "api/Compze.Persistence.EventStore.Refactoring.Migrations.IEventModifier.html",
    "title": "Interface IEventModifier | Compze",
    "keywords": "Interface IEventModifier Namespace Compze.Persistence.EventStore.Refactoring.Migrations Assembly Compze.dll public interface IEventModifier Extension Methods NullableCE.NotNull<T>(T?) Methods InsertBefore(params AggregateEvent[]) void InsertBefore(params AggregateEvent[] insert) Parameters insert AggregateEvent[] Replace(params AggregateEvent[]) void Replace(params AggregateEvent[] events) Parameters events AggregateEvent[]"
  },
  "api/Compze.Persistence.EventStore.Refactoring.Migrations.ISingleAggregateInstanceHandlingEventMigrator.html": {
    "href": "api/Compze.Persistence.EventStore.Refactoring.Migrations.ISingleAggregateInstanceHandlingEventMigrator.html",
    "title": "Interface ISingleAggregateInstanceHandlingEventMigrator | Compze",
    "keywords": "Interface ISingleAggregateInstanceHandlingEventMigrator Namespace Compze.Persistence.EventStore.Refactoring.Migrations Assembly Compze.dll Responsible for migrating the events of a single instance of an aggregate. public interface ISingleAggregateInstanceHandlingEventMigrator Extension Methods NullableCE.NotNull<T>(T?) Methods MigrateEvent(IAggregateEvent, IEventModifier) Inspect one event and if required mutate the event stream by calling methods on the modifier Called once for each event in the aggregate's history. Then it is called once with an instance of Compze.Persistence.EventStore.Refactoring.Migrations.EndOfAggregateHistoryEventPlaceHolder. void MigrateEvent(IAggregateEvent @event, IEventModifier modifier) Parameters event IAggregateEvent modifier IEventModifier"
  },
  "api/Compze.Persistence.EventStore.Refactoring.Migrations.NonIdempotentMigrationDetectedException.html": {
    "href": "api/Compze.Persistence.EventStore.Refactoring.Migrations.NonIdempotentMigrationDetectedException.html",
    "title": "Class NonIdempotentMigrationDetectedException | Compze",
    "keywords": "Class NonIdempotentMigrationDetectedException Namespace Compze.Persistence.EventStore.Refactoring.Migrations Assembly Compze.dll public class NonIdempotentMigrationDetectedException : Exception, ISerializable Inheritance object Exception NonIdempotentMigrationDetectedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.Persistence.EventStore.Refactoring.Migrations.html": {
    "href": "api/Compze.Persistence.EventStore.Refactoring.Migrations.html",
    "title": "Namespace Compze.Persistence.EventStore.Refactoring.Migrations | Compze",
    "keywords": "Namespace Compze.Persistence.EventStore.Refactoring.Migrations Classes EventMigration<TMigratedAggregateEventHierarchyRootInterface> NonIdempotentMigrationDetectedException Interfaces IEventMigration Defines an identity for migration of events into other events. Creates IEventModifier ISingleAggregateInstanceHandlingEventMigrator Responsible for migrating the events of a single instance of an aggregate."
  },
  "api/Compze.Persistence.EventStore.html": {
    "href": "api/Compze.Persistence.EventStore.html",
    "title": "Namespace Compze.Persistence.EventStore | Compze",
    "keywords": "Namespace Compze.Persistence.EventStore Namespaces Compze.Persistence.EventStore.Aggregates Compze.Persistence.EventStore.Query.Models Compze.Persistence.EventStore.Refactoring.Migrations Classes AggregateEvent AggregateWrapperEvent<TBaseEventInterface> EventStoreExtensions EventStoreTestingExtensions Interfaces IAggregateCreatedEvent Marks an event as meaning that the aggregate was created. Can be used by clients to perform logic that should happen whenever an aggregate is created. Is used in several places in the infrastructure and the infrastructure will fail in various ways if this events is not inherited correctly. For example: Aggregate: Id is only set when such an event is raised. It is only ever possibly to raise 1 such event. More than one will cause an exception SingleAggregateQueryModelUpdater: Creates the initial query model when it receives such an event IAggregateDeletedEvent IAggregateEvent IAggregateWrapperEvent<TEventInterface> IEventStore IEventStoreReader IEventStoreUpdater IEventStored IEventStored<TEvent> IMutableAggregateEvent"
  },
  "api/Compze.Persistence.InMemory.DependencyInjection.InMemoryPersistenceLayerRegistrar.html": {
    "href": "api/Compze.Persistence.InMemory.DependencyInjection.InMemoryPersistenceLayerRegistrar.html",
    "title": "Class InMemoryPersistenceLayerRegistrar | Compze",
    "keywords": "Class InMemoryPersistenceLayerRegistrar Namespace Compze.Persistence.InMemory.DependencyInjection Assembly Compze.ExternalDependencies.dll public static class InMemoryPersistenceLayerRegistrar Inheritance object InMemoryPersistenceLayerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterInMemoryPersistenceLayer(IDependencyInjectionContainer, string) public static void RegisterInMemoryPersistenceLayer(this IDependencyInjectionContainer container, string _) Parameters container IDependencyInjectionContainer _ string RegisterInMemoryPersistenceLayer(IEndpointBuilder) public static void RegisterInMemoryPersistenceLayer(this IEndpointBuilder @this) Parameters this IEndpointBuilder"
  },
  "api/Compze.Persistence.InMemory.DependencyInjection.html": {
    "href": "api/Compze.Persistence.InMemory.DependencyInjection.html",
    "title": "Namespace Compze.Persistence.InMemory.DependencyInjection | Compze",
    "keywords": "Namespace Compze.Persistence.InMemory.DependencyInjection Classes InMemoryPersistenceLayerRegistrar"
  },
  "api/Compze.Persistence.MsSql.DependencyInjection.MsSqlPersistenceLayerRegistrar.html": {
    "href": "api/Compze.Persistence.MsSql.DependencyInjection.MsSqlPersistenceLayerRegistrar.html",
    "title": "Class MsSqlPersistenceLayerRegistrar | Compze",
    "keywords": "Class MsSqlPersistenceLayerRegistrar Namespace Compze.Persistence.MsSql.DependencyInjection Assembly Compze.ExternalDependencies.dll public static class MsSqlPersistenceLayerRegistrar Inheritance object MsSqlPersistenceLayerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterMsSqlPersistenceLayer(IDependencyInjectionContainer, string) public static void RegisterMsSqlPersistenceLayer(this IDependencyInjectionContainer container, string connectionStringName) Parameters container IDependencyInjectionContainer connectionStringName string RegisterMsSqlPersistenceLayer(IEndpointBuilder) public static void RegisterMsSqlPersistenceLayer(this IEndpointBuilder @this) Parameters this IEndpointBuilder"
  },
  "api/Compze.Persistence.MsSql.DependencyInjection.html": {
    "href": "api/Compze.Persistence.MsSql.DependencyInjection.html",
    "title": "Namespace Compze.Persistence.MsSql.DependencyInjection | Compze",
    "keywords": "Namespace Compze.Persistence.MsSql.DependencyInjection Classes MsSqlPersistenceLayerRegistrar"
  },
  "api/Compze.Persistence.MySql.DependencyInjection.MySqlPersistenceLayerRegistrar.html": {
    "href": "api/Compze.Persistence.MySql.DependencyInjection.MySqlPersistenceLayerRegistrar.html",
    "title": "Class MySqlPersistenceLayerRegistrar | Compze",
    "keywords": "Class MySqlPersistenceLayerRegistrar Namespace Compze.Persistence.MySql.DependencyInjection Assembly Compze.ExternalDependencies.dll public static class MySqlPersistenceLayerRegistrar Inheritance object MySqlPersistenceLayerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterMySqlPersistenceLayer(IDependencyInjectionContainer, string) public static void RegisterMySqlPersistenceLayer(this IDependencyInjectionContainer container, string connectionStringName) Parameters container IDependencyInjectionContainer connectionStringName string RegisterMySqlPersistenceLayer(IEndpointBuilder) public static void RegisterMySqlPersistenceLayer(this IEndpointBuilder @this) Parameters this IEndpointBuilder"
  },
  "api/Compze.Persistence.MySql.DependencyInjection.html": {
    "href": "api/Compze.Persistence.MySql.DependencyInjection.html",
    "title": "Namespace Compze.Persistence.MySql.DependencyInjection | Compze",
    "keywords": "Namespace Compze.Persistence.MySql.DependencyInjection Classes MySqlPersistenceLayerRegistrar"
  },
  "api/Compze.Persistence.PgSql.DependencyInjection.PgSqlPersistenceLayerRegistrar.html": {
    "href": "api/Compze.Persistence.PgSql.DependencyInjection.PgSqlPersistenceLayerRegistrar.html",
    "title": "Class PgSqlPersistenceLayerRegistrar | Compze",
    "keywords": "Class PgSqlPersistenceLayerRegistrar Namespace Compze.Persistence.PgSql.DependencyInjection Assembly Compze.ExternalDependencies.dll public static class PgSqlPersistenceLayerRegistrar Inheritance object PgSqlPersistenceLayerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterPgSqlPersistenceLayer(IDependencyInjectionContainer, string) public static void RegisterPgSqlPersistenceLayer(this IDependencyInjectionContainer container, string connectionStringName) Parameters container IDependencyInjectionContainer connectionStringName string RegisterPgSqlPersistenceLayer(IEndpointBuilder) public static void RegisterPgSqlPersistenceLayer(this IEndpointBuilder @this) Parameters this IEndpointBuilder"
  },
  "api/Compze.Persistence.PgSql.DependencyInjection.html": {
    "href": "api/Compze.Persistence.PgSql.DependencyInjection.html",
    "title": "Namespace Compze.Persistence.PgSql.DependencyInjection | Compze",
    "keywords": "Namespace Compze.Persistence.PgSql.DependencyInjection Classes PgSqlPersistenceLayerRegistrar"
  },
  "api/Compze.Persistence.html": {
    "href": "api/Compze.Persistence.html",
    "title": "Namespace Compze.Persistence | Compze",
    "keywords": "Namespace Compze.Persistence Namespaces Compze.Persistence.DocumentDb Compze.Persistence.EventStore"
  },
  "api/Compze.Refactoring.Naming.CouldNotFindTypeForTypeIdException.html": {
    "href": "api/Compze.Refactoring.Naming.CouldNotFindTypeForTypeIdException.html",
    "title": "Class CouldNotFindTypeForTypeIdException | Compze",
    "keywords": "Class CouldNotFindTypeForTypeIdException Namespace Compze.Refactoring.Naming Assembly Compze.dll public class CouldNotFindTypeForTypeIdException : Exception, ISerializable Inheritance object Exception CouldNotFindTypeForTypeIdException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors CouldNotFindTypeForTypeIdException(string) public CouldNotFindTypeForTypeIdException(string typeId) Parameters typeId string"
  },
  "api/Compze.Refactoring.Naming.ITypeMappingRegistar.html": {
    "href": "api/Compze.Refactoring.Naming.ITypeMappingRegistar.html",
    "title": "Interface ITypeMappingRegistar | Compze",
    "keywords": "Interface ITypeMappingRegistar Namespace Compze.Refactoring.Naming Assembly Compze.dll public interface ITypeMappingRegistar Extension Methods NullableCE.NotNull<T>(T?) Methods Map<TType>(Guid) ITypeMappingRegistar Map<TType>(Guid typeGuid) Parameters typeGuid Guid Returns ITypeMappingRegistar Type Parameters TType Map<TType>(string) ITypeMappingRegistar Map<TType>(string typeGuid) Parameters typeGuid string Returns ITypeMappingRegistar Type Parameters TType"
  },
  "api/Compze.Refactoring.Naming.html": {
    "href": "api/Compze.Refactoring.Naming.html",
    "title": "Namespace Compze.Refactoring.Naming | Compze",
    "keywords": "Namespace Compze.Refactoring.Naming Interfaces ITypeMappingRegistar"
  },
  "api/Compze.SystemCE.CollectionsCE.ConcurrentCE.ConcurrentCircularReader-1.html": {
    "href": "api/Compze.SystemCE.CollectionsCE.ConcurrentCE.ConcurrentCircularReader-1.html",
    "title": "Class ConcurrentCircularReader<T> | Compze",
    "keywords": "Class ConcurrentCircularReader<T> Namespace Compze.SystemCE.CollectionsCE.ConcurrentCE Assembly Compze.CQRS.dll public class ConcurrentCircularReader<T> Type Parameters T Inheritance object ConcurrentCircularReader<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors ConcurrentCircularReader(IEnumerable<T>) public ConcurrentCircularReader(IEnumerable<T> source) Parameters source IEnumerable<T> Methods Next() public T Next() Returns T"
  },
  "api/Compze.SystemCE.CollectionsCE.ConcurrentCE.ConcurrentCircularReader.html": {
    "href": "api/Compze.SystemCE.CollectionsCE.ConcurrentCE.ConcurrentCircularReader.html",
    "title": "Class ConcurrentCircularReader | Compze",
    "keywords": "Class ConcurrentCircularReader Namespace Compze.SystemCE.CollectionsCE.ConcurrentCE Assembly Compze.CQRS.dll public static class ConcurrentCircularReader Inheritance object ConcurrentCircularReader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToConcurrentCircularReader<T>(IEnumerable<T>) public static ConcurrentCircularReader<T> ToConcurrentCircularReader<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> Returns ConcurrentCircularReader<T> Type Parameters T"
  },
  "api/Compze.SystemCE.CollectionsCE.ConcurrentCE.html": {
    "href": "api/Compze.SystemCE.CollectionsCE.ConcurrentCE.html",
    "title": "Namespace Compze.SystemCE.CollectionsCE.ConcurrentCE | Compze",
    "keywords": "Namespace Compze.SystemCE.CollectionsCE.ConcurrentCE Classes ConcurrentCircularReader ConcurrentCircularReader<T>"
  },
  "api/Compze.SystemCE.ComponentModelCE.DataAnnotationsCE.ValidatableObjectCE.html": {
    "href": "api/Compze.SystemCE.ComponentModelCE.DataAnnotationsCE.ValidatableObjectCE.html",
    "title": "Class ValidatableObjectCE | Compze",
    "keywords": "Class ValidatableObjectCE Namespace Compze.SystemCE.ComponentModelCE.DataAnnotationsCE Assembly Compze.dll Extensions for IValidatableObject intended to make type safe implementations easy. public static class ValidatableObjectCE Inheritance object ValidatableObjectCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateValidationResult(IValidatableObject, string, params Expression<Func<object>>[]) Creates an ValidationResult by extracting the invalid member(s) name from the supplied expression(s) public static ValidationResult CreateValidationResult(this IValidatableObject me, string message, params Expression<Func<object>>[] members) Parameters me IValidatableObject message string members Expression<Func<object>>[] Returns ValidationResult"
  },
  "api/Compze.SystemCE.ComponentModelCE.DataAnnotationsCE.html": {
    "href": "api/Compze.SystemCE.ComponentModelCE.DataAnnotationsCE.html",
    "title": "Namespace Compze.SystemCE.ComponentModelCE.DataAnnotationsCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ComponentModelCE.DataAnnotationsCE Classes ValidatableObjectCE Extensions for IValidatableObject intended to make type safe implementations easy."
  },
  "api/Compze.SystemCE.ConfigurationCE.IConfigurationParameterProvider.html": {
    "href": "api/Compze.SystemCE.ConfigurationCE.IConfigurationParameterProvider.html",
    "title": "Interface IConfigurationParameterProvider | Compze",
    "keywords": "Interface IConfigurationParameterProvider Namespace Compze.SystemCE.ConfigurationCE Assembly Compze.CQRS.dll Allows for reading configuration parameters from a source such as a configuration file public interface IConfigurationParameterProvider Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods GetString(string, string?) Gets a string configuration value. string GetString(string parameterName, string? valueIfMissing = null) Parameters parameterName string valueIfMissing string Returns string"
  },
  "api/Compze.SystemCE.ConfigurationCE.html": {
    "href": "api/Compze.SystemCE.ConfigurationCE.html",
    "title": "Namespace Compze.SystemCE.ConfigurationCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ConfigurationCE Interfaces IConfigurationParameterProvider Allows for reading configuration parameters from a source such as a configuration file"
  },
  "api/Compze.SystemCE.DiagnosticsCE.StopwatchCE.TimedExecutionSummary.html": {
    "href": "api/Compze.SystemCE.DiagnosticsCE.StopwatchCE.TimedExecutionSummary.html",
    "title": "Class StopwatchCE.TimedExecutionSummary | Compze",
    "keywords": "Class StopwatchCE.TimedExecutionSummary Namespace Compze.SystemCE.DiagnosticsCE Assembly Compze.CQRS.dll public class StopwatchCE.TimedExecutionSummary Inheritance object StopwatchCE.TimedExecutionSummary Derived StopwatchCE.TimedThreadedExecutionSummary Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors TimedExecutionSummary(int, TimeSpan) public TimedExecutionSummary(int iterations, TimeSpan total) Parameters iterations int total TimeSpan Properties Average public TimeSpan Average { get; } Property Value TimeSpan Total public TimeSpan Total { get; } Property Value TimeSpan"
  },
  "api/Compze.SystemCE.DiagnosticsCE.StopwatchCE.TimedThreadedExecutionSummary.html": {
    "href": "api/Compze.SystemCE.DiagnosticsCE.StopwatchCE.TimedThreadedExecutionSummary.html",
    "title": "Class StopwatchCE.TimedThreadedExecutionSummary | Compze",
    "keywords": "Class StopwatchCE.TimedThreadedExecutionSummary Namespace Compze.SystemCE.DiagnosticsCE Assembly Compze.CQRS.dll public class StopwatchCE.TimedThreadedExecutionSummary : StopwatchCE.TimedExecutionSummary Inheritance object StopwatchCE.TimedExecutionSummary StopwatchCE.TimedThreadedExecutionSummary Inherited Members StopwatchCE.TimedExecutionSummary.Total StopwatchCE.TimedExecutionSummary.Average object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors TimedThreadedExecutionSummary(int, IReadOnlyList<TimeSpan>, TimeSpan, string) public TimedThreadedExecutionSummary(int iterations, IReadOnlyList<TimeSpan> individualExecutionTimes, TimeSpan total, string description = \"\") Parameters iterations int individualExecutionTimes IReadOnlyList<TimeSpan> total TimeSpan description string Properties IndividualExecutionTimes public IReadOnlyList<TimeSpan> IndividualExecutionTimes { get; } Property Value IReadOnlyList<TimeSpan> Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Compze.SystemCE.DiagnosticsCE.StopwatchCE.html": {
    "href": "api/Compze.SystemCE.DiagnosticsCE.StopwatchCE.html",
    "title": "Class StopwatchCE | Compze",
    "keywords": "Class StopwatchCE Namespace Compze.SystemCE.DiagnosticsCE Assembly Compze.CQRS.dll Extensions to the Stopwatch class and related functionality. public static class StopwatchCE Inheritance object StopwatchCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TimeExecution(Action, int) public static StopwatchCE.TimedExecutionSummary TimeExecution(Action action, int iterations = 1) Parameters action Action iterations int Returns StopwatchCE.TimedExecutionSummary TimeExecutionAsync(Func<Task>, int) public static Task<StopwatchCE.TimedExecutionSummary> TimeExecutionAsync(Func<Task> action, int iterations = 1) Parameters action Func<Task> iterations int Returns Task<StopwatchCE.TimedExecutionSummary> TimeExecutionThreaded(Action, int, int) public static StopwatchCE.TimedThreadedExecutionSummary TimeExecutionThreaded(Action action, int iterations = 1, int maxDegreeOfParallelism = -1) Parameters action Action iterations int maxDegreeOfParallelism int Returns StopwatchCE.TimedThreadedExecutionSummary TimeExecutionThreadedLowOverhead(Action, int, int) public static StopwatchCE.TimedExecutionSummary TimeExecutionThreadedLowOverhead(Action action, int iterations = 1, int maxDegreeOfParallelism = -1) Parameters action Action iterations int maxDegreeOfParallelism int Returns StopwatchCE.TimedExecutionSummary"
  },
  "api/Compze.SystemCE.DiagnosticsCE.html": {
    "href": "api/Compze.SystemCE.DiagnosticsCE.html",
    "title": "Namespace Compze.SystemCE.DiagnosticsCE | Compze",
    "keywords": "Namespace Compze.SystemCE.DiagnosticsCE Classes StopwatchCE Extensions to the Stopwatch class and related functionality. StopwatchCE.TimedExecutionSummary StopwatchCE.TimedThreadedExecutionSummary"
  },
  "api/Compze.SystemCE.IStaticInstancePropertySingleton.html": {
    "href": "api/Compze.SystemCE.IStaticInstancePropertySingleton.html",
    "title": "Interface IStaticInstancePropertySingleton | Compze",
    "keywords": "Interface IStaticInstancePropertySingleton Namespace Compze.SystemCE Assembly Compze.dll public interface IStaticInstancePropertySingleton Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.SystemCE.LinqCE.EnumerableCE.IterationSpecification.html": {
    "href": "api/Compze.SystemCE.LinqCE.EnumerableCE.IterationSpecification.html",
    "title": "Struct EnumerableCE.IterationSpecification | Compze",
    "keywords": "Struct EnumerableCE.IterationSpecification Namespace Compze.SystemCE.LinqCE Assembly Compze.Utilities.dll Represents a sequence first yielding Compze.SystemCE.LinqCE.EnumerableCE.IterationSpecification.StartValue and then infinitely yielding the last value plus Compze.SystemCE.LinqCE.EnumerableCE.IterationSpecification.StepSize public readonly struct EnumerableCE.IterationSpecification : IEquatable<EnumerableCE.IterationSpecification> Implements IEquatable<EnumerableCE.IterationSpecification> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Equals(IterationSpecification) Indicates whether the current object is equal to another object of the same type. public bool Equals(EnumerableCE.IterationSpecification other) Parameters other EnumerableCE.IterationSpecification An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object?) Indicates whether this instance and a specified object are equal. public override bool Equals(object? obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Operators operator ==(IterationSpecification, IterationSpecification) public static bool operator ==(EnumerableCE.IterationSpecification left, EnumerableCE.IterationSpecification right) Parameters left EnumerableCE.IterationSpecification right EnumerableCE.IterationSpecification Returns bool operator !=(IterationSpecification, IterationSpecification) public static bool operator !=(EnumerableCE.IterationSpecification left, EnumerableCE.IterationSpecification right) Parameters left EnumerableCE.IterationSpecification right EnumerableCE.IterationSpecification Returns bool"
  },
  "api/Compze.SystemCE.LinqCE.EnumerableCE.html": {
    "href": "api/Compze.SystemCE.LinqCE.EnumerableCE.html",
    "title": "Class EnumerableCE | Compze",
    "keywords": "Class EnumerableCE Namespace Compze.SystemCE.LinqCE Assembly Compze.Utilities.dll public static class EnumerableCE Inheritance object EnumerableCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(params T[]) Creates an enumerable consisting of the passed parameter values is order. public static IEnumerable<T> Create<T>(params T[] values) Parameters values T[] Returns IEnumerable<T> Type Parameters T ForEach<T>(IEnumerable<T>, Action<T, int>) Executes action for each element in the sequence source. public static void ForEach<T>(this IEnumerable<T> source, Action<T, int> action) Parameters source IEnumerable<T> action Action<T, int> Type Parameters T ForEach<T>(IEnumerable<T>, Action<T>) Executes action for each element in the sequence source. public static void ForEach<T>(this IEnumerable<T> source, Action<T> action) Parameters source IEnumerable<T> action Action<T> Type Parameters T ForEach<TSource, TReturn>(IEnumerable<TSource>, Func<TSource, TReturn>) Executes action for each element in the sequence source. public static void ForEach<TSource, TReturn>(this IEnumerable<TSource> source, Func<TSource, TReturn> action) Parameters source IEnumerable<TSource> action Func<TSource, TReturn> Type Parameters TSource TReturn OfTypes<T1>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1>() Returns IEnumerable<Type> Type Parameters T1 OfTypes<T1, T2>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2>() Returns IEnumerable<Type> Type Parameters T1 T2 OfTypes<T1, T2, T3>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2, T3>() Returns IEnumerable<Type> Type Parameters T1 T2 T3 OfTypes<T1, T2, T3, T4>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2, T3, T4>() Returns IEnumerable<Type> Type Parameters T1 T2 T3 T4 OfTypes<T1, T2, T3, T4, T5>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2, T3, T4, T5>() Returns IEnumerable<Type> Type Parameters T1 T2 T3 T4 T5 OfTypes<T1, T2, T3, T4, T5, T6>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2, T3, T4, T5, T6>() Returns IEnumerable<Type> Type Parameters T1 T2 T3 T4 T5 T6 OfTypes<T1, T2, T3, T4, T5, T6, T7>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2, T3, T4, T5, T6, T7>() Returns IEnumerable<Type> Type Parameters T1 T2 T3 T4 T5 T6 T7 OfTypes<T1, T2, T3, T4, T5, T6, T7, T8, T9>() Returns a sequence of types matching the supplied type arguments public static IEnumerable<Type> OfTypes<T1, T2, T3, T4, T5, T6, T7, T8, T9>() Returns IEnumerable<Type> Type Parameters T1 T2 T3 T4 T5 T6 T7 T8 T9 Through(int, int) generates a sequence of integers beginning with me where each element is the previous element plus one that includes the upper bound guard cref=\"guard\"/> public static IEnumerable<int> Through(this int me, int guard) Parameters me int guard int Returns IEnumerable<int>"
  },
  "api/Compze.SystemCE.LinqCE.html": {
    "href": "api/Compze.SystemCE.LinqCE.html",
    "title": "Namespace Compze.SystemCE.LinqCE | Compze",
    "keywords": "Namespace Compze.SystemCE.LinqCE Classes EnumerableCE Structs EnumerableCE.IterationSpecification Represents a sequence first yielding Compze.SystemCE.LinqCE.EnumerableCE.IterationSpecification.StartValue and then infinitely yielding the last value plus Compze.SystemCE.LinqCE.EnumerableCE.IterationSpecification.StepSize"
  },
  "api/Compze.SystemCE.NullableCE.html": {
    "href": "api/Compze.SystemCE.NullableCE.html",
    "title": "Class NullableCE | Compze",
    "keywords": "Class NullableCE Namespace Compze.SystemCE Assembly Compze.dll public static class NullableCE Inheritance object NullableCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NotNull<T>(T?) public static T NotNull<T>(this T? @this) where T : class Parameters this T Returns T Type Parameters T"
  },
  "api/Compze.SystemCE.ReactiveCE.ObservableCE.html": {
    "href": "api/Compze.SystemCE.ReactiveCE.ObservableCE.html",
    "title": "Class ObservableCE | Compze",
    "keywords": "Class ObservableCE Namespace Compze.SystemCE.ReactiveCE Assembly Compze.dll public static class ObservableCE Inheritance object ObservableCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Subscribe<TEvent>(IObservable<TEvent>, Action<TEvent>) public static IDisposable Subscribe<TEvent>(this IObservable<TEvent> @this, Action<TEvent> onNext) Parameters this IObservable<TEvent> onNext Action<TEvent> Returns IDisposable Type Parameters TEvent"
  },
  "api/Compze.SystemCE.ReactiveCE.html": {
    "href": "api/Compze.SystemCE.ReactiveCE.html",
    "title": "Namespace Compze.SystemCE.ReactiveCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ReactiveCE Classes ObservableCE"
  },
  "api/Compze.SystemCE.ReflectionCE.Constructor.html": {
    "href": "api/Compze.SystemCE.ReflectionCE.Constructor.html",
    "title": "Class Constructor | Compze",
    "keywords": "Class Constructor Namespace Compze.SystemCE.ReflectionCE Assembly Compze.dll public static class Constructor Inheritance object Constructor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateInstance(Type) public static object CreateInstance(Type type) Parameters type Type Returns object"
  },
  "api/Compze.SystemCE.ReflectionCE.EmitCE.AssemblyBuilderCE.html": {
    "href": "api/Compze.SystemCE.ReflectionCE.EmitCE.AssemblyBuilderCE.html",
    "title": "Class AssemblyBuilderCE | Compze",
    "keywords": "Class AssemblyBuilderCE Namespace Compze.SystemCE.ReflectionCE.EmitCE Assembly Compze.CQRS.dll public static class AssemblyBuilderCE Inheritance object AssemblyBuilderCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.SystemCE.ReflectionCE.EmitCE.TypeBuilderCE.html": {
    "href": "api/Compze.SystemCE.ReflectionCE.EmitCE.TypeBuilderCE.html",
    "title": "Class TypeBuilderCE | Compze",
    "keywords": "Class TypeBuilderCE Namespace Compze.SystemCE.ReflectionCE.EmitCE Assembly Compze.CQRS.dll public static class TypeBuilderCE Inheritance object TypeBuilderCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ImplementConstructor(TypeBuilder, FieldInfo) public static void ImplementConstructor(this TypeBuilder typeBuilder, FieldInfo field) Parameters typeBuilder TypeBuilder field FieldInfo ImplementProperty(TypeBuilder, string, Type) public static (FieldInfo, PropertyInfo) ImplementProperty(this TypeBuilder typeBuilder, string propertyName, Type propertyType) Parameters typeBuilder TypeBuilder propertyName string propertyType Type Returns (FieldInfo, PropertyInfo)"
  },
  "api/Compze.SystemCE.ReflectionCE.EmitCE.html": {
    "href": "api/Compze.SystemCE.ReflectionCE.EmitCE.html",
    "title": "Namespace Compze.SystemCE.ReflectionCE.EmitCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ReflectionCE.EmitCE Classes AssemblyBuilderCE TypeBuilderCE"
  },
  "api/Compze.SystemCE.ReflectionCE.html": {
    "href": "api/Compze.SystemCE.ReflectionCE.html",
    "title": "Namespace Compze.SystemCE.ReflectionCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ReflectionCE Classes Constructor"
  },
  "api/Compze.SystemCE.StrictAggregateDisposable.html": {
    "href": "api/Compze.SystemCE.StrictAggregateDisposable.html",
    "title": "Class StrictAggregateDisposable | Compze",
    "keywords": "Class StrictAggregateDisposable Namespace Compze.SystemCE Assembly Compze.Messaging.dll public class StrictAggregateDisposable : StrictlyManagedResourceBase<StrictAggregateDisposable>, IDisposable Inheritance object StrictlyManagedResourceBase<StrictAggregateDisposable> StrictAggregateDisposable Implements IDisposable Inherited Members StrictlyManagedResourceBase<StrictAggregateDisposable>.Dispose() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods Create(params IDisposable[]) public static StrictAggregateDisposable Create(params IDisposable[] disposables) Parameters disposables IDisposable[] Returns StrictAggregateDisposable Dispose(bool) protected override void Dispose(bool disposing) Parameters disposing bool"
  },
  "api/Compze.SystemCE.StrictlyManagedResourceBase-1.html": {
    "href": "api/Compze.SystemCE.StrictlyManagedResourceBase-1.html",
    "title": "Class StrictlyManagedResourceBase<TInheritor> | Compze",
    "keywords": "Class StrictlyManagedResourceBase<TInheritor> Namespace Compze.SystemCE Assembly Compze.Messaging.dll Inheriting from this class is the simplest way to implement Compze.SystemCE.IStrictlyManagedResource public abstract class StrictlyManagedResourceBase<TInheritor> : IDisposable where TInheritor : StrictlyManagedResourceBase<TInheritor> Type Parameters TInheritor Inheritance object StrictlyManagedResourceBase<TInheritor> Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Examples class SomeStrictlyManagedResource : StrictlyManagedResourceBase { ResourceThatMustBeDisposed _resourceThatMustBeDisposed = new ResourceThatMustBeDisposed(); bool _disposed; protected override void InternalDispose() { if (!_disposed) { _disposed = true; _resourceThatMustBeDisposed.Dispose(); } } } Constructors StrictlyManagedResourceBase(bool, bool) Inheriting from this class is the simplest way to implement Compze.SystemCE.IStrictlyManagedResource protected StrictlyManagedResourceBase(bool forceStackTraceAllocation = false, bool needsFileInfo = false) Parameters forceStackTraceAllocation bool needsFileInfo bool Examples class SomeStrictlyManagedResource : StrictlyManagedResourceBase { ResourceThatMustBeDisposed _resourceThatMustBeDisposed = new ResourceThatMustBeDisposed(); bool _disposed; protected override void InternalDispose() { if (!_disposed) { _disposed = true; _resourceThatMustBeDisposed.Dispose(); } } } Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Dispose(bool) protected virtual void Dispose(bool disposing) Parameters disposing bool"
  },
  "api/Compze.SystemCE.StrictlyManagedResourceLifespanWasExceededException.html": {
    "href": "api/Compze.SystemCE.StrictlyManagedResourceLifespanWasExceededException.html",
    "title": "Class StrictlyManagedResourceLifespanWasExceededException | Compze",
    "keywords": "Class StrictlyManagedResourceLifespanWasExceededException Namespace Compze.SystemCE Assembly Compze.Messaging.dll public class StrictlyManagedResourceLifespanWasExceededException : Exception, ISerializable Inheritance object Exception StrictlyManagedResourceLifespanWasExceededException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors StrictlyManagedResourceLifespanWasExceededException(Type, string, TimeSpan) public StrictlyManagedResourceLifespanWasExceededException(Type instanceType, string reservationCallStack, TimeSpan maxTimeSpan) Parameters instanceType Type reservationCallStack string maxTimeSpan TimeSpan"
  },
  "api/Compze.SystemCE.StrictlyManagedResourceWasFinalizedException.html": {
    "href": "api/Compze.SystemCE.StrictlyManagedResourceWasFinalizedException.html",
    "title": "Class StrictlyManagedResourceWasFinalizedException | Compze",
    "keywords": "Class StrictlyManagedResourceWasFinalizedException Namespace Compze.SystemCE Assembly Compze.CQRS.dll Compze.SystemCE.IStrictlyManagedResource public class StrictlyManagedResourceWasFinalizedException : Exception, ISerializable Inheritance object Exception StrictlyManagedResourceWasFinalizedException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors StrictlyManagedResourceWasFinalizedException(Type, string?) public StrictlyManagedResourceWasFinalizedException(Type instanceType, string? reservationCallStack) Parameters instanceType Type reservationCallStack string"
  },
  "api/Compze.SystemCE.ThreadingCE.ComponentUsedByMultipleTransactionsException.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ComponentUsedByMultipleTransactionsException.html",
    "title": "Class ComponentUsedByMultipleTransactionsException | Compze",
    "keywords": "Class ComponentUsedByMultipleTransactionsException Namespace Compze.SystemCE.ThreadingCE Assembly Compze.CQRS.dll public class ComponentUsedByMultipleTransactionsException : Exception, ISerializable Inheritance object Exception ComponentUsedByMultipleTransactionsException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors ComponentUsedByMultipleTransactionsException(Type) public ComponentUsedByMultipleTransactionsException(Type componentType) Parameters componentType Type"
  },
  "api/Compze.SystemCE.ThreadingCE.ISingleContextUseGuard.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ISingleContextUseGuard.html",
    "title": "Interface ISingleContextUseGuard | Compze",
    "keywords": "Interface ISingleContextUseGuard Namespace Compze.SystemCE.ThreadingCE Assembly Compze.CQRS.dll Implementations ensure that a component is only used within the allowed context. Such as a single thread, single http request etc. public interface ISingleContextUseGuard Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods AssertNoContextChangeOccurred(object) Implementations throw an exception if the context has changed. void AssertNoContextChangeOccurred(object guarded) Parameters guarded object"
  },
  "api/Compze.SystemCE.ThreadingCE.MultiThreadedUseException.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.MultiThreadedUseException.html",
    "title": "Class MultiThreadedUseException | Compze",
    "keywords": "Class MultiThreadedUseException Namespace Compze.SystemCE.ThreadingCE Assembly Compze.dll Thrown if the Compze.SystemCE.ThreadingCE.SingleThreadUseGuard detects a thread change. public class MultiThreadedUseException : InvalidOperationException, ISerializable Inheritance object Exception SystemException InvalidOperationException MultiThreadedUseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods NullableCE.NotNull<T>(T?)"
  },
  "api/Compze.SystemCE.ThreadingCE.ResourceAccess.AwaitingConditionTimeoutException.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ResourceAccess.AwaitingConditionTimeoutException.html",
    "title": "Class AwaitingConditionTimeoutException | Compze",
    "keywords": "Class AwaitingConditionTimeoutException Namespace Compze.SystemCE.ThreadingCE.ResourceAccess Assembly Compze.CQRS.dll public class AwaitingConditionTimeoutException : Exception, ISerializable Inheritance object Exception AwaitingConditionTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors AwaitingConditionTimeoutException() public AwaitingConditionTimeoutException() AwaitingConditionTimeoutException(AwaitingConditionTimeoutException, string) public AwaitingConditionTimeoutException(AwaitingConditionTimeoutException parent, string message) Parameters parent AwaitingConditionTimeoutException message string"
  },
  "api/Compze.SystemCE.ThreadingCE.ResourceAccess.EnterLockTimeoutException.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ResourceAccess.EnterLockTimeoutException.html",
    "title": "Class EnterLockTimeoutException | Compze",
    "keywords": "Class EnterLockTimeoutException Namespace Compze.SystemCE.ThreadingCE.ResourceAccess Assembly Compze.CQRS.dll public class EnterLockTimeoutException : Exception, ISerializable Inheritance object Exception EnterLockTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Properties Message Gets a message that describes the current exception. public override string Message { get; } Property Value string The error message that explains the reason for the exception, or an empty string (\"\")."
  },
  "api/Compze.SystemCE.ThreadingCE.ResourceAccess.MonitorCE.OutParamFunc-1.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ResourceAccess.MonitorCE.OutParamFunc-1.html",
    "title": "Delegate MonitorCE.OutParamFunc<T> | Compze",
    "keywords": "Delegate MonitorCE.OutParamFunc<T> Namespace Compze.SystemCE.ThreadingCE.ResourceAccess Assembly Compze.CQRS.dll public delegate T MonitorCE.OutParamFunc<T>(out T outParam) Parameters outParam T Returns T Type Parameters T Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object)"
  },
  "api/Compze.SystemCE.ThreadingCE.ResourceAccess.MonitorCE.UpdateLock.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ResourceAccess.MonitorCE.UpdateLock.html",
    "title": "Class MonitorCE.UpdateLock | Compze",
    "keywords": "Class MonitorCE.UpdateLock Namespace Compze.SystemCE.ThreadingCE.ResourceAccess Assembly Compze.CQRS.dll public sealed class MonitorCE.UpdateLock : IDisposable Inheritance object MonitorCE.UpdateLock Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose()"
  },
  "api/Compze.SystemCE.ThreadingCE.ResourceAccess.MonitorCE.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ResourceAccess.MonitorCE.html",
    "title": "Class MonitorCE | Compze",
    "keywords": "Class MonitorCE Namespace Compze.SystemCE.ThreadingCE.ResourceAccess Assembly Compze.CQRS.dll The monitor class exposes a rather obscure, brittle and easily misused API in my opinion. This class attempts to adapt it to something that is reasonably understandable and less brittle. public class MonitorCE Inheritance object MonitorCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Methods Read<TReturn>(Func<TReturn>) public TReturn Read<TReturn>(Func<TReturn> func) Parameters func Func<TReturn> Returns TReturn Type Parameters TReturn Update(Action) public Unit Update(Action action) Parameters action Action Returns Unit Update<T>(OutParamFunc<T>, out T) public T Update<T>(MonitorCE.OutParamFunc<T> func, out T outParam) Parameters func MonitorCE.OutParamFunc<T> outParam T Returns T Type Parameters T Update<T>(Func<T>) public T Update<T>(Func<T> func) Parameters func Func<T> Returns T Type Parameters T WithDefaultTimeout() public static MonitorCE WithDefaultTimeout() Returns MonitorCE WithInfiniteTimeout() public static MonitorCE WithInfiniteTimeout() Returns MonitorCE WithTimeout(TimeSpan) public static MonitorCE WithTimeout(TimeSpan timeout) Parameters timeout TimeSpan Returns MonitorCE"
  },
  "api/Compze.SystemCE.ThreadingCE.ResourceAccess.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.ResourceAccess.html",
    "title": "Namespace Compze.SystemCE.ThreadingCE.ResourceAccess | Compze",
    "keywords": "Namespace Compze.SystemCE.ThreadingCE.ResourceAccess Classes AwaitingConditionTimeoutException EnterLockTimeoutException MonitorCE The monitor class exposes a rather obscure, brittle and easily misused API in my opinion. This class attempts to adapt it to something that is reasonably understandable and less brittle. MonitorCE.UpdateLock Delegates MonitorCE.OutParamFunc<T>"
  },
  "api/Compze.SystemCE.ThreadingCE.TasksCE.ConfigureAwaitCE.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.TasksCE.ConfigureAwaitCE.html",
    "title": "Class ConfigureAwaitCE | Compze",
    "keywords": "Class ConfigureAwaitCE Namespace Compze.SystemCE.ThreadingCE.TasksCE Assembly Compze.Utilities.dll public static class ConfigureAwaitCE Inheritance object ConfigureAwaitCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CaF(IAsyncDisposable) Abbreviated version of ConfigureAwait(IAsyncDisposable, bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredAsyncDisposable CaF(this IAsyncDisposable @this) Parameters this IAsyncDisposable Returns ConfiguredAsyncDisposable CaF(Task) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, thus avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredTaskAwaitable CaF(this Task @this) Parameters this Task Returns ConfiguredTaskAwaitable CaF(ValueTask) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredValueTaskAwaitable CaF(this ValueTask @this) Parameters this ValueTask Returns ConfiguredValueTaskAwaitable CaF<TResult>(Task<TResult>) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredTaskAwaitable<TResult> CaF<TResult>(this Task<TResult> @this) Parameters this Task<TResult> Returns ConfiguredTaskAwaitable<TResult> Type Parameters TResult"
  },
  "api/Compze.SystemCE.ThreadingCE.TasksCE.TaskCE.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.TasksCE.TaskCE.html",
    "title": "Class TaskCE | Compze",
    "keywords": "Class TaskCE Namespace Compze.SystemCE.ThreadingCE.TasksCE Assembly Compze.CQRS.dll public static class TaskCE Inheritance object TaskCE Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CaF(IAsyncDisposable) Abbreviated version of ConfigureAwait(IAsyncDisposable, bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredAsyncDisposable CaF(this IAsyncDisposable @this) Parameters this IAsyncDisposable Returns ConfiguredAsyncDisposable CaF(Task) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, thus avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredTaskAwaitable CaF(this Task @this) Parameters this Task Returns ConfiguredTaskAwaitable CaF(ValueTask) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredValueTaskAwaitable CaF(this ValueTask @this) Parameters this ValueTask Returns ConfiguredValueTaskAwaitable CaF<TResult>(Task<TResult>) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredTaskAwaitable<TResult> CaF<TResult>(this Task<TResult> @this) Parameters this Task<TResult> Returns ConfiguredTaskAwaitable<TResult> Type Parameters TResult CaF<TResult>(ValueTask<TResult>) Abbreviated version of ConfigureAwait(bool) with continueOnCapturedContext: false. Ensures that awaits do not capture the synchronization context, avoiding deadlocks and improving performance in environments with a synchronization context (e.g., UI threads). Must be applied to all awaits in library code to ensure that no deadlocks occur due to a synchronization context. public static ConfiguredValueTaskAwaitable<TResult> CaF<TResult>(this ValueTask<TResult> @this) Parameters this ValueTask<TResult> Returns ConfiguredValueTaskAwaitable<TResult> Type Parameters TResult"
  },
  "api/Compze.SystemCE.ThreadingCE.TasksCE.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.TasksCE.html",
    "title": "Namespace Compze.SystemCE.ThreadingCE.TasksCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ThreadingCE.TasksCE Classes ConfigureAwaitCE"
  },
  "api/Compze.SystemCE.ThreadingCE.html": {
    "href": "api/Compze.SystemCE.ThreadingCE.html",
    "title": "Namespace Compze.SystemCE.ThreadingCE | Compze",
    "keywords": "Namespace Compze.SystemCE.ThreadingCE Classes MultiThreadedUseException Thrown if the Compze.SystemCE.ThreadingCE.SingleThreadUseGuard detects a thread change."
  },
  "api/Compze.SystemCE.TransactionsCE.TransactionScopeCe.html": {
    "href": "api/Compze.SystemCE.TransactionsCE.TransactionScopeCe.html",
    "title": "Class TransactionScopeCe | Compze",
    "keywords": "Class TransactionScopeCe Namespace Compze.SystemCE.TransactionsCE Assembly Compze.CQRS.dll public static class TransactionScopeCe Inheritance object TransactionScopeCe Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Compze.SystemCE.TransactionsCE.html": {
    "href": "api/Compze.SystemCE.TransactionsCE.html",
    "title": "Namespace Compze.SystemCE.TransactionsCE | Compze",
    "keywords": "Namespace Compze.SystemCE.TransactionsCE Classes TransactionScopeCe"
  },
  "api/Compze.SystemCE.html": {
    "href": "api/Compze.SystemCE.html",
    "title": "Namespace Compze.SystemCE | Compze",
    "keywords": "Namespace Compze.SystemCE Namespaces Compze.SystemCE.ComponentModelCE.DataAnnotationsCE Compze.SystemCE.ReactiveCE Compze.SystemCE.ReflectionCE Compze.SystemCE.ThreadingCE Classes NullableCE Interfaces IStaticInstancePropertySingleton"
  },
  "api/Compze.Testing.AggregateEventDebugSerializer.html": {
    "href": "api/Compze.Testing.AggregateEventDebugSerializer.html",
    "title": "Class AggregateEventDebugSerializer | Compze",
    "keywords": "Class AggregateEventDebugSerializer Namespace Compze.Testing Assembly Compze.ExternalDependencies.dll public static class AggregateEventDebugSerializer Inheritance object AggregateEventDebugSerializer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNewtonSoftDebugString(object, Formatting) public static string ToNewtonSoftDebugString(this object @this, Formatting formatting = Formatting.Indented) Parameters this object formatting Formatting Returns string"
  },
  "api/Compze.Testing.AssertThrows.html": {
    "href": "api/Compze.Testing.AssertThrows.html",
    "title": "Class AssertThrows | Compze",
    "keywords": "Class AssertThrows Namespace Compze.Testing Assembly Compze.CQRS.dll public static class AssertThrows Inheritance object AssertThrows Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Async<TException>(Func<Task>) public static Task<TException> Async<TException>(Func<Task> action) where TException : Exception Parameters action Func<Task> Returns Task<TException> Type Parameters TException Exception<TException>(Action) public static TException Exception<TException>(Action action) where TException : Exception Parameters action Action Returns TException Type Parameters TException"
  },
  "api/Compze.Testing.DependencyInjection.TestingContainerFactory.html": {
    "href": "api/Compze.Testing.DependencyInjection.TestingContainerFactory.html",
    "title": "Class TestingContainerFactory | Compze",
    "keywords": "Class TestingContainerFactory Namespace Compze.Testing.DependencyInjection Assembly Compze.Testing.dll public static class TestingContainerFactory Inheritance object TestingContainerFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(IRunMode) public static IDependencyInjectionContainer Create(IRunMode runMode) Parameters runMode IRunMode Returns IDependencyInjectionContainer CreateServiceLocatorForTesting(Action<IEndpointBuilder>) public static IServiceLocator CreateServiceLocatorForTesting(Action<IEndpointBuilder> setup) Parameters setup Action<IEndpointBuilder> Returns IServiceLocator"
  },
  "api/Compze.Testing.DependencyInjection.html": {
    "href": "api/Compze.Testing.DependencyInjection.html",
    "title": "Namespace Compze.Testing.DependencyInjection | Compze",
    "keywords": "Namespace Compze.Testing.DependencyInjection Classes TestingContainerFactory"
  },
  "api/Compze.Testing.DuplicateByPluggableComponentTest.html": {
    "href": "api/Compze.Testing.DuplicateByPluggableComponentTest.html",
    "title": "Class DuplicateByPluggableComponentTest | Compze",
    "keywords": "Class DuplicateByPluggableComponentTest Namespace Compze.Testing Assembly Compze.Testing.dll [TestFixture] [TestFixtureSource(typeof(PluggableComponentsTestFixtureSource))] public class DuplicateByPluggableComponentTest : UniversalTestBase Inheritance object UniversalTestBase DuplicateByPluggableComponentTest Inherited Members UniversalTestBase.SurfaceAnyUncatchableExceptions() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors DuplicateByPluggableComponentTest(string) public DuplicateByPluggableComponentTest(string pluggableComponentsCombination) Parameters pluggableComponentsCombination string"
  },
  "api/Compze.Testing.LevelOfParallelismCEAttribute.html": {
    "href": "api/Compze.Testing.LevelOfParallelismCEAttribute.html",
    "title": "Class LevelOfParallelismCEAttribute | Compze",
    "keywords": "Class LevelOfParallelismCEAttribute Namespace Compze.Testing Assembly Compze.Testing.dll [AttributeUsage(AttributeTargets.Assembly|AttributeTargets.Class|AttributeTargets.Method)] public sealed class LevelOfParallelismCEAttribute : Attribute, IApplyToTest Inheritance object Attribute LevelOfParallelismCEAttribute Implements IApplyToTest Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods ApplyToTest(Test) Modifies a test as defined for the specific attribute. public void ApplyToTest(Test test) Parameters test Test The test to modify"
  },
  "api/Compze.Testing.LongRunningAttribute.html": {
    "href": "api/Compze.Testing.LongRunningAttribute.html",
    "title": "Class LongRunningAttribute | Compze",
    "keywords": "Class LongRunningAttribute Namespace Compze.Testing Assembly Compze.Testing.dll [AttributeUsage(AttributeTargets.Class|AttributeTargets.Method)] public sealed class LongRunningAttribute : Attribute, IApplyToTest Inheritance object Attribute LongRunningAttribute Implements IApplyToTest Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods ApplyToTest(Test) Modifies a test as defined for the specific attribute. public void ApplyToTest(Test test) Parameters test Test The test to modify"
  },
  "api/Compze.Testing.Messaging.Buses.TestingEndpointHost.html": {
    "href": "api/Compze.Testing.Messaging.Buses.TestingEndpointHost.html",
    "title": "Class TestingEndpointHost | Compze",
    "keywords": "Class TestingEndpointHost Namespace Compze.Testing.Messaging.Buses Assembly Compze.Testing.dll public class TestingEndpointHost : TestingEndpointHostBase, ITestingEndpointHost, IEndpointHost, IAsyncDisposable Inheritance object EndpointHost TestingEndpointHostBase TestingEndpointHost Implements ITestingEndpointHost IEndpointHost IAsyncDisposable Inherited Members TestingEndpointHostBase.ServerEndpoints TestingEndpointHostBase.RegisterTestingEndpoint(string, EndpointId, Action<IEndpointBuilder>) TestingEndpointHostBase.RegisterClientEndpointForRegisteredEndpoints() TestingEndpointHostBase.AssertThrown<TException>() TestingEndpointHostBase.DisposeAsync(bool) EndpointHost.Endpoints EndpointHost.RegisterEndpoint(string, EndpointId, Action<IEndpointBuilder>) EndpointHost.RegisterClientEndpoint(Action<IEndpointBuilder>) EndpointHost.StartAsync() EndpointHost.Start() EndpointHost.DisposeAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods TestingHostExtensions.AssertThatRunningScenarioThrowsBackendAndClientException<TException>(ITestingEndpointHost, Action) NullableCE.NotNull<T>(T?) ConfigureAwaitCE.CaF(IAsyncDisposable) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors TestingEndpointHost(IRunMode, Func<IRunMode, IDependencyInjectionContainer>) public TestingEndpointHost(IRunMode mode, Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters mode IRunMode containerFactory Func<IRunMode, IDependencyInjectionContainer> Methods Create(Func<IRunMode, IDependencyInjectionContainer>) public static ITestingEndpointHost Create(Func<IRunMode, IDependencyInjectionContainer> containerFactory) Parameters containerFactory Func<IRunMode, IDependencyInjectionContainer> Returns ITestingEndpointHost"
  },
  "api/Compze.Testing.Messaging.Buses.TestingHostExtensions.html": {
    "href": "api/Compze.Testing.Messaging.Buses.TestingHostExtensions.html",
    "title": "Class TestingHostExtensions | Compze",
    "keywords": "Class TestingHostExtensions Namespace Compze.Testing.Messaging.Buses Assembly Compze.Testing.dll public static class TestingHostExtensions Inheritance object TestingHostExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AssertThatRunningScenarioThrowsBackendAndClientException<TException>(ITestingEndpointHost, Action) public static (TException BackendException, MessageDispatchingFailedException FrontEndException) AssertThatRunningScenarioThrowsBackendAndClientException<TException>(this ITestingEndpointHost @this, Action action) where TException : Exception Parameters this ITestingEndpointHost action Action Returns (TException BackendException, MessageDispatchingFailedException FrontEndException) Type Parameters TException"
  },
  "api/Compze.Testing.Messaging.Buses.html": {
    "href": "api/Compze.Testing.Messaging.Buses.html",
    "title": "Namespace Compze.Testing.Messaging.Buses | Compze",
    "keywords": "Namespace Compze.Testing.Messaging.Buses Classes TestingEndpointHost TestingHostExtensions"
  },
  "api/Compze.Testing.Performance.TimeAsserter.TimeOutException.html": {
    "href": "api/Compze.Testing.Performance.TimeAsserter.TimeOutException.html",
    "title": "Class TimeAsserter.TimeOutException | Compze",
    "keywords": "Class TimeAsserter.TimeOutException Namespace Compze.Testing.Performance Assembly Compze.CQRS.dll public class TimeAsserter.TimeOutException : Exception, ISerializable Inheritance object Exception TimeAsserter.TimeOutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors TimeOutException(string) public TimeOutException(string message) Parameters message string"
  },
  "api/Compze.Testing.Performance.TimeAsserter.html": {
    "href": "api/Compze.Testing.Performance.TimeAsserter.html",
    "title": "Class TimeAsserter | Compze",
    "keywords": "Class TimeAsserter Namespace Compze.Testing.Performance Assembly Compze.CQRS.dll public static class TimeAsserter Inheritance object TimeAsserter Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Execute(Action, int, TimeSpan?, TimeSpan?, string, uint, Action?, Action?) public static StopwatchCE.TimedExecutionSummary Execute(Action action, int iterations = 1, TimeSpan? maxAverage = null, TimeSpan? maxTotal = null, string description = \"\", uint maxTries = 10, Action? setup = null, Action? tearDown = null) Parameters action Action iterations int maxAverage TimeSpan? maxTotal TimeSpan? description string maxTries uint setup Action tearDown Action Returns StopwatchCE.TimedExecutionSummary ExecuteAsync(Func<Task>, int, TimeSpan?, TimeSpan?, string, uint, Action?, Action?, Func<Task>?) public static Task<StopwatchCE.TimedExecutionSummary> ExecuteAsync(Func<Task> action, int iterations = 1, TimeSpan? maxAverage = null, TimeSpan? maxTotal = null, string description = \"\", uint maxTries = 10, Action? setup = null, Action? tearDown = null, Func<Task>? tearDownAsync = null) Parameters action Func<Task> iterations int maxAverage TimeSpan? maxTotal TimeSpan? description string maxTries uint setup Action tearDown Action tearDownAsync Func<Task> Returns Task<StopwatchCE.TimedExecutionSummary> ExecuteThreaded(Action, int, TimeSpan?, TimeSpan?, string, Action?, Action?, uint, int) public static StopwatchCE.TimedThreadedExecutionSummary ExecuteThreaded(Action action, int iterations = 1, TimeSpan? maxAverage = null, TimeSpan? maxTotal = null, string description = \"\", Action? setup = null, Action? tearDown = null, uint maxTries = 10, int maxDegreeOfParallelism = -1) Parameters action Action iterations int maxAverage TimeSpan? maxTotal TimeSpan? description string setup Action tearDown Action maxTries uint maxDegreeOfParallelism int Returns StopwatchCE.TimedThreadedExecutionSummary ExecuteThreadedLowOverhead(Action, int, TimeSpan?, TimeSpan?, string, Action?, Action?, uint, int) public static StopwatchCE.TimedExecutionSummary ExecuteThreadedLowOverhead(Action action, int iterations = 1, TimeSpan? maxAverage = null, TimeSpan? maxTotal = null, string description = \"\", Action? setup = null, Action? tearDown = null, uint maxTries = 10, int maxDegreeOfParallelism = -1) Parameters action Action iterations int maxAverage TimeSpan? maxTotal TimeSpan? description string setup Action tearDown Action maxTries uint maxDegreeOfParallelism int Returns StopwatchCE.TimedExecutionSummary"
  },
  "api/Compze.Testing.Performance.html": {
    "href": "api/Compze.Testing.Performance.html",
    "title": "Namespace Compze.Testing.Performance | Compze",
    "keywords": "Namespace Compze.Testing.Performance Classes TimeAsserter TimeAsserter.TimeOutException"
  },
  "api/Compze.Testing.Persistence.TestingPersistenceLayerRegistrar.html": {
    "href": "api/Compze.Testing.Persistence.TestingPersistenceLayerRegistrar.html",
    "title": "Class TestingPersistenceLayerRegistrar | Compze",
    "keywords": "Class TestingPersistenceLayerRegistrar Namespace Compze.Testing.Persistence Assembly Compze.Testing.dll public static class TestingPersistenceLayerRegistrar Inheritance object TestingPersistenceLayerRegistrar Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterCurrentTestsConfiguredPersistenceLayer(IDependencyInjectionContainer, string) public static void RegisterCurrentTestsConfiguredPersistenceLayer(this IDependencyInjectionContainer container, string connectionStringName) Parameters container IDependencyInjectionContainer connectionStringName string RegisterCurrentTestsConfiguredPersistenceLayer(IEndpointBuilder) public static void RegisterCurrentTestsConfiguredPersistenceLayer(this IEndpointBuilder @this) Parameters this IEndpointBuilder"
  },
  "api/Compze.Testing.Persistence.html": {
    "href": "api/Compze.Testing.Persistence.html",
    "title": "Namespace Compze.Testing.Persistence | Compze",
    "keywords": "Namespace Compze.Testing.Persistence Classes TestingPersistenceLayerRegistrar"
  },
  "api/Compze.Testing.TestEnv.DIContainer.html": {
    "href": "api/Compze.Testing.TestEnv.DIContainer.html",
    "title": "Class TestEnv.DIContainer | Compze",
    "keywords": "Class TestEnv.DIContainer Namespace Compze.Testing Assembly Compze.CQRS.dll public static class TestEnv.DIContainer Inheritance object TestEnv.DIContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current public static DIContainer Current { get; } Property Value DIContainer"
  },
  "api/Compze.Testing.TestEnv.Performance.html": {
    "href": "api/Compze.Testing.TestEnv.Performance.html",
    "title": "Class TestEnv.Performance | Compze",
    "keywords": "Class TestEnv.Performance Namespace Compze.Testing Assembly Compze.CQRS.dll public static class TestEnv.Performance Inheritance object TestEnv.Performance Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AreOptimizationsDisabled public static readonly bool AreOptimizationsDisabled Field Value bool IsInstrumented public static readonly bool IsInstrumented Field Value bool Methods AdjustForMachineSlowness(TimeSpan?) public static TimeSpan? AdjustForMachineSlowness(TimeSpan? timespan) Parameters timespan TimeSpan? Returns TimeSpan? LogMachineSlownessAdjustment() public static void LogMachineSlownessAdjustment()"
  },
  "api/Compze.Testing.TestEnv.PersistenceLayer.html": {
    "href": "api/Compze.Testing.TestEnv.PersistenceLayer.html",
    "title": "Class TestEnv.PersistenceLayer | Compze",
    "keywords": "Class TestEnv.PersistenceLayer Namespace Compze.Testing Assembly Compze.CQRS.dll Persistence layer members public static class TestEnv.PersistenceLayer Inheritance object TestEnv.PersistenceLayer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current public static PersistenceLayer Current { get; } Property Value PersistenceLayer Methods ValueFor<TValue>(TValue, TValue, TValue, TValue, TValue, TValue) public static TValue ValueFor<TValue>(TValue db2 = default, TValue memory = default, TValue msSql = default, TValue mySql = default, TValue orcl = default, TValue pgSql = default) Parameters db2 TValue memory TValue msSql TValue mySql TValue orcl TValue pgSql TValue Returns TValue Type Parameters TValue"
  },
  "api/Compze.Testing.TestEnv.html": {
    "href": "api/Compze.Testing.TestEnv.html",
    "title": "Class TestEnv | Compze",
    "keywords": "Class TestEnv Namespace Compze.Testing Assembly Compze.CQRS.dll TestEnvironment class. Shortened name since it is referenced statically and has nested types public static class TestEnv Inheritance object TestEnv Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods EnvDivide(int, double, double) public static int EnvDivide(this int original, double instrumented = 1, double unoptimized = 1) Parameters original int instrumented double unoptimized double Returns int EnvDivide(long, double, double) public static long EnvDivide(this long original, double instrumented = 1, double unoptimized = 1) Parameters original long instrumented double unoptimized double Returns long EnvDivide(TimeSpan, double, double) public static TimeSpan EnvDivide(this TimeSpan original, double instrumented = 1, double unoptimized = 1) Parameters original TimeSpan instrumented double unoptimized double Returns TimeSpan EnvMultiply(int, double, double) public static int EnvMultiply(this int original, double instrumented = 1, double unoptimized = 1) Parameters original int instrumented double unoptimized double Returns int EnvMultiply(long, double, double) public static long EnvMultiply(this long original, double instrumented = 1, double unoptimized = 1) Parameters original long instrumented double unoptimized double Returns long EnvMultiply(TimeSpan, double, double) public static TimeSpan EnvMultiply(this TimeSpan original, double instrumented = 1, double unoptimized = 1) Parameters original TimeSpan instrumented double unoptimized double Returns TimeSpan"
  },
  "api/Compze.Testing.TestFrameworkExtensions.NUnit.XTestAttribute.html": {
    "href": "api/Compze.Testing.TestFrameworkExtensions.NUnit.XTestAttribute.html",
    "title": "Class XTestAttribute | Compze",
    "keywords": "Class XTestAttribute Namespace Compze.Testing.TestFrameworkExtensions.NUnit Assembly Compze.Testing.dll This attribute will run the test eXclusively for the class that declares the test. It will not be executed when inheriting classes run their tests. This enables us to use BDD style nested classes with inheritance to achieve specification like testing, without an explosion of duplicated test runs. [AttributeUsage(AttributeTargets.Method, Inherited = false)] public sealed class XTestAttribute : TestAttribute, IApplyToTest, IImplyFixture, ISimpleTestBuilder Inheritance object Attribute NUnitAttribute TestAttribute XTestAttribute Implements IApplyToTest IImplyFixture ISimpleTestBuilder Inherited Members TestAttribute.ApplyToTest(Test) TestAttribute.Description TestAttribute.Author TestAttribute.TestOf TestAttribute.ExpectedResult Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods BuildFrom(IMethodInfo, Test?) Builds a single test from the specified method and context. public TestMethod BuildFrom(IMethodInfo method, Test? suite) Parameters method IMethodInfo The method to be used as a test suite Test The TestSuite to which the method will be added Returns TestMethod"
  },
  "api/Compze.Testing.TestFrameworkExtensions.NUnit.html": {
    "href": "api/Compze.Testing.TestFrameworkExtensions.NUnit.html",
    "title": "Namespace Compze.Testing.TestFrameworkExtensions.NUnit | Compze",
    "keywords": "Namespace Compze.Testing.TestFrameworkExtensions.NUnit Classes XTestAttribute This attribute will run the test eXclusively for the class that declares the test. It will not be executed when inheriting classes run their tests. This enables us to use BDD style nested classes with inheritance to achieve specification like testing, without an explosion of duplicated test runs."
  },
  "api/Compze.Testing.TestFrameworkExtensions.XUnit.XFactDiscoverer.html": {
    "href": "api/Compze.Testing.TestFrameworkExtensions.XUnit.XFactDiscoverer.html",
    "title": "Class XFactDiscoverer | Compze",
    "keywords": "Class XFactDiscoverer Namespace Compze.Testing.TestFrameworkExtensions.XUnit Assembly Compze.Testing.dll [UsedImplicitly] public class XFactDiscoverer : IXunitTestCaseDiscoverer Inheritance object XFactDiscoverer Implements IXunitTestCaseDiscoverer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Constructors XFactDiscoverer(IMessageSink) public XFactDiscoverer(IMessageSink diagnosticMessageSink) Parameters diagnosticMessageSink IMessageSink Methods Discover(ITestFrameworkDiscoveryOptions, ITestMethod, IAttributeInfo) Discover test cases from a test method. public IEnumerable<IXunitTestCase> Discover(ITestFrameworkDiscoveryOptions discoveryOptions, ITestMethod testMethod, IAttributeInfo factAttribute) Parameters discoveryOptions ITestFrameworkDiscoveryOptions The discovery options to be used. testMethod ITestMethod The test method the test cases belong to. factAttribute IAttributeInfo The fact attribute attached to the test method. Returns IEnumerable<IXunitTestCase> Returns zero or more test cases represented by the test method."
  },
  "api/Compze.Testing.TestFrameworkExtensions.XUnit.html": {
    "href": "api/Compze.Testing.TestFrameworkExtensions.XUnit.html",
    "title": "Namespace Compze.Testing.TestFrameworkExtensions.XUnit | Compze",
    "keywords": "Namespace Compze.Testing.TestFrameworkExtensions.XUnit Classes XFactDiscoverer"
  },
  "api/Compze.Testing.TestFrameworkExtensions.html": {
    "href": "api/Compze.Testing.TestFrameworkExtensions.html",
    "title": "Namespace Compze.Testing.TestFrameworkExtensions | Compze",
    "keywords": "Namespace Compze.Testing.TestFrameworkExtensions Namespaces Compze.Testing.TestFrameworkExtensions.NUnit Compze.Testing.TestFrameworkExtensions.XUnit"
  },
  "api/Compze.Testing.Threading.TestingTaskRunner.html": {
    "href": "api/Compze.Testing.Threading.TestingTaskRunner.html",
    "title": "Class TestingTaskRunner | Compze",
    "keywords": "Class TestingTaskRunner Namespace Compze.Testing.Threading Assembly Compze.CQRS.dll Runs and monitors tasks on background threads. Throws AggregateException on dispose if any throw exceptions or do not complete within timeout. public sealed class TestingTaskRunner : IDisposable Inheritance object TestingTaskRunner Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods Pipe.mutateAsync<T>(T, Func<T, Task>) Pipe.mutate<T>(T, Action<T>) Pipe.select<TValue, TResult>(TValue, Func<TValue, TResult>) Pipe.then<TValue, TResult>(TValue, Func<TResult>) Pipe.then<TValue, TResult>(TValue, TResult) NullableCE.NotNull<T>(T?) ObjectCE.ToStringNotNull(object) Constructors TestingTaskRunner(TimeSpan) Runs and monitors tasks on background threads. Throws AggregateException on dispose if any throw exceptions or do not complete within timeout. public TestingTaskRunner(TimeSpan timeout) Parameters timeout TimeSpan Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Monitor(IEnumerable<Task>) public void Monitor(IEnumerable<Task> tasks) Parameters tasks IEnumerable<Task> Monitor(params Task[]) public void Monitor(params Task[] task) Parameters task Task[] Start(params Action[]) public TestingTaskRunner Start(params Action[] tasks) Parameters tasks Action[] Returns TestingTaskRunner Start(IEnumerable<Action>) public TestingTaskRunner Start(IEnumerable<Action> tasks) Parameters tasks IEnumerable<Action> Returns TestingTaskRunner StartTimes(int, Action) public void StartTimes(int times, Action task) Parameters times int task Action StartTimes(int, Action<int>) public void StartTimes(int times, Action<int> task) Parameters times int task Action<int> StartTimes(int, Func<int, Task>) public void StartTimes(int times, Func<int, Task> task) Parameters times int task Func<int, Task> StartTimes(int, Func<Task>) public void StartTimes(int times, Func<Task> task) Parameters times int task Func<Task> WaitForTasksToComplete() public void WaitForTasksToComplete() WithTimeout(TimeSpan) public static TestingTaskRunner WithTimeout(TimeSpan timeout) Parameters timeout TimeSpan Returns TestingTaskRunner"
  },
  "api/Compze.Testing.Threading.html": {
    "href": "api/Compze.Testing.Threading.html",
    "title": "Namespace Compze.Testing.Threading | Compze",
    "keywords": "Namespace Compze.Testing.Threading Classes TestingTaskRunner Runs and monitors tasks on background threads. Throws AggregateException on dispose if any throw exceptions or do not complete within timeout."
  },
  "api/Compze.Testing.UniversalTestBase.html": {
    "href": "api/Compze.Testing.UniversalTestBase.html",
    "title": "Class UniversalTestBase | Compze",
    "keywords": "Class UniversalTestBase Namespace Compze.Testing Assembly Compze.Testing.dll public class UniversalTestBase Inheritance object UniversalTestBase Derived DuplicateByPluggableComponentTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods SurfaceAnyUncatchableExceptions() [TearDown] public void SurfaceAnyUncatchableExceptions()"
  },
  "api/Compze.Testing.UniversalTestFixture.html": {
    "href": "api/Compze.Testing.UniversalTestFixture.html",
    "title": "Class UniversalTestFixture | Compze",
    "keywords": "Class UniversalTestFixture Namespace Compze.Testing Assembly Compze.Testing.dll [SetUpFixture] public class UniversalTestFixture Inheritance object UniversalTestFixture Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods NullableCE.NotNull<T>(T?) AggregateEventDebugSerializer.ToNewtonSoftDebugString(object, Formatting) Methods UniversalSetup() [OneTimeSetUp] public void UniversalSetup() UniversalTeardown() [OneTimeTearDown] public Task UniversalTeardown() Returns Task"
  },
  "api/Compze.Testing.html": {
    "href": "api/Compze.Testing.html",
    "title": "Namespace Compze.Testing | Compze",
    "keywords": "Namespace Compze.Testing Namespaces Compze.Testing.DependencyInjection Compze.Testing.Messaging.Buses Compze.Testing.Persistence Compze.Testing.TestFrameworkExtensions.NUnit Classes AggregateEventDebugSerializer DuplicateByPluggableComponentTest LevelOfParallelismCEAttribute LongRunningAttribute UniversalTestBase UniversalTestFixture"
  },
  "api/Compze.html": {
    "href": "api/Compze.html",
    "title": "Namespace Compze | Compze",
    "keywords": "Namespace Compze Namespaces Compze.DDD Compze.GenericAbstractions.Time Compze.Messaging Compze.Persistence Compze.Refactoring.Naming Compze.SystemCE"
  },
  "docs/_sections/components/event-store/basics.html": {
    "href": "docs/_sections/components/event-store/basics.html",
    "title": "| Compze",
    "keywords": "Event Store Basics Aggregate Roots The Event Store Session Saving and loading aggregate roots."
  },
  "docs/_sections/components/event-store/refactoring.html": {
    "href": "docs/_sections/components/event-store/refactoring.html",
    "title": "| Compze",
    "keywords": "Refactoring Event Streams"
  },
  "docs/messaging/basics.html": {
    "href": "docs/messaging/basics.html",
    "title": "Messaging Basics | Compze",
    "keywords": "Messaging Basics Note The code blocks in this section contain pseudocode for illustration purposes. It is not compatible with any specific library including Compze. Messaging Any method call can, if you squint, be viewed as one object sending a message to another object. However, this ties the sender tightly to the receiver. Loose coupling benefits can be had by making the message passing explicit. By sending messages to a receiver through some intermediary rather than directly. Doing so is called messaging. Tip Messaging is also known as message passing. Messaging terms Here we define some terms as they are used in the context of this document. Message An object for the purpose of sending data to a receiver. Message Type The System.Type returned by message.GetType(). Message Handler In principle just a function that takes a message as a parameter. void Handle(RegisterAccountCommand command) {} In practice most message handlers need to have one or more dependencies injected into them. In order to support this handlers are often required to be wrapped inside interfaces. That way instances of implementing classes can be resolved from an IOC container easily. class RegisterAccountCommandHandler : IMessageHandler<RegisterAccountCommand> { public void Handle(RegisterAccountCommand command) {} } Routing The mechanism by which messages are delivered to handlers. Service Bus A component which decouples message senders from message handlers. Instead of client code calling handler methods, clients send and receive messages via the bus. The bus is responsible for routing the messages to the appropriate handler(s) and invoking them. .Manual service invocation requires an instance of the service. serviceInstance.RegisterAccount(arguments.... Client don't even know where the service is when accessing it across a bus bus.Send(new RegisterAccountCommand( Tip The benefits of this decoupling may not be obvious at first, but they are profound. Command A message that instructs the handler to perform an action. class RegisterAccountCommand { AccountId AccountId { get; } Password Password { get; } Email Email { get; } } Event A message that informs handlers about something that has happened. interface IAccountRegisteredEvent { AccountId AccountId { get; } Password Password { get; } Email Email { get; } } Query A message that asks the handler to supply some data. class RecentlyRegisteredAccountsQuery { TimeSpan MaxAge { get; } } Command Handler A message handler for a command. Must ensure that the command is successfully executed or throw an exception. Query Handler A message handler for a query. Must ensure that the query is successfully executed or throw an exception. Event Handler A message handler for an event. Event Listener Synonym of Event Handler. Subscribe The action of registering an Event Handler with a service bus. Subscriber An event handler registered on a service bus. Sending a command or query Asking a service bus to deliver a message to its handler. Publishing an event Delivering an event to all it's subscribers. Raising an event Same as Publishing an event Tip You always publish/Raise events. Keeping Send separate from Publish in your mind is fundamental to understanding."
  },
  "docs/messaging/semantic-routing.html": {
    "href": "docs/messaging/semantic-routing.html",
    "title": "Semantic Routing | Compze",
    "keywords": "Semantic Routing Note Semantic routing is used throughout the toolkit. It is foundational for the Event Store, Service Bus, Query Model updaters and Generators... Definition Events are delivered to every registered handler with a compatible argument type. Commands and query message types must have exactly one handler. Tip The first rule is really just polymorphism. Tip Semantic Routing is also known as \"Polymorphic routing\" or \"Polymorphic dispatching\". Clarifying examples Given these event interfaces and implementing classes interface IA interface IB : IA interface IC : IB class A : IA {} class B : IB {} class C : IC {} And these handler methods registered on our service bus void HandleA(IA ia){} //Handles IA, IB and IC void HandleB(IB ib){} //Handles IB and IC void HandleC(IC ic){} //Handles only IC .Let's publish some events and examine the results. serviceBus.Publish(new A()); //Delivered to HandleA serviceBus.Publish(new B()); //Delivered to HandleA and HandleB serviceBus.Publish(new C()); //Delivered to HandleA, HandleB and HandleC Loose coupling through interfaces Working with events in terms of interfaces maintains flexibility. Here is a partial list of things it is possible to do without having to change any code in any event listener. Refactoring event classes Adding event classes Adding event interfaces Changing event inheritance hierarchy Tip Remember to think about events in terms of interfaces. The event classes are an implementation detail that should only ever be known by the code that publishes the event. Warning Do not subscribe to event classes. You will lose the benefits just discussed."
  },
  "docs/prerequisite-terms.html": {
    "href": "docs/prerequisite-terms.html",
    "title": "| Compze",
    "keywords": "Domain Driven Design Terms Terms from the best software design book of all time. Domain Driven Design / DDD Just about impossible to summarize. Do read the book. That said, Fowler makes a good attempt Aggregate"
  },
  "docs/the-tools.html": {
    "href": "docs/the-tools.html",
    "title": "| Compze",
    "keywords": "The tools Compze.Events Leveraging C# interface inheritance and generic variance enables A powerful universal event modeling paradigm which Gives an unprecedented ability to understand domains in terms of how the events that can occur relate to each other. Eliminates all need for manual event routing and type checking. Enables modeling inheritance and composition of event based aggregates with elegant ease and precision. Unifies fine-grained property-updated style events and coarse-grained domain events. Enables subscribing to precisely the event you need, yet be guaranteed that when new events are added, inheriting the current event, you will receive those too. Compze.Aggregates Build maintainable Compze.Events based domain aggregates. Compose aggregates out of reusable event based Aggregate base classes Components Entities Store your aggregates however you like. Event store optional. Note: Much/most of the maintenance pain of event driven systems lie in the constraints imposed by event sourcing and the requirement to maintain events forever. Well, if you don't need that, just skip it! Compze.ServiceBus Fully supports the Compze.Events modelling paradigm. Performant black box testing In process Leverage Compze.Events and Aggregates without incurring any of the complexities of asynchronous distribution. Distributed Fully transactional Exactly once delivery Persist messages in your existing database server. PostgreSQL, MS SQL, MySQL Compze.EventStore Fully leverages Compze.Events Fully transactional Easy performant black box testing Persist events in your application's existing database server PostgreSQL, MS SQL, MySQL Refactor your event histories Compze.HyperMedia Create APIs that Can be navigated like browsing a WebSite, through autocomplete in your IDE. Can be in-memory, or remote over HTTP Are fully type safe Further encapsulates your domain, exposing less implementation details than traditional services. Are excellently suited for building that Just-Beneath-The-UI-Rendering layer that is ideal for black box testing. Support performant black box testing. Filling in cracks / Scratching that persistent itch Some problems don't need very much code to resolve them. You might say they are just cracks that need to be filled in. Having that itch scratched can feel fabulous though! Compze.Testing BDD style testing without leaving NUnit/XUnit. Manipulate threads with precision to expose those hard to recreate race conditions. Get an empty database for black box testing in a single line of code. PostgreSQL, MS SQL, MySQL Compze.Threading Transform thread synchronization with just a handful of abstractions. Guarantee that all usage of a resource is synchronized. Wait for shared objects to reach certain states. Don't deadlock permanently. Instead, time out, and report the stack traces of the conflicting threads. Compze.Contracts Code contracts that are Simple Fluent Expressive Easily extended with custom assertions"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Compze",
    "keywords": "Ushering in paradigm shifts There are two areas where it seems to us like the industry has been stuck in old models for more than a decade. Failing to realize and leverage the potential of paradigms that are already here. Paradigms which can fundamentally transform how we build systems for the better. Compze aims to help make these paradigms widely understood, accessible, and popular through developing tooling and writing documentation: Semantic Events Leveraging well established and understood C# features enables an event modeling paradigm which Gives an unprecedented ability to understand domains in terms of how the events that can occur relate to each other. Eliminates all need for manual event routing and type checking. Dramatically reduces the number of event subscriptions needed. Enables modeling inheritance and composition of event based aggregates with elegant precision. Unifies fine-grained property-updated style events and coarse-grained domain events. Enables subscribing to precisely the event you need, while being guaranteed that when new events are added, inheriting the current event, you will receive those too without needing to change anything in your subscriber code. In spite of this, to this day, countless event driven applications are shock full of code that leverages none of these possibilities. Resulting in what can only be described as maintenance nightmares. It's essentially the event equivalent of working in C# while completely refusing to use generics and object-oriented programming. Surely we should not even need to argue that this is ill-advised? Browsable APIs The most popular API in the world is a Browsable API (REST to be exact). You are using it right now. It's called the world wide web. Can you imagine trying to use it without links and forms? Imagine reading this page and instead of a link you are presented with: 4375. That is actually how we build most APIs today. Why? What if we designed Browsable APIs instead? APIs which: Can be fully explored using a Navigator, browsed much like a website, by Getting Links Posting Commands All with full type safety and autocomplete in your IDE Can be in-memory, or remote Routes messages by .Net types giving Zero configuration routing A simple already well known programming model. Further encapsulates your domain, exposing less implementation details than traditional services. Are excellently suited for building a Just-Beneath-The-UI-Rendering-Layer layer, ideal for black box testing. Once you used APIs like that, how would you feel about an API that gives you an int instead of an ILink<User>?"
  },
  "index/aggregates.html": {
    "href": "index/aggregates.html",
    "title": "| Compze",
    "keywords": "Compze.Aggregates Build maintainable Compze.Events based domain aggregates. Compose aggregates out of reusable event based Aggregate base classes Components Entities Store your aggregates however you like. Event store optional. Note: Much/most of the maintenance pain of event driven systems lie in the constraints imposed by event sourcing and the requirement to maintain events forever. Well, if you don't need that, just skip it!"
  },
  "index/contracts.html": {
    "href": "index/contracts.html",
    "title": "| Compze",
    "keywords": "Compze.Contracts Code contracts that are Simple Fluent Expressive Easily extended with custom assertions"
  },
  "index/events.html": {
    "href": "index/events.html",
    "title": "| Compze",
    "keywords": "Compze.Events Leveraging C# interface inheritance and generic variance enables A powerful universal event modeling paradigm which Gives an unprecedented ability to understand domains in terms of how the events that can occur relate to each other. Eliminates all need for manual event routing and type checking. Enables modeling inheritance and composition of event based aggregates with elegant ease and precision. Unifies fine-grained property-updated style events and coarse-grained domain events. Enables subscribing to precisely the event you need, yet be guaranteed that when new events are added, inheriting the current event, you will receive those too."
  },
  "index/eventstore.html": {
    "href": "index/eventstore.html",
    "title": "| Compze",
    "keywords": "Compze.EventStore Fully leverages Compze.Events Fully transactional Easy performant black box testing Persist events in your application's existing database server PostgreSQL, MS SQL, MySQL Refactor your event histories"
  },
  "index/hypermedia-apis.html": {
    "href": "index/hypermedia-apis.html",
    "title": "| Compze",
    "keywords": "Browsable APIs The most popular API in the world is a Browsable API (REST to be exact). You are using it right now. It's called the world wide web. Can you imagine trying to use it without links and forms? Imagine reading this page and instead of a link you are presented with: 4375. That is actually how we build most APIs today. Why? What if we designed Browsable APIs instead? APIs which: Can be fully explored using a Navigator, browsed much like a website, by Getting Links Posting Commands All with full type safety and autocomplete in your IDE Can be in-memory, or remote Routes messages by .Net types giving Zero configuration routing A simple already well known programming model. Further encapsulates your domain, exposing less implementation details than traditional services. Are excellently suited for building a Just-Beneath-The-UI-Rendering-Layer layer, ideal for black box testing. Once you used APIs like that, how would you feel about an API that gives you an int instead of an ILink<User>?"
  },
  "index/hypermedia.html": {
    "href": "index/hypermedia.html",
    "title": "| Compze",
    "keywords": "Compze.HyperMedia Create APIs that Can be navigated like browsing a WebSite, through autocomplete in your IDE. Can be in-memory, or remote over HTTP Are fully type safe Further encapsulates your domain, exposing less implementation details than traditional services. Are excellently suited for building that Just-Beneath-The-UI-Rendering layer that is ideal for black box testing. Support performant black box testing."
  },
  "index/semantic-events.html": {
    "href": "index/semantic-events.html",
    "title": "| Compze",
    "keywords": "Semantic Events Leveraging well established and understood C# features enables an event modeling paradigm which Gives an unprecedented ability to understand domains in terms of how the events that can occur relate to each other. Eliminates all need for manual event routing and type checking. Dramatically reduces the number of event subscriptions needed. Enables modeling inheritance and composition of event based aggregates with elegant precision. Unifies fine-grained property-updated style events and coarse-grained domain events. Enables subscribing to precisely the event you need, while being guaranteed that when new events are added, inheriting the current event, you will receive those too without needing to change anything in your subscriber code. In spite of this, to this day, countless event driven applications are shock full of code that leverages none of these possibilities. Resulting in what can only be described as maintenance nightmares. It's essentially the event equivalent of working in C# while completely refusing to use generics and object-oriented programming. Surely we should not even need to argue that this is ill-advised?"
  },
  "index/servicebus.html": {
    "href": "index/servicebus.html",
    "title": "| Compze",
    "keywords": "Compze.ServiceBus Fully supports the Compze.Events modelling paradigm. Performant black box testing In process Leverage Compze.Events and Aggregates without incurring any of the complexities of asynchronous distribution. Distributed Fully transactional Exactly once delivery Persist messages in your existing database server. PostgreSQL, MS SQL, MySQL"
  },
  "index/testing.html": {
    "href": "index/testing.html",
    "title": "| Compze",
    "keywords": "Compze.Testing BDD style testing without leaving NUnit/XUnit. Manipulate threads with precision to expose those hard to recreate race conditions. Get an empty database for black box testing in a single line of code. PostgreSQL, MS SQL, MySQL"
  },
  "index/threading.html": {
    "href": "index/threading.html",
    "title": "| Compze",
    "keywords": "Compze.Threading Transform thread synchronization with just a handful of abstractions. Guarantee that all usage of a resource is synchronized. Wait for shared objects to reach certain states. Don't deadlock permanently. Instead, time out, and report the stack traces of the conflicting threads."
  },
  "news/2024-12-09-new-site.html": {
    "href": "news/2024-12-09-new-site.html",
    "title": "| Compze",
    "keywords": "New site published We finally got around to starting to create a site for Compze. It is very minimal right now, essentially just containing the start page that pitches what Compze is all about, but we expect to be expanding on it soon. It is built using DocFX which means that we can mix content with real C# code with ease. We plan to leverage that to produce some excellent, we hope, documentation soon!"
  },
  "news/2024-12-10-01-news-section.html": {
    "href": "news/2024-12-10-01-news-section.html",
    "title": "| Compze",
    "keywords": "News section added We added this news section that you are reading right now, so that visitors have somewhere to go to check if there is anything new of importance here."
  },
  "news/2024-12-10-02-semantic-events-sections.html": {
    "href": "news/2024-12-10-02-semantic-events-sections.html",
    "title": "| Compze",
    "keywords": "Three pages of Semantic Events documentation added."
  },
  "news/2024-12-11-inheriting-aggregates.html": {
    "href": "news/2024-12-11-inheriting-aggregates.html",
    "title": "| Compze",
    "keywords": "Section on aggregates inheritance added Find it here"
  },
  "paradigms/hypermedia-apis/introduction.html": {
    "href": "paradigms/hypermedia-apis/introduction.html",
    "title": "| Compze",
    "keywords": "coming soon: 2024-12-10"
  },
  "paradigms/semantic-events/aggregate-inheritance.html": {
    "href": "paradigms/semantic-events/aggregate-inheritance.html",
    "title": "Aggregate Inheritance | Compze",
    "keywords": "Note Here we are entering less well charted waters. We are confident about the design we present here. However, full, support for routing events like this, and for building aggregates in this way, is still a work in progress. Aggregate Inheritance So far we have adressed the inheritance hierarchy of events within a single aggregate. Now let's look at what happens when we inherit one aggregate from another. Let's go with a trivial and classic example to make the point with as little distraction as possible. Animals. interface IAnimalEvent : IAggregateEvent { interface IBorn : IAnimalEvent, IAggregateCreatedEvent; } interface ICatEvent : IAnimalEvent; interface IDogEvent : IAnimalEvent; The problem Now imagine you're a dog person, you only care about when dogs are born. How would you listen to just the dog born events? Uh oh! You can't. There is only one IBorn and it is shared by all the animals. Much of the point of inheritance is to reuse functionality, so we can't very well require every inheriting class to reimplement birth using a different interface. That would defeat the point. Warning If you're thinking of using some sort of factory method pattern for generating the subclass events and adding inheriting interfaces for dogs. Don't. We tried it. And it turns out that you will have to mirror and duplicate the entire semantic hierarchy of the base class event interfaces for each inheriting class. It turns into an absolutely horrifying mess of duplication where the slightest misstep breaks things. We gave up entirely on inheriting aggregates when we had found no better way than that. Please, don't even try it. The solution Thankfully we eventually realized that there is an elegant simple solution built right into C#. This should be familiar: IEnumerable<object> objects = [new object(), new object()]; IEnumerable<string> strings = [\"1\", \"2\"]; objects = strings; Do you see it? Generic covariance! IEnumarable<string> is assignable to IEnumerable<object> and assignability is how we route events with Semantic Events. Eureka! Well it turns out it works. (But requires a lot of major refactorings within Compze which are still ongoing.) Rather than try to twist english into a language capable of expressing what I'm talking about, which I'm finding unmanageable, I'll use C#. interface IAnimalEvent<out T> : IAggregateWrapperEvent<T> where T : IAnimalEvent; interface ICatEvent<out T> : IAnimalEvent<T> where T : IAnimalEvent; interface IDogEvent<out T> : IAnimalEvent<T> where T : IAnimalEvent; So the wrapping interfaces, which take a type parameter, tell us only which class published the event. A Cat or a Dog instance (assuming Animal is abstract). The inner event is the real event that contains all the specifics of what happened. So actually, what a Dog publishes is never just IDogEvent, it is always IDogEvent<IAnimalEvent>, correspondingly a Cat publishes ICatEvent<IAnimalEvent> and the problem has been solved. Now you can listen to just the events from dogs by doing this: registrar .ForEvent<IDogEvent<IAnimalEvent.IBorn>>(born => WriteLine($\"Dog Id:{born.Event.AggregateId} was born!\")); Do this if you only care about cats: registrar .ForEvent<ICatEvent<IAnimalEvent.IBorn>>(born => WriteLine($\"Cat Id:{born.Event.AggregateId} was born!\")); This if you don't care what type of animal it was: registrar .ForEvent<IAnimalEvent.IBorn>(born => WriteLine($\"Animal Id:{born.AggregateId} was born!\")); And this if you care about all animals, but need handle different animals differently: registrar .ForEvent<IAnimalEvent<IAnimalEvent.IBorn>>( born => WriteLine($\"{born.GetType().Name.Replace(\"Event\", \"\")} Id: {born.Event.AggregateId}, was born!\"));"
  },
  "paradigms/semantic-events/definition.html": {
    "href": "paradigms/semantic-events/definition.html",
    "title": "Semantic Events: | Compze",
    "keywords": "Note You are absolutely not expected to understand all the how's and why's of this definition the first time you read it. Think of it as combination cheat sheet and teaser. Semantic Events: Declare their meaning through their type Semantic events use the type system of the language in which they are implemented to declare their meaning, in as much detail and as unambiguously as possible. All the semantics of the event should be part of the declaration of the event type. Are always interfaces In .Net semantic events are always interfaces, because to encode meaning in detail multiple inheritance is required. Some class will implement the interface, but you always subscribe to interfaces and design in terms of interfaces. Implements IEvent Every semantic event implements IEvent Are routed by type compatibility The type of an event is the means through which events are routed to subscribers. Every single type-compatible registered handler method, local or remote, will be called when an event is published. To illustrate: Given that the method void HandleEvent(IEventType anEvent) is registered as an event handler, then every single event that can be assigned to a variable of type IEventType will be delivered to HandleEvent This type compatibility includes support for generic covariance Interface inheritance is not enough to a model realistic domains effectively. To support inheritance of event based aggregates, and reusable event based components, semantic events leverage generic covariance. For example: given the interface IWrapperEvent<out T> this handler: void HandleEvent(IWrapperEvent<IEvent> anEvent) would be called whenever any type of IWrapperEvent<T> was published. IWrapperEvent<IUserEvent>, IWrapperEvent<IAnimalEvent> and so on. Likewise, given the interface IInheritingWrapperEvent<out T> : IWrapperEvent<T>; when any IInheritingWrapperEvent<T> was published, the above handler would also be called."
  },
  "paradigms/semantic-events/event-naming.html": {
    "href": "paradigms/semantic-events/event-naming.html",
    "title": "| Compze",
    "keywords": "How to name events On the last page we were starting to run into some slightly unwieldy event names. Like IUserEmailPropertyUpdatedEvent. Now that it still reasonably readable and mostly unambiguous. That will not hold true as things get more complicated though if we keep naming events like that. Take this slightly more complicated event name for instance: IUserProfileNamePropertyUpdatedEvent. Is this an event raised by a UserProfile aggregate? Or is it an event raised by a Profile component within a User aggregate? Or is it a PropertyUpdatedEvent from the ProfileName component of the User aggregate? Imagine trying to untangle such questions when you have four or more levels of nested composition in your aggregate.... We've tried a number of different ways of dealing with event naming. One is using namespaces, which sounds like it should work. User.Events.ProfileComponent.PropertyUpdatedEvents.IName. Not too bad, right? Except when searching for types, or after your IDE helpfully simplifies references for you, you end up looking at just IName, which is unhelpful... registrar.ForEvent<IName>(nameEvent => WriteLine($\"Uhmm... What is happening here?\")); The best structure we've found to deal with event naming is this: interface IUserEvent : IAggregateEvent { internal interface IProfile : IUserEvent { internal interface IPropertyUpdated : IProfile { internal interface IName : IPropertyUpdated { string Name { get; } } } } } Nice and structured with each level of nesting inheriting from the previous level. Giving us: registrar .ForEvent<IUserEvent.IProfile.IPropertyUpdated.IName>(clarity => WriteLine($\"Ahh: {clarity.Name}\")); Readable and unambiguous. Not bad. Note We do not repeat Event for every level of nesting. And should you dislike the repeated I we do not condemn doing this: IUserEvent.Profile.PropertyUpdated.Name \uD83D\uDE09"
  },
  "paradigms/semantic-events/introduction.html": {
    "href": "paradigms/semantic-events/introduction.html",
    "title": "| Compze",
    "keywords": "So what does all of that mean in practice? Let's dive right in to some code illustrating semantic events. This is the root of the event inheritance hierarchy. By some level of indirection, every event implements it: public interface IEvent; Every event raised by an aggregate will implement this interface: public interface IAggregateEvent : IEvent { Guid AggregateId { get; } } Every event that means an aggregate was created will implement this interface. public interface IAggregateCreatedEvent : IAggregateEvent; Let's use User as an example aggregate. Here's the root of the User aggregate event hierarchy: interface IUserEvent : IAggregateEvent; And of course things can happen related to users: interface IUserCreated : IUserEvent, IAggregateCreatedEvent; interface IUserRegistered : IUserCreated; interface IUserImported : IUserRegistered; Now stop and look carefully at how the events so far implement each other. This is the core concept of semantic events. That the relationship in meaning between events can be modeled using .Net type compatibility, and that we can use the same mechanism to listen to exactly the events we need. Most of this information is declared by implementing various interfaces. Let's examine a simple example of what this means in practice. Here's how you might subscribe to these events: registrar .ForEvent<IUserEvent>(userEvent => WriteLine($\"User: {userEvent.AggregateId} something happened\")) .ForEvent<IUserRegistered>(userRegistered => WriteLine($\"User: {userRegistered.AggregateId} registered\")) .ForEvent<IUserImported>(userImported => WriteLine($\"User: {userImported.AggregateId} imported\")); Now let's see if your intuition is on target here. When an IUserImported event is published, What will be the output? The correct answer is: User: SOME-GUID something happened User: SOME-GUID registered User: SOME-GUID imported The type IUserImported event is compatible with all the registered handlers, and will therefore be delivered to all of them in the order that the handlers were registered. If an IUserEvent was published only the first subscriber would be called, if an IUserRegistered was published, the first two would be called."
  },
  "paradigms/semantic-events/property-updated-events.html": {
    "href": "paradigms/semantic-events/property-updated-events.html",
    "title": "| Compze",
    "keywords": "Adding properties to our events You may have noticed that the events on the last page were missing a little something, namely properties. Now the natural expectation would be for a slightly more realistic version of something like this: interface IUserRegistered : IUserEvent, IAggregateCreatedEvent; interface IUserChangedEmail : IUserEvent; to be something like this: interface IUserRegistered : IUserEvent, IAggregateCreatedEvent { Email Email { get; } } interface IUserChangedEmail : IUserEvent { Email Email { get; } } However, doing that does not work well at all. The dilemma of Fine-grained vs Coarse-grained events The reason the above code is terrible idea, is that some event listeners care only about updated data, and others care about semantics. If we do things like above, the code that care only about data will not only have to know about and manually listen to every single concrete event in the system that updates Email, we must keep track of every such listener for every single aggregate property in our whole system, and update each of them every time a new event that updates a user email is created \uD83D\uDE28 Classically the above problem has lead to projects being forced to choose between using fine-grained property-updated events and coarse-grained semantically meaningful domain events. The problem is that both choices are maintainability disasters. If you go with property-updated style events you lose virtually all ability to understand the semantics of what happened, as a single user interaction is exploded into a number of individual data atoms \uD83D\uDE2C If you go with coarse-grained events, we run head first into the issues described in the previous paragraph. You cannot win as long as you accept the choice. Unifying Fine-grained and Coarse-grained events With semantic events you don't need to choose. If you do this: interface IUserEmailPropertyUpdated : IUserEvent { Email Email { get; } } interface IUserRegistered : IUserEmailPropertyUpdated, IAggregateCreatedEvent; interface IUserChangedEmail : IUserEmailPropertyUpdated; The whole problem disappears like it never existed ☺️ When we design events like that, a listener like this ... registrar .ForEvent<IUserEmailPropertyUpdated>(emailUpdated => WriteLine($\"User: {emailUpdated.AggregateId} Email: {emailUpdated.Email}\")); ... will never need to change throughout the whole lifetime of the system. It will be called whenever a user's email is updated. Period. Likewise, listeners that care about when users are registered will listen to IUserRegistered and receive the same benefits. No matter how many new ways of registering users we add, no matter how many new subtypes of IUserRegistered are added. That code will always be called and does not need to change. A better perspective? Rather than saying that some listeners care only about data, and not semantics, it may be better to say that they care about different aspects of semantics, of the meaning of the event. That IUserRegistered changes the Email property of a User is part of the semantics of the event and to be properly designed that means that the event must implement another event that declares this meaning. Without that, the declaration of IUserRegistered is semantically incomplete and that is why we run into trouble."
  },
  "paradigms/semantic-events/reusable-components.html": {
    "href": "paradigms/semantic-events/reusable-components.html",
    "title": "Reusable event based components and entities | Compze",
    "keywords": "Note Now we are uncharted waters. We have a fair amount of confidence that the design here will work out. And you may already do be able to do this in Compze on your own, but there is no support built into the Aggregate base classes to make simple, nor have we done it ourselves yet. You would need to perform the wrapping manually. Note Aggregate specific nested components and entities are fully supported already. We've already shown examples of how events for them look. You just nest component/entity event interfaces within your root event interface. Simple. What we are discussing on this page is how to create event based components and entities that can be used in multiple different event based aggregates without code duplication. That is another ballgame. Reusable event based components and entities So as in the note above, the question is how we go about it when there is some sort of component or entity that we want to be able to reuse in multiple different aggregates without code duplication. We suspect this is not terribly common, yet we surely would consider any approach to modeling that did not support this without breaking a sweat to be badly limited. So how would one go about it? Since it is shared reusable component It cannot raise aggregate events, that must be upp to the aggregate. We must be able to subscribe to the published events by type, meaning that the event ultimately raised by the aggregate must declaratively, statically, contain the type of the event from the component. Thankfully the solution to inheriting aggregates has taken us most of the way to a solution for this problem too. We will just need to wrap one more time, generic covariance to the rescue once more."
  }
}